{"version":3,"file":"DashboardListPage.ee5d4ab3eea6207cd172.js","mappings":"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","sources":["webpack://grafana/./public/app/features/search/components/DashboardActions.tsx","webpack://grafana/./public/app/features/search/components/ManageDashboardsNew.tsx","webpack://grafana/./public/app/features/search/components/DashboardListPage.tsx","webpack://grafana/./public/app/features/search/loaders.ts"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { Menu, Dropdown, Button, Icon } from '@grafana/ui';\n\nexport interface Props {\n  folderId?: number;\n  canCreateFolders?: boolean;\n  canCreateDashboards?: boolean;\n}\n\nexport const DashboardActions: FC<Props> = ({ folderId, canCreateFolders = false, canCreateDashboards = false }) => {\n  const actionUrl = (type: string) => {\n    let url = `dashboard/${type}`;\n\n    if (folderId) {\n      url += `?folderId=${folderId}`;\n    }\n\n    return url;\n  };\n\n  const MenuActions = () => {\n    return (\n      <Menu>\n        {canCreateDashboards && <Menu.Item url={actionUrl('new')} label=\"New Dashboard\" />}\n        {!folderId && canCreateFolders && <Menu.Item url=\"dashboards/folder/new\" label=\"New Folder\" />}\n        {canCreateDashboards && <Menu.Item url={actionUrl('import')} label=\"Import\" />}\n      </Menu>\n    );\n  };\n\n  return (\n    <div>\n      <Dropdown overlay={MenuActions} placement=\"bottom-start\">\n        <Button variant=\"primary\">\n          New\n          <Icon name=\"angle-down\" />\n        </Button>\n      </Dropdown>\n    </div>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Input, useStyles2, Spinner } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO, AccessControlAction } from 'app/types';\n\nimport { useKeyNavigationListener } from '../hooks/useSearchKeyboardSelection';\nimport { SearchView } from '../page/components/SearchView';\nimport { getSearchStateManager } from '../state/SearchStateManager';\n\nimport { DashboardActions } from './DashboardActions';\n\nexport interface Props {\n  folder?: FolderDTO;\n}\n\nexport const ManageDashboardsNew = React.memo(({ folder }: Props) => {\n  const styles = useStyles2(getStyles);\n  // since we don't use \"query\" from use search... it is not actually loaded from the URL!\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n  const { onKeyDown, keyboardEvents } = useKeyNavigationListener();\n\n  // TODO: we need to refactor DashboardActions to use folder.uid instead\n  const folderId = folder?.id;\n  // const folderUid = folder?.uid;\n  const canSave = folder?.canSave;\n  const { isEditor } = contextSrv;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n  const canCreateFolders = contextSrv.hasAccess(AccessControlAction.FoldersCreate, isEditor);\n  const canCreateDashboardsFallback = hasEditPermissionInFolders || !!canSave;\n  const canCreateDashboards = folder?.id\n    ? contextSrv.hasAccessInMetadata(AccessControlAction.DashboardsCreate, folder, canCreateDashboardsFallback)\n    : contextSrv.hasAccess(AccessControlAction.DashboardsCreate, canCreateDashboardsFallback);\n  const viewActions = (folder === undefined && canCreateFolders) || canCreateDashboards;\n\n  useEffect(() => stateManager.initStateFromUrl(folder?.uid), [folder?.uid, stateManager]);\n\n  return (\n    <>\n      <div className={cx(styles.actionBar, 'page-action-bar')}>\n        <div className={cx(styles.inputWrapper, 'gf-form gf-form--grow m-r-2')}>\n          <Input\n            value={state.query ?? ''}\n            onChange={(e) => stateManager.onQueryChange(e.currentTarget.value)}\n            onKeyDown={onKeyDown}\n            autoFocus\n            spellCheck={false}\n            placeholder={state.includePanels ? 'Search for dashboards and panels' : 'Search for dashboards'}\n            className={styles.searchInput}\n            suffix={false ? <Spinner /> : null}\n          />\n        </div>\n        {viewActions && (\n          <DashboardActions\n            folderId={folderId}\n            canCreateFolders={canCreateFolders}\n            canCreateDashboards={canCreateDashboards}\n          />\n        )}\n      </div>\n\n      <SearchView\n        showManage={Boolean(isEditor || hasEditPermissionInFolders || canSave)}\n        folderDTO={folder}\n        hidePseudoFolders={true}\n        keyboardEvents={keyboardEvents}\n      />\n    </>\n  );\n});\n\nManageDashboardsNew.displayName = 'ManageDashboardsNew';\n\nexport default ManageDashboardsNew;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.down('sm')} {\n      flex-wrap: wrap;\n    }\n  `,\n  inputWrapper: css`\n    ${theme.breakpoints.down('sm')} {\n      margin-right: 0 !important;\n    }\n  `,\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, memo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { locationUtil, NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { FolderDTO } from 'app/types';\n\nimport { GrafanaRouteComponentProps } from '../../../core/navigation/types';\nimport { loadFolderPage } from '../loaders';\n\nimport ManageDashboardsNew from './ManageDashboardsNew';\n\nexport interface DashboardListPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<DashboardListPageRouteParams> {}\n\nexport const DashboardListPage: FC<Props> = memo(({ match, location }) => {\n  const { loading, value } = useAsync<() => Promise<{ folder?: FolderDTO; pageNav?: NavModelItem }>>(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({});\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.replace(path);\n      }\n\n      return { folder, pageNav: folderNav };\n    });\n  }, [match.params.uid]);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={value?.pageNav}>\n      <Page.Contents\n        isLoading={loading}\n        className={css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        `}\n      >\n        <ManageDashboardsNew folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nexport default DashboardListPage;\n","import { backendSrv } from 'app/core/services/backend_srv';\n\nimport { buildNavModel } from '../folders/state/navModel';\n\nexport const loadFolderPage = (uid: string) => {\n  return backendSrv.getFolderByUid(uid, { withAccessControl: true }).then((folder) => {\n    const navModel = buildNavModel(folder);\n    navModel.children![0].active = true;\n\n    return { folder, folderNav: navModel };\n  });\n};\n"],"names":["DashboardActions","folderId","canCreateFolders","canCreateDashboards","actionUrl","type","url","Dropdown","overlay","Menu","label","placement","Button","variant","Icon","name","ManageDashboardsNew","React","folder","styles","useStyles2","getStyles","stateManager","getSearchStateManager","state","useState","onKeyDown","keyboardEvents","useKeyNavigationListener","id","canSave","isEditor","contextSrv","hasEditPermissionInFolders","AccessControlAction","canCreateDashboardsFallback","viewActions","undefined","useEffect","initStateFromUrl","uid","className","cx","actionBar","inputWrapper","Input","I","value","query","onChange","e","onQueryChange","currentTarget","autoFocus","spellCheck","placeholder","includePanels","searchInput","suffix","SearchView","showManage","Boolean","folderDTO","hidePseudoFolders","displayName","theme","css","breakpoints","down","spacing","unsupported","noResults","v1","md","colors","bg2","DashboardListPage","memo","match","location","loading","useAsync","params","pathname","startsWith","backendSrv","withAccessControl","then","navModel","buildNavModel","children","active","folderNav","loadFolderPage","path","locationUtil","locationService","pageNav","Promise","resolve","Page","navId","isLoading"],"sourceRoot":""}