{"version":3,"file":"LibraryPanelsPage.051f77503ed3e8cad54b.js","mappings":"oNAQO,MAAMA,EAAoB,KAC/B,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,eAAwCC,GAExE,OACE,SAAC,IAAI,CAACC,MAAM,4BAA2B,UACrC,UAAC,aAAa,YACZ,SAAC,IAAmB,CAACC,QAASJ,EAAaK,sBAAoB,EAACC,UAAQ,EAACC,iBAAe,EAACC,kBAAgB,IACxGT,GAAW,SAAC,IAAqB,CAACU,UAAW,IAAMT,OAAYE,GAAYQ,aAAcX,IAAe,SAEtG,EAIX,G,wKCJO,SAASY,EAAsB,GAAsE,IAAtE,aAAED,EAAY,UAAED,GAAuC,EAC3F,MAAMG,GAASC,EAAAA,EAAAA,IAAWC,IACnBC,EAASC,IAAcf,EAAAA,EAAAA,WAAS,IAChCgB,EAAWC,IAAgBjB,EAAAA,EAAAA,UAAS,IACpCkB,EAAQC,IAAanB,EAAAA,EAAAA,eAA2DC,IACvFmB,EAAAA,EAAAA,YAAU,KACaC,WACnB,MAAMC,QAA4BC,EAAAA,EAAAA,IAAmCd,EAAae,KAClFP,EAAaK,EAAoBG,OAAO,EAE1CC,EAAc,GACb,CAACjB,EAAae,MACjB,MAAMG,GAAcC,EAAAA,EAAAA,cACjBC,GAgDLR,eAAgCG,EAAaK,EAAsBd,GACjEA,GAAW,GACX,MACMe,SADmBC,EAAAA,EAAAA,IAAuBP,IAE7CQ,QAAQC,GAAMA,EAAEC,MAAMC,cAAcC,SAASP,EAAaM,iBAC1DE,KAAKJ,IAAC,CAAQK,MAAOL,EAAEC,MAAOK,MAAON,MAGxC,OAFAlB,GAAW,GAEJe,CACT,CAzD8BU,CAAiB/B,EAAae,IAAKK,EAAcd,IAC3E,CAACN,EAAae,MAEViB,GAAuBC,EAAAA,EAAAA,UAAQ,IAAMC,IAAShB,EAAa,IAAK,CAAEiB,SAAS,KAAS,CAACjB,IAM3F,OACE,UAAC,IAAK,CAACO,MAAM,0BAA0B1B,UAAWA,EAAWqC,gBAAiBrC,EAAWsC,QAAM,aAC7F,iBAAKC,UAAWpC,EAAOqC,UAAU,UAChB,IAAdhC,EAAkB,IAAH,GACd,2GACE,KACHA,EAAY,GACX,iCACE,uDAC8B,KAC5B,8BACGA,EAAS,IAAGA,EAAY,EAAI,aAAe,eACrC,2DAGX,SAAC,KAAW,CACViC,aAAW,EACXC,UAAWpC,EACXqC,gBAAgB,EAChBxB,YAAac,EACbW,SAAUjC,EACVkC,YAAY,uCACZC,iBAAiB,2BAGnB,SAEN,UAAC,cAAe,YACd,SAAC,KAAM,CAACC,QAAQ,YAAYpD,QAASK,EAAWgD,KAAK,UAAS,qBAG9D,SAAC,KAAM,CAACrD,QApCOsD,IAAqC,MACxDA,EAAEC,iBACFC,EAAAA,GAAAA,KAAqBC,EAAAA,GAAAA,UAAmB,MAAK1C,SAAa,QAAP,EAANA,EAAQqB,aAAK,WAAP,EAAN,EAAef,MAAO,CAAC,GAAG,EAkCrCqC,UAAWC,QAAQ5C,GAAQ,SACtDA,EAAU,iBAAgBA,aAAM,EAANA,EAAQoB,WAAa,oCAK1D,CAaA,SAASzB,EAAUkD,GACjB,MAAO,CACLf,UAAWgB,EAAAA,GAAI,GAEnB,C","sources":["webpack://grafana/./public/app/features/library-panels/LibraryPanelsPage.tsx","webpack://grafana/./public/app/features/library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { LibraryPanelsSearch } from './components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { OpenLibraryPanelModal } from './components/OpenLibraryPanelModal/OpenLibraryPanelModal';\nimport { LibraryElementDTO } from './types';\n\nexport const LibraryPanelsPage = () => {\n  const [selected, setSelected] = useState<LibraryElementDTO | undefined>(undefined);\n\n  return (\n    <Page navId=\"dashboards/library-panels\">\n      <Page.Contents>\n        <LibraryPanelsSearch onClick={setSelected} showSecondaryActions showSort showPanelFilter showFolderFilter />\n        {selected ? <OpenLibraryPanelModal onDismiss={() => setSelected(undefined)} libraryPanel={selected} /> : null}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default LibraryPanelsPage;\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { MouseEvent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { AsyncSelect, Button, Modal, useStyles2 } from '@grafana/ui';\n\nimport { DashboardSearchItem } from '../../../search/types';\nimport { getConnectedDashboards, getLibraryPanelConnectedDashboards } from '../../state/api';\nimport { LibraryElementDTO } from '../../types';\n\nexport interface OpenLibraryPanelModalProps {\n  onDismiss: () => void;\n  libraryPanel: LibraryElementDTO;\n}\n\nexport function OpenLibraryPanelModal({ libraryPanel, onDismiss }: OpenLibraryPanelModalProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const [connected, setConnected] = useState(0);\n  const [option, setOption] = useState<SelectableValue<DashboardSearchItem> | undefined>(undefined);\n  useEffect(() => {\n    const getConnected = async () => {\n      const connectedDashboards = await getLibraryPanelConnectedDashboards(libraryPanel.uid);\n      setConnected(connectedDashboards.length);\n    };\n    getConnected();\n  }, [libraryPanel.uid]);\n  const loadOptions = useCallback(\n    (searchString: string) => loadOptionsAsync(libraryPanel.uid, searchString, setLoading),\n    [libraryPanel.uid]\n  );\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 300, { leading: true }), [loadOptions]);\n  const onViewPanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    locationService.push(urlUtil.renderUrl(`/d/${option?.value?.uid}`, {}));\n  };\n\n  return (\n    <Modal title=\"View panel in dashboard\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <div className={styles.container}>\n        {connected === 0 ? (\n          <span>Panel is not linked to a dashboard. Add the panel to a dashboard and retry.</span>\n        ) : null}\n        {connected > 0 ? (\n          <>\n            <p>\n              This panel is being used in{' '}\n              <strong>\n                {connected} {connected > 1 ? 'dashboards' : 'dashboard'}\n              </strong>\n              .Please choose which dashboard to view the panel in:\n            </p>\n            <AsyncSelect\n              isClearable\n              isLoading={loading}\n              defaultOptions={true}\n              loadOptions={debouncedLoadOptions}\n              onChange={setOption}\n              placeholder=\"Start typing to search for dashboard\"\n              noOptionsMessage=\"No dashboards found\"\n            />\n          </>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button onClick={onViewPanel} disabled={!Boolean(option)}>\n          {option ? `View panel in ${option?.label}...` : 'View panel in dashboard...'}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nasync function loadOptionsAsync(uid: string, searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n  const searchHits = await getConnectedDashboards(uid);\n  const options = searchHits\n    .filter((d) => d.title.toLowerCase().includes(searchString.toLowerCase()))\n    .map((d) => ({ label: d.title, value: d }));\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css``,\n  };\n}\n"],"names":["LibraryPanelsPage","selected","setSelected","useState","undefined","navId","onClick","showSecondaryActions","showSort","showPanelFilter","showFolderFilter","onDismiss","libraryPanel","OpenLibraryPanelModal","styles","useStyles2","getStyles","loading","setLoading","connected","setConnected","option","setOption","useEffect","async","connectedDashboards","getLibraryPanelConnectedDashboards","uid","length","getConnected","loadOptions","useCallback","searchString","options","getConnectedDashboards","filter","d","title","toLowerCase","includes","map","label","value","loadOptionsAsync","debouncedLoadOptions","useMemo","debounce","leading","onClickBackdrop","isOpen","className","container","isClearable","isLoading","defaultOptions","onChange","placeholder","noOptionsMessage","variant","fill","e","preventDefault","locationService","urlUtil","disabled","Boolean","theme","css"],"sourceRoot":""}