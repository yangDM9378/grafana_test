{"version":3,"file":"testDataDSPlugin.719b04b2a874b953aab4.js","mappings":"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KAAK2B,IAAC,CAAQjD,MAAOiD,EAAG3C,MAAO2C,MAEpBqI,GAAa,CACxB,MACA,MACA,OACAhK,KAAK2B,IAAC,CAAQjD,MAAOiD,EAAG3C,MAAO2C,MAEpBuI,GAAa,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACAlK,KAAK2B,IAAC,CAAQjD,MAAOiD,EAAG3C,MAAO2C,M,wFC/HjC,IAAIe,GAAQ,EAyBL,SAAS0H,KAEd,OADA1H,IAASA,GAAQ2H,KAAKC,MAAsB,EAAhBD,KAAKE,WAAiBC,GAAMjN,OACjDiN,GAAM9H,GACf,CAUA,MAAM8H,GAAQ,CACZ,KACA,OACA,MACA,KACA,YACA,KACA,QACA,OACA,cACA,UACA,MACA,aACA,cACA,aACA,WACA,QACA,WACA,OACA,UACA,KACA,OACA,YACA,YACA,OACA,YACA,aACA,MACA,YACA,YACA,OACA,KACA,QACA,MACA,UACA,WACA,WACA,QACA,KACA,MACA,UACA,KACA,UACA,OACA,KACA,QACA,SACA,QACA,UACA,MACA,KACA,WACA,aACA,MACA,SACA,UACA,MACA,SACA,QACA,MACA,WACA,QACA,SACA,QACA,UACA,MACA,QACA,KACA,OACA,SACA,UACA,SACA,WACA,QACA,WACA,YACA,MACA,QACA,QACA,cACA,aACA,QACA,YACA,KACA,MACA,WACA,UACA,MACA,QACA,iBACA,QACA,UACA,KACA,KACA,aACA,cACA,OACA,KACA,YACA,MACA,aACA,SACA,QACA,QACA,MACA,UACA,IACA,WACA,WACA,KACA,MACA,aACA,eACA,UACA,QACA,cACA,MACA,cACA,YACA,aACA,YC5IWC,GAAqC,CAChD1K,KAAM,SACN2K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I,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5G,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAA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I,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GACzG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACvG,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,KAAM,KACtG,KAAM,KAAM,KAAM,KAAM,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAC7G,KAAM,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAC1G,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1G,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAC7G,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IACzG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5G,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,KAAM,KAC1G,KAAM,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAC1G,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,IAEdrF,OAAQ,CACN8I,KAAM,UAGV,CACEtS,KAAM,QACN6O,OAAQ,CACN,QACA,uCACA,kCACA,2CACA,gCACA,qCACA,uCACA,0CACA,gDACA,iDACA,4CACA,6CACA,kBACA,yDACA,YACA,iBACA,iBACA,iBACA,qBACA,gCACA,YACA,iBACA,eACA,iDACA,+CACA,4BACA,iDACA,yCACA,0BACA,uBACA,2BACA,oBACA,mBACA,+BACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,0BACA,gCACA,oBACA,2CACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,sBACA,yBACA,gDACA,+CACA,oBACA,mBACA,+BACA,6BACA,2BACA,kCACA,0BACA,gCACA,2BACA,yBACA,oBACA,uBACA,oBACA,uBACA,mBACA,oBACA,iDACA,oBACA,mBACA,0BACA,6BACA,2BACA,gCACA,2BACA,yBACA,sBACA,+BACA,6BACA,oCACA,4BACA,0BACA,uBACA,oBACA,oBACA,mBACA,oBACA,mBACA,0BACA,+BACA,kBACA,oBACA,mBACA,0BACA,+BACA,6BACA,2BACA,kCACA,0BACA,mCACA,gCACA,qCACA,uCACA,0CACA,gDACA,4BACA,iDACA,4CACA,6CACA,iDACA,+CACA,yCACA,sCACA,YACA,iBACA,eACA,sCACA,sCACA,iBACA,iBACA,iBACA,iBACA,iBACA,qBACA,sCACA,eACA,qBACA,sCACA,eACA,sCACA,sCACA,2BACA,yBACA,qBACA,sBACA,2BACA,sBACA,qBACA,eACA,sCACA,kDACA,qCACA,wDACA,oBACA,kBACA,kBACA,0CACA,qCACA,+CACA,+CACA,mCACA,iCACA,4BACA,oBACA,qBACA,qCACA,4CACA,qCACA,8CACA,gDACA,2DACA,0DACA,2CACA,0CACA,sCACA,2CACA,4CACA,0CACA,oBACA,aACA,+BACA,sCACA,kBACA,6CACA,kBACA,8CACA,0CACA,kBACA,yCACA,2BACA,0CACA,2CACA,8CACA,0CACA,yBACA,mCACA,iCACA,8BACA,kDACA,iCACA,+CACA,iCACA,wEACA,iCACA,yDACA,iCACA,gEACA,yDACA,kEACA,6CACA,sDACA,4DACA,8DACA,qCACA,aACA,oDACA,2DACA,kEACA,+DACA,yEACA,+DACA,kBACA,gEACA,yEACA,oBACA,kBACA,mBACA,+BACA,yBACA,sBACA,+BACA,6BACA,6BACA,kCACA,8BACA,kCACA,iCACA,yCACA,oDACA,+CACA,kDACA,4BACA,oBACA,cACA,2CACA,+CACA,kBACA,qCACA,4BACA,2BACA,mBACA,0BACA,mBACA,mBACA,uBACA,uBACA,kBACA,sBACA,wBACA,uBACA,mBACA,8BACA,oBACA,mBACA,0BACA,0BACA,yCACA,oBACA,mBACA,mBACA,0BACA,8CACA,4BACA,oDACA,6BACA,cACA,YACA,2BACA,8BACA,oBACA,uBACA,0BACA,0BACA,qBACA,YACA,yBACA,cACA,oBACA,yCACA,+CACA,+CACA,sBACA,iDACA,yCACA,cACA,6CACA,kDACA,4BACA,+EACA,uFACA,8EACA,yDACA,gDACA,+BACA,2BACA,0BACA,0BACA,uBACA,8BACA,mBACA,0BACA,mBACA,mBACA,0BACA,4BACA,iCACA,mBACA,6BACA,2BACA,gCACA,2BACA,yBACA,sBACA,+BACA,6BACA,oCACA,4BACA,gDACA,oBACA,uBACA,mBACA,eACA,0BACA,0BACA,iDACA,oBACA,mBACA,0BACA,uBACA,oBACA,oBACA,mBACA,sBACA,+CACA,oBACA,mBACA,+BACA,6BACA,2BACA,gCACA,mBACA,oBACA,mBACA,uBACA,uBACA,kBACA,sBACA,wBACA,uBACA,sBACA,kBACA,eACA,+BACA,uCACA,mCACA,qCACA,iBACA,yBACA,oBACA,kBACA,qBACA,mDACA,4CACA,gEACA,mEACA,kEACA,6DACA,kEACA,gCACA,gCACA,2BACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,iBACA,gCACA,+BACA,iCACA,qCACA,+BACA,kEACA,gCACA,+BACA,iCACA,qCACA,+BACA,0DACA,qEACA,wEACA,0EACA,2BACA,0DACA,wBACA,8BACA,0CACA,uBACA,8BACA,mBACA,oBACA,eACA,eACA,kBACA,iCACA,iCACA,uBACA,mCACA,mCACA,2BACA,kCACA,+BACA,2CACA,wCACA,gCACA,qCACA,wCACA,uDACA,iDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,wBACA,wBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,8BACA,uCACA,2BACA,oCACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,oBACA,mBACA,+BACA,qCACA,0CACA,6BACA,qCACA,uCACA,kBACA,yCACA,oCACA,kBACA,mCACA,qDACA,+CACA,wCACA,gCACA,2BACA,oBACA,mBACA,+BACA,0BACA,gCACA,oBACA,oCACA,oBACA,mBACA,sCACA,+BACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,sBACA,qCACA,wCACA,uDACA,iDACA,iDACA,oBACA,mBACA,mBACA,4BACA,mBACA,0BACA,mBACA,mBACA,uBACA,uBACA,kBACA,sBACA,wBACA,uBACA,sBACA,kBACA,eACA,6BACA,cACA,2BACA,0BACA,0BACA,4BACA,8BACA,qBACA,sBACA,2BACA,sBACA,iBACA,oBACA,yCACA,qCACA,uCACA,kBACA,mBACA,uCACA,kBACA,mBACA,qCACA,wBACA,oBACA,uBACA,mBACA,0BACA,+BACA,0BACA,0BACA,mBACA,yBACA,oBACA,yBACA,iCACA,kBACA,qBACA,eACA,mBACA,mBACA,gBACA,mBACA,mBACA,gBACA,mBACA,mBACA,wBACA,uBACA,kBACA,eACA,yBACA,iCACA,oBACA,uBACA,mBACA,4BACA,oBACA,+CACA,mBACA,uBACA,yBACA,iCACA,8CACA,oBACA,mBACA,0BACA,kBACA,4BACA,2BACA,2BACA,cACA,gCACA,mBACA,0BACA,mBACA,mBACA,+BACA,0BACA,6BACA,cACA,sCACA,mBACA,wCACA,gCACA,qCACA,wCACA,uCACA,yCACA,uDACA,iDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,wBACA,wBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,+CACA,iDACA,4CACA,6CACA,wDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,wBACA,wBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,sBACA,gCACA,qCACA,wCACA,uDACA,iDACA,iDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,cACA,qBACA,qBACA,uBACA,wBACA,+CACA,8BACA,sBACA,uCACA,wBACA,oBACA,oBACA,mBACA,0BACA,mBACA,uBACA,yBACA,iCACA,kBACA,qBACA,eACA,oBACA,kBACA,qBACA,eACA,yBACA,iCACA,kCACA,8CACA,cACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,mBACA,uBACA,mBACA,mBACA,gBACA,gCACA,eACA,oCACA,mBACA,+BACA,oCACA,mDACA,qCACA,uBACA,2CACA,sBACA,6CACA,gBACA,uBACA,sBACA,yBACA,kBACA,eACA,qBACA,sBACA,kBACA,qBACA,eACA,mBACA,2CACA,4BACA,mBACA,mBACA,2CACA,2CACA,4BACA,wBACA,sBACA,8BACA,gCACA,gBACA,iBACA,qBACA,sBACA,gBACA,sBACA,2CACA,gBACA,uBACA,kCACA,wCACA,cACA,qBACA,qBACA,uBACA,wBACA,wBACA,kBACA,4BACA,uBACA,4BACA,mBACA,0BACA,mBACA,uBACA,cACA,qDACA,8CACA,yBACA,+CACA,yCACA,wCACA,gCACA,2BACA,oCACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,wBACA,qBACA,qBACA,oBACA,mBACA,+BACA,0BACA,oBACA,uBACA,yBACA,oBACA,kBACA,kCACA,8CACA,kCACA,2BACA,cACA,eACA,iBACA,mBACA,wCACA,YACA,4BACA,uBACA,6CACA,oBACA,UACA,cACA,eACA,iBACA,mBACA,mBACA,aACA,uBACA,sBACA,6BACA,uBACA,qBACA,cACA,oBACA,mBACA,6BACA,2BACA,gCACA,2BACA,yBACA,sBACA,+BACA,6BACA,oCACA,kBACA,4BACA,gBACA,kBACA,kBACA,eACA,eACA,kBACA,oBACA,YACA,iBACA,eACA,oCACA,UACA,iBACA,qBACA,oCACA,6BACA,2CACA,oCACA,oBACA,6EACA,oBACA,kBACA,gCACA,kEACA,uDACA,yDACA,eACA,yCACA,wCACA,8CACA,6BACA,6BACA,gCACA,oDACA,uCACA,mCACA,qCACA,iBACA,kBACA,qDACA,gEACA,qBACA,kBACA,gCACA,oBACA,uBACA,4DACA,uDACA,yCACA,wCACA,8CACA,6BACA,qCACA,wBACA,gCACA,sCACA,8BACA,kCACA,mBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,+BACA,sBACA,yBACA,sBACA,+BACA,kBACA,qBACA,0BACA,4BACA,sBACA,qBACA,wBACA,mBACA,kBACA,0BACA,qBACA,iBACA,oCACA,iBACA,4BACA,qBACA,0BACA,2BACA,qBACA,0BACA,wBACA,0BACA,wBACA,4BACA,kBACA,mBACA,+BACA,qBACA,4BACA,sBACA,4BACA,uBACA,sBACA,kCACA,mBACA,oCACA,oCACA,+BACA,mCACA,mBACA,eACA,kBACA,sBACA,wBACA,gBACA,kBACA,uBACA,uBACA,+BACA,mBACA,oBACA,eACA,eACA,kBACA,uCACA,kFACA,oBACA,mBACA,+BACA,kBACA,mBACA,oCACA,+BACA,kCACA,8BACA,mDACA,gBACA,iBACA,mBACA,uBACA,kBACA,oBACA,gBACA,oBACA,qBACA,gBACA,+BACA,sBACA,mBACA,sBACA,kBACA,gBACA,oBACA,yBACA,oBACA,eACA,gBACA,sBACA,mBACA,kBACA,qBACA,sBACA,uBACA,sBACA,qBACA,oCACA,4BACA,6BACA,kBACA,kBACA,gCACA,oBACA,mBACA,eACA,kBACA,sBACA,wBACA,gBACA,gBACA,iBACA,qBACA,sBACA,gBACA,wBACA,mCACA,oBACA,qBACA,4BACA,gBACA,kBACA,sBACA,0BACA,qCACA,iDACA,mDACA,sDACA,2EACA,0DACA,sDACA,sDACA,2DACA,qEACA,uEACA,0EACA,+DACA,oEACA,gCACA,qCACA,qCACA,oBACA,mBACA,6BACA,2BACA,gCACA,2BACA,4BACA,uCACA,mBACA,oBACA,uBACA,2BACA,yCACA,mBACA,oBACA,uBACA,sBACA,kBACA,eACA,gEACA,6DACA,kEACA,gEACA,yDACA,mBACA,oBACA,mBACA,eACA,2BACA,yBACA,qBACA,sBACA,2BACA,sBACA,qBACA,mEACA,qEACA,6DACA,sEACA,oBACA,mBACA,0BACA,8BACA,6CACA,kCACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,sBACA,wCACA,mBACA,oBACA,+B,gBC7xCD,MAAMqE,WAAgCC,GAAAA,GAC3CC,YAAYlT,GACV,MAAO,CACL8C,MAAO,mCACPqQ,YAAanT,EAAMA,MACnBgF,WAAY,kBACZoO,aAAS7M,EAEb,ECcK,MAAM8M,WAA2BC,GAAAA,GAGtC7B,YACE8B,GAEA,IADiBC,EAA2B,UAAH,8CAAGC,EAAAA,GAAAA,K,UAE5C/B,MAAM6B,G,OAAkB,G,EAAA,oB,EAAA,M,sFAAA,KAFPC,YAAAA,EAGjB9M,KAAKgN,UAAY,IAAIV,EACvB,CAEAhT,MAAMwC,GACJ,MAAMmR,EAAkC,GAClCC,EAAgD,GAGtD,IAAK,MAAM5R,KAAUQ,EAAQqR,QAC3B,IAAI7R,EAAO8R,KAMX,OAFApN,KAAKqN,yBAAyB/R,EAAQQ,EAAQwR,YAEtChS,EAAOgD,YACb,IAAK,OACH4O,EAAQ/T,KAAKoU,GAAoBjS,EAAQQ,IACzC,MACF,IAAK,mBACHoR,EAAQ/T,KAAK4N,GAAUzL,EAAQQ,IAC/B,MA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","sources":["webpack://grafana/./public/app/plugins/datasource/testdata/metricTree.ts","webpack://grafana/./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVContentEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVFileEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/constants.ts","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/ErrorEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RawFrameEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationSchemaForm.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/USAQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack://grafana/./public/app/plugins/datasource/testdata/runStreams.ts","webpack://grafana/./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/testData/serviceMapResponse.ts","webpack://grafana/./public/app/plugins/datasource/testdata/nodeGraphUtils.ts","webpack://grafana/./public/app/plugins/datasource/testdata/testData/flameGraphResponse.ts","webpack://grafana/./public/app/plugins/datasource/testdata/variables.ts","webpack://grafana/./public/app/plugins/datasource/testdata/datasource.ts","webpack://grafana/./public/app/plugins/datasource/testdata/module.tsx"],"sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../types';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  {\n    label: 'Drop (%)',\n    id: 'drop',\n    placeholder: '0',\n    min: 0,\n    max: 100,\n    step: 1,\n    tooltip: 'Exclude some percent (chance) points',\n  },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue' | 'drop';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder, tooltip }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector} tooltip={tooltip}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={(query as any)[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVContentEditor = ({ onChange, query }: EditorProps) => {\n  const onSaveCSV = (csvContent: string) => {\n    onChange({ ...query, csvContent });\n  };\n\n  return (\n    <CodeEditor\n      height={300}\n      language=\"csv\"\n      value={query.csvContent ?? ''}\n      onBlur={onSaveCSV}\n      onSave={onSaveCSV}\n      showMiniMap={false}\n      showLineNumbers={true}\n    />\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVFileEditor = ({ onChange, query }: EditorProps) => {\n  const onChangeFileName = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, csvFileName: value });\n  };\n\n  const files = [\n    'flight_info_by_state.csv',\n    'population_by_state.csv',\n    'gdp_per_capita.csv',\n    'js_libraries.csv',\n    'ohlc_dogecoin.csv',\n    'weight_height.csv',\n    'browser_marketshare.csv',\n  ].map((name) => ({ label: name, value: name }));\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"File\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChangeFileName}\n          placeholder=\"Select csv file\"\n          options={files}\n          value={files.find((f) => f.value === query.csvFileName)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import { CSVWave, TestDataQuery } from './types';\n\nexport const defaultPulseQuery: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWaveQuery: CSVWave[] = [\n  {\n    timeStep: 60,\n    valuesCSV: '0,0,2,2,1,1',\n  },\n];\n\nexport const defaultQuery: TestDataQuery = {\n  scenarioId: 'random_walk',\n  refId: '',\n};\n","import React, { PureComponent, useState } from 'react';\n\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { defaultCSVWaveQuery } from '../constants';\nimport type { CSVWave } from '../types';\n\ninterface WavesProps {\n  waves?: CSVWave[];\n  onChange: (waves: CSVWave[]) => void;\n}\n\ninterface WaveProps {\n  wave: CSVWave;\n  index: number;\n  last: boolean;\n  onChange: (index: number, wave?: CSVWave) => void;\n  onAdd: () => void;\n}\n\nconst CSVWaveEditor = (props: WaveProps) => {\n  const { wave, last, index, onAdd, onChange } = props;\n  const [valuesCSV, setValuesCSV] = useState(wave.valuesCSV || '');\n  const [labels, setLabels] = useState(wave.labels || '');\n  const [name, setName] = useState(wave.name || '');\n  const onAction = () => {\n    if (last) {\n      onAdd();\n    } else {\n      onChange(index, undefined);\n    }\n  };\n  const onValueChange = <K extends keyof CSVWave, V extends CSVWave[K]>(key: K, value: V) => {\n    onChange(index, { ...wave, [key]: value });\n  };\n  const onKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    if (evt.key === 'Enter') {\n      onValueChange('valuesCSV', valuesCSV);\n    }\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField\n        label={'Values'}\n        grow\n        tooltip=\"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\"\n      >\n        <Input\n          value={valuesCSV}\n          placeholder={'CSV values'}\n          onChange={(e) => setValuesCSV(e.currentTarget.value)}\n          autoFocus={true}\n          onBlur={() => onValueChange('valuesCSV', valuesCSV)}\n          onKeyDown={onKeyDown}\n        />\n      </InlineField>\n      <InlineField label={'Step'} tooltip=\"The number of seconds between datapoints.\">\n        <Input\n          value={wave.timeStep}\n          type=\"number\"\n          placeholder={'60'}\n          width={10}\n          onChange={(e) => onValueChange('timeStep', e.currentTarget.valueAsNumber)}\n        />\n      </InlineField>\n      <InlineField label={'Name'}>\n        <Input\n          value={name}\n          placeholder={'name'}\n          width={10}\n          onChange={(e) => setName(e.currentTarget.value)}\n          onBlur={() => onValueChange('name', name)}\n        />\n      </InlineField>\n      <InlineField label={'Labels'}>\n        <Input\n          value={labels}\n          placeholder={'labels'}\n          width={12}\n          onChange={(e) => setLabels(e.currentTarget.value)}\n          onBlur={() => onValueChange('labels', labels)}\n        />\n      </InlineField>\n      <Button icon={last ? 'plus' : 'minus'} variant=\"secondary\" onClick={onAction} />\n    </InlineFieldRow>\n  );\n};\n\nexport class CSVWavesEditor extends PureComponent<WavesProps> {\n  onChange = (index: number, wave?: CSVWave) => {\n    let waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    if (wave) {\n      waves[index] = { ...wave };\n    } else {\n      // remove the element\n      waves.splice(index, 1);\n    }\n    this.props.onChange(waves);\n  };\n\n  onAdd = () => {\n    const waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    waves.push({ ...defaultCSVWaveQuery[0] });\n    this.props.onChange(waves);\n  };\n\n  render() {\n    let waves = this.props.waves ?? defaultCSVWaveQuery;\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return (\n      <>\n        {waves.map((wave, index) => (\n          <CSVWaveEditor\n            key={`${index}/${wave.valuesCSV}`}\n            wave={wave}\n            index={index}\n            onAdd={this.onAdd}\n            onChange={this.onChange}\n            last={index === waves.length - 1}\n          />\n        ))}\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst ERROR_OPTIONS = [\n  {\n    label: 'Server panic',\n    value: 'server_panic',\n  },\n  {\n    label: 'Frontend exception',\n    value: 'frontend_exception',\n  },\n  {\n    label: 'Frontend observable',\n    value: 'frontend_observable',\n  },\n];\n\nconst FrontendErrorQueryEditor: React.FC<EditorProps> = ({ query, onChange }) => {\n  return (\n    <InlineFieldRow>\n      <InlineField labelWidth={14} label=\"Error type\">\n        <Select\n          options={ERROR_OPTIONS}\n          value={query.errorType}\n          onChange={(v) => {\n            onChange({ ...query, errorType: v.value });\n          }}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n\nexport default FrontendErrorQueryEditor;\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n  {\n    label: 'random-labeled-stream',\n    value: 'random-labeled-stream',\n    description: 'Value with moving labels',\n  },\n  {\n    label: 'random-20Hz-stream',\n    value: 'random-20Hz-stream',\n    description: 'Random stream with points in 20Hz',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find((f) => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\n\nimport { NodesQuery, TestDataQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestDataQuery;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {type === 'random' && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response'];\n","import React, { ChangeEvent } from 'react';\n\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { isArray } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { dataFrameToJSON, toDataFrame, toDataFrameDTO } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const RawFrameEditor = ({ onChange, query }: EditorProps) => {\n  const [error, setError] = useState<string>();\n  const [warning, setWarning] = useState<string>();\n\n  const onSaveFrames = (rawFrameContent: string) => {\n    try {\n      const json = JSON.parse(rawFrameContent);\n      if (isArray(json)) {\n        setError(undefined);\n        setWarning(undefined);\n        onChange({ ...query, rawFrameContent });\n        return;\n      }\n\n      let data: any = undefined;\n\n      // Copy paste from panel json\n      if (isArray(json.series) && json.state) {\n        data = json.series.map((v: any) => toDataFrameDTO(toDataFrame(v)));\n      } else {\n        // Chek if it is a copy of the raw resuls\n        const v = toDataQueryResponse({ data: json });\n        if (v.data?.length && !v.error) {\n          data = v.data.map((f) => dataFrameToJSON(f));\n        }\n      }\n\n      if (data) {\n        console.log('Original', json);\n        console.log('Save', data);\n        setError(undefined);\n        setWarning('Converted to direct frame result');\n        onChange({ ...query, rawFrameContent: JSON.stringify(data, null, 2) });\n        return;\n      }\n\n      setError('Unable to read dataframes in text');\n    } catch (e) {\n      console.log('Error parsing json', e);\n      setError('Enter JSON array of data frames (or raw query results body)');\n      setWarning(undefined);\n    }\n  };\n\n  return (\n    <>\n      {error && <Alert title={error} severity=\"error\" />}\n      {warning && <Alert title={warning} severity=\"warning\" />}\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={query.rawFrameContent ?? '[]'}\n        onBlur={onSaveFrames}\n        onSave={onSaveFrames}\n        showMiniMap={true}\n        showLineNumbers={true}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FormEvent, useState, ChangeEvent } from 'react';\n\nimport { DataFrameSchema, FieldSchema, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, TextArea, InlineField, Input, FieldSet, InlineSwitch } from '@grafana/ui';\n\ninterface SchemaFormProps {\n  config: Record<string, any>;\n  schema: DataFrameSchema;\n  onChange: (config: Record<string, any>) => void;\n}\n\nconst renderInput = (field: FieldSchema, onChange: SchemaFormProps['onChange'], config: SchemaFormProps['config']) => {\n  switch (field.type) {\n    case 'number':\n      return (\n        <Input\n          type=\"number\"\n          defaultValue={config?.[field.name]}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            const newValue = e.currentTarget.valueAsNumber;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n    case 'boolean':\n      return (\n        <InlineSwitch\n          value={config?.[field.name] ?? true}\n          onChange={() => {\n            onChange({ ...config, [field.name]: !config[field.name] });\n          }}\n        />\n      );\n    default:\n      return (\n        <Input\n          type=\"string\"\n          value={config?.[field.name]}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    jsonView: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const SimulationSchemaForm = ({ config, schema, onChange }: SchemaFormProps) => {\n  const [jsonView, setJsonView] = useState<boolean>(false);\n\n  const styles = useStyles2(getStyles);\n\n  const onUpdateTextArea = (event: FormEvent<HTMLTextAreaElement>) => {\n    const element = event.target as HTMLInputElement;\n    onChange(JSON.parse(element.value));\n  };\n\n  return (\n    <FieldSet label=\"Config\">\n      <InlineSwitch\n        className={styles.jsonView}\n        label=\"JSON View\"\n        showLabel\n        value={jsonView}\n        onChange={() => setJsonView(!jsonView)}\n      />\n      {jsonView ? (\n        <TextArea defaultValue={JSON.stringify(config, null, 2)} rows={7} onChange={onUpdateTextArea} />\n      ) : (\n        <>\n          {schema.fields.map((field) => (\n            <InlineField label={field.name} key={field.name} labelWidth={14}>\n              {renderInput(field, onChange, config)}\n            </InlineField>\n          ))}\n        </>\n      )}\n    </FieldSet>\n  );\n};\n","import React, { FormEvent, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrameJSON, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Label, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { SimulationQuery } from '../types';\n\nimport { SimulationSchemaForm } from './SimulationSchemaForm';\n\n// Type         string      `json:\"type\"`\n// Name         string      `json:\"name\"`\n// Description  string      `json:\"description\"`\n// OnlyForward  bool        `json:\"forward\"`\n// ConfigFields *data.Frame `json:\"config\"`\n\ninterface SimInfo {\n  type: string;\n  name: string;\n  description: string;\n  forward: boolean;\n  config: DataFrameJSON;\n}\n\nexport const SimulationQueryEditor = ({ onChange, query, ds }: EditorProps) => {\n  const simQuery = query.sim ?? ({} as SimulationQuery);\n  const simKey = simQuery.key ?? ({} as typeof simQuery.key);\n  // keep track of updated config state to pass down to form\n  const [cfgValue, setCfgValue] = useState<Record<string, any>>({});\n\n  // This only changes once\n  const info = useAsync(async () => {\n    const v = (await ds.getResource('sims')) as SimInfo[];\n    return {\n      sims: v,\n      options: v.map((s) => ({ label: s.name, value: s.type, description: s.description })),\n    };\n  }, [ds]);\n\n  const current = useMemo(() => {\n    const type = simKey.type;\n    if (!type || !info.value) {\n      return {};\n    }\n    return {\n      details: info.value.sims.find((v) => v.type === type),\n      option: info.value.options.find((v) => v.value === type),\n    };\n  }, [info.value, simKey?.type]);\n\n  let config = useAsync(async () => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    let config = (await ds.getResource('sim/' + path))?.config;\n    setCfgValue(config.value);\n    return config;\n  }, [simKey.type, simKey.tick, simKey.uid]);\n\n  const onUpdateKey = (key: typeof simQuery.key) => {\n    onChange({ ...query, sim: { ...simQuery, key } });\n  };\n\n  const onUIDChanged = (e: FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n    onUpdateKey({ ...simKey, uid: value ?? undefined });\n  };\n\n  const onTickChanged = (e: FormEvent<HTMLInputElement>) => {\n    const tick = e.currentTarget.valueAsNumber;\n    onUpdateKey({ ...simKey, tick });\n  };\n\n  const onTypeChange = (v: SelectableValue<string>) => {\n    onUpdateKey({ ...simKey, type: v.value! });\n  };\n\n  const onToggleStream = () => {\n    onChange({ ...query, sim: { ...simQuery, stream: !simQuery.stream } });\n  };\n\n  const onToggleLast = () => {\n    onChange({ ...query, sim: { ...simQuery, last: !simQuery.last } });\n  };\n\n  const onSchemaFormChange = (config: Record<string, any>) => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    ds.postResource('sim/' + path, config).then((res) => {\n      setCfgValue(res.config);\n    });\n  };\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Simulation\" tooltip=\"\">\n          <Select\n            isLoading={info.loading}\n            options={info.value?.options ?? []}\n            value={current.option}\n            onChange={onTypeChange}\n            width={32}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Stream\" tooltip=\"connect to the live channel\">\n          <InlineSwitch value={Boolean(simQuery.stream)} onChange={onToggleStream} />\n        </InlineField>\n\n        <InlineField label=\"Interval\" tooltip=\"the rate a simulation will spit out events\">\n          <Input\n            width={10}\n            type=\"number\"\n            value={simKey.tick}\n            onChange={onTickChanged}\n            min={1 / 10}\n            max={50}\n            suffix=\"hz\"\n          />\n        </InlineField>\n\n        <InlineField label=\"Last\" tooltip=\"Only return the last value\">\n          <Label>\n            <InlineSwitch value={Boolean(simQuery.last)} onChange={onToggleLast} />\n          </Label>\n        </InlineField>\n        <InlineField label=\"UID\" tooltip=\"A UID will allow multiple simulations to run at the same time\">\n          <Input type=\"text\" placeholder=\"optional\" value={simQuery.key.uid} onChange={onUIDChanged} />\n        </InlineField>\n      </InlineFieldRow>\n      <SimulationSchemaForm\n        onChange={onSchemaFormChange}\n        config={cfgValue ?? config.value}\n        schema={current.details?.config.schema ?? { fields: [] }}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFieldRow, InlineField, Select, MultiSelect, Input } from '@grafana/ui';\n\nimport { USAQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: USAQuery) => void;\n  query: USAQuery;\n}\n\nexport function USAQueryEditor({ query, onChange }: Props) {\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Mode\">\n          <Select\n            options={usaQueryModes}\n            onChange={(v) => {\n              onChange({ ...query, mode: v.value });\n            }}\n            width={32}\n            value={usaQueryModes.find((ep) => ep.value === query.mode)}\n          />\n        </InlineField>\n        <InlineField label=\"Period\">\n          <Input\n            value={query.period}\n            placeholder={'30m'}\n            onChange={(v) => {\n              onChange({ ...query, period: v.currentTarget.value });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Fields\">\n          <MultiSelect\n            options={fieldNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, fields: vals.map((v) => v.value) });\n            }}\n            width={32}\n            placeholder=\"all\"\n            value={query.fields}\n          />\n        </InlineField>\n        <InlineField label=\"States\" grow>\n          <MultiSelect\n            options={stateNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, states: vals.map((v) => v.value) });\n            }}\n            placeholder=\"all\"\n            value={query.states}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nexport const usaQueryModes = [\n  'values-as-rows',\n  'values-as-fields',\n  'values-as-labeled-fields',\n  'timeseries',\n  'timeseries-wide',\n].map((f) => ({ label: f, value: f }));\n\nexport const fieldNames = [\n  'foo',\n  'bar',\n  'baz', // all short\n].map((f) => ({ label: f, value: f }));\n\nexport const stateNames = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY',\n].map((f) => ({ label: f, value: f }));\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n  DataFrameSchema,\n  DataFrameData,\n} from '@grafana/data';\nimport { liveTimer } from 'app/features/dashboard/dashgrid/liveTimer';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\n\nimport { getRandomLine } from './LogIpsum';\nimport { TestDataQuery, StreamingQuery } from './types';\n\nexport const defaultStreamQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultStreamQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const schema: DataFrameSchema = {\n      refId: target.refId,\n      fields: [\n        { name: 'time', type: FieldType.time },\n        { name: target.alias ?? 'value', type: FieldType.number },\n      ],\n    };\n\n    const { spread, speed, bands = 0, noise } = query;\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      schema.fields.push({ name: 'Min' + suffix, type: FieldType.number });\n      schema.fields.push({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    const frame = StreamingDataFrame.fromDataFrameJSON({ schema }, { maxLength: maxDataPoints });\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n    let lastSent = -1;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      const data: DataFrameData = {\n        values: [[time], [value]],\n      };\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.values.push([min]);\n        data.values.push([max]);\n      }\n\n      const event = { data };\n      return frame.push(event);\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n\n      const elapsed = liveTimer.lastUpdate - lastSent;\n      if (elapsed > 1000 || liveTimer.ok) {\n        subscriber.next({\n          data: [frame],\n          key: streamId,\n          state: LoadingState.Streaming,\n        });\n        lastSent = liveTimer.lastUpdate;\n      }\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.fields[0].values.add(Date.now());\n      data.fields[1].values.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then((response) => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Select, TextArea } from '@grafana/ui';\n\nimport { RandomWalkEditor, StreamingClientEditor } from './components';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport ErrorEditor from './components/ErrorEditor';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { RawFrameEditor } from './components/RawFrameEditor';\nimport { SimulationQueryEditor } from './components/SimulationQueryEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { TestDataDataSource } from './datasource';\nimport { defaultStreamQuery } from './runStreams';\nimport { CSVWave, NodesQuery, TestDataQuery, USAQuery } from './types';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n  ds: TestDataDataSource;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === 'manual_entry' && (query as any).points) {\n      let csvContent = 'Time,Value\\n';\n      for (const point of (query as any).points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: 'csv_content',\n        csvContent,\n      });\n    }\n\n    const vals = await datasource.getScenarios();\n    const hideAlias = ['simulation'];\n    return vals.map((v) => ({\n      ...v,\n      hideAliasField: hideAlias.includes(v.id),\n    }));\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(\n    () => scenarioList?.find((scenario) => scenario.id === query.scenarioId),\n    [scenarioList, query]\n  );\n  const scenarioId = currentScenario?.id;\n  const description = currentScenario?.description;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    // Clear model from existing props that belong to other scenarios\n    const update: TestDataQuery = {\n      scenarioId: item.value!,\n      refId: query.refId,\n      alias: query.alias,\n      datasource: query.datasource,\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case 'grafana_api':\n        update.stringInput = 'datasources';\n        break;\n      case 'streaming_client':\n        update.stream = defaultStreamQuery;\n        break;\n      case 'live':\n        update.channel = 'random-2s-stream'; // default stream\n        break;\n      case 'simulation':\n        update.sim = { key: { type: 'flight', tick: 10 } }; // default stream\n        break;\n      case 'predictable_pulse':\n        update.pulseWave = defaultPulseQuery;\n        break;\n      case 'predictable_csv_wave':\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n      case 'usa':\n        update.usa = {\n          mode: usaQueryModes[0].value,\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = (e.target as HTMLInputElement).checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...(query as any)[field], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onUSAStatsChange = (usa?: USAQuery) => {\n    onUpdate({ ...query, usa });\n  };\n\n  const onCSVWaveChange = (csvWave?: CSVWave[]) => {\n    onUpdate({ ...query, csvWave });\n  };\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId ?? ''), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            inputId={`test-data-scenario-select-${query.refId}`}\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {Boolean(!currentScenario?.hideAliasField) && (\n          <InlineField label=\"Alias\" labelWidth={14}>\n            <Input\n              width={32}\n              id={`alias-${query.refId}`}\n              type=\"text\"\n              placeholder=\"optional\"\n              pattern='[^<>&\\\\\"]+'\n              name=\"alias\"\n              value={query.alias}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} ds={datasource} />}\n      {scenarioId === 'streaming_client' && (\n        <StreamingClientEditor onChange={onStreamClientChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'simulation' && <SimulationQueryEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'raw_frame' && <RawFrameEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_file' && <CSVFileEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_content' && <CSVContentEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'usa' && <USAQueryEditor onChange={onUSAStatsChange} query={query.usa ?? {}} />}\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && (\n        <PredictablePulseEditor onChange={onPulseWaveChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'predictable_csv_wave' && <CSVWavesEditor onChange={onCSVWaveChange} waves={query.csvWave} />}\n      {scenarioId === 'node_graph' && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n      {scenarioId === 'server_error_500' && <ErrorEditor onChange={onUpdate} query={query} ds={datasource} />}\n\n      {description && <p>{description}</p>}\n    </>\n  );\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\n\n// Types\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://github.com/grafana/grafana/tree/main/devenv\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </LinkButton>\n        <br />\n      </div>\n    );\n  }\n}\n","import { FieldColorModeId, FieldType, PreferredVisualisationType, NodeGraphDataFrameFieldNames } from '@grafana/data';\n\nexport const nodes = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\"))',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.title,\n      type: FieldType.string,\n      config: { displayName: 'Name' },\n      values: [\n        'auth',\n        'products',\n        'customers',\n        'orders',\n        'products',\n        'orders',\n        'api',\n        'shipping',\n        'orders',\n        'execute-api',\n        'shipping',\n        'www',\n        'api',\n        'www',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.subTitle,\n      type: FieldType.string,\n      config: { displayName: 'Type' },\n      values: [\n        'Compute',\n        'SQL',\n        'SQL',\n        'SQL',\n        'remote',\n        'Function',\n        'Compute',\n        'Function',\n        'Function',\n        'remote',\n        'Function',\n        'Compute',\n        'client',\n        'client',\n        'Compute',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.number,\n      config: { unit: 'ms/t', displayName: 'Average response time' },\n      values: [\n        3.5394042646735553, 15.906441318223264, 4.913011921591567, 7.4163203042094095, 1092, 22.85961441405067,\n        56.135855729084696, 4.45946191601527, 12.818300278280843, 4.25, 12.565442646791492, 77.63447512700567,\n        40.387096774193544, 77.63447512700567, 27.648950187374872,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 682.4, 512.8416666666667, 125.64444444444445, 0.005585812037424941, 137.59722222222223,\n        300.0527777777778, 30.582348853370394, 125.77222222222223, 0.028706417080318163, 30.582348853370394, 165.675,\n        0.100021510002151, 165.675, 162.33055555555555,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'success',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'green' }, displayName: 'Sucesss' },\n      values: [\n        0.9338865684765882, 1, 1, 1, 0.5, 1, 0.9901128505170387, 0.9069260134520997, 1, 0, 0.9069260134520997,\n        0.9624432037288534, 0, 0.9624432037288534, 0.9824945669843769,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'faults',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'red' }, displayName: 'Faults' },\n      values: [\n        0, 0, 0, 0, 0.5, 0, 0.009479813736472288, 0, 0, 0, 0, 0.017168821152524185, 0, 0.017168821152524185,\n        0.01750543301562313,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'errors',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'semi-dark-yellow' }, displayName: 'Errors' },\n      values: [\n        0.06611343152341174, 0, 0, 0, 0, 0, 0.0004073357464890436, 0.09307398654790038, 0, 1, 0.09307398654790038,\n        0.02038797511862247, 1, 0.02038797511862247, 0,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'throttled',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'purple' }, displayName: 'Throttled' },\n      values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'nodes',\n};\n\nexport const edges = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\")',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [\n        '0__2',\n        '5__8',\n        '6__0',\n        '6__5',\n        '6__9',\n        '6__2',\n        '6__14',\n        '6__4',\n        '8__3',\n        '10__7',\n        '11__0',\n        '11__6',\n        '12__6',\n        '13__11',\n        '14__1',\n        '14__2',\n        '14__10',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.source,\n      type: FieldType.string,\n      config: {},\n      values: [0, 5, 6, 6, 6, 6, 6, 6, 8, 10, 11, 11, 12, 13, 14, 14, 14],\n    },\n    {\n      name: 'sourceName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'auth',\n        'orders',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'orders',\n        'shipping',\n        'www',\n        'www',\n        'api',\n        'www',\n        'products',\n        'products',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.target,\n      type: FieldType.string,\n      config: {},\n      values: [2, 8, 0, 5, 9, 2, 14, 4, 3, 7, 0, 6, 6, 11, 1, 2, 10],\n    },\n    {\n      name: 'targetName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'customers',\n        'orders',\n        'auth',\n        'orders',\n        'execute-api',\n        'customers',\n        'products',\n        'products',\n        'orders',\n        'shipping',\n        'auth',\n        'api',\n        'api',\n        'www',\n        'products',\n        'customers',\n        'shipping',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.string,\n      config: { displayName: 'Response percentage' },\n      values: [\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Errors 100.00%',\n        'Success 100.00%',\n        'Faults 1.75%',\n        'Faults 50.00%',\n        'Success 100.00%',\n        'Errors 9.31%',\n        'Errors 6.62%',\n        'Faults 1.13%',\n        'Errors 100.00%',\n        'Faults 1.72%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Faults 9.30%',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 125.77222222222223, 0.03333333333333333, 137.59722222222223, 0.022222222222222223,\n        299.96666666666664, 162.33055555555555, 0.005555555555555556, 125.64444444444445, 30.582348853370394,\n        50.51111111111111, 299.9166666666667, 0.100021510002151, 165.675, 682.4, 162.33055555555555, 30.558333333333334,\n      ],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'edges',\n};\n","import {\n  ArrayVector,\n  FieldColorModeId,\n  FieldDTO,\n  FieldType,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames,\n} from '@grafana/data';\n\nimport { nodes, edges } from './testData/serviceMapResponse';\n\nexport function generateRandomNodes(count = 10) {\n  const nodes = [];\n\n  const root = {\n    id: '0',\n    title: 'root',\n    subTitle: 'client',\n    success: 1,\n    error: 0,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [] as any[],\n  };\n  nodes.push(root);\n  const nodesWithoutMaxEdges = [root];\n\n  const maxEdges = 3;\n\n  for (let i = 1; i < count; i++) {\n    const node = makeRandomNode(i);\n    nodes.push(node);\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodesWithoutMaxEdges.length - 1));\n    const source = nodesWithoutMaxEdges[sourceIndex];\n    source.edges.push(node.id);\n    if (source.edges.length >= maxEdges) {\n      nodesWithoutMaxEdges.splice(sourceIndex, 1);\n    }\n    nodesWithoutMaxEdges.push(node);\n  }\n\n  // Add some random edges to create possible cycle\n  const additionalEdges = Math.floor(count / 2);\n  for (let i = 0; i <= additionalEdges; i++) {\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    const targetIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    if (sourceIndex === targetIndex || nodes[sourceIndex].id === '0' || nodes[sourceIndex].id === '0') {\n      continue;\n    }\n\n    nodes[sourceIndex].edges.push(nodes[sourceIndex].id);\n  }\n\n  const nodeFields: Record<string, Omit<FieldDTO, 'name'> & { values: ArrayVector }> = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'test data link',\n            url: '',\n            internal: {\n              query: { scenarioId: 'logs', alias: 'from service graph', stringInput: 'tes' },\n              datasourceUid: 'gdev-testdata',\n              datasourceName: 'gdev-testdata',\n            },\n          },\n        ],\n      },\n    },\n    [NodeGraphDataFrameFieldNames.title]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.subTitle]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.mainStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Transactions per second' },\n    },\n    [NodeGraphDataFrameFieldNames.secondaryStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Average duration' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'success']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'green', mode: FieldColorModeId.Fixed }, displayName: 'Success' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'errors']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'red', mode: FieldColorModeId.Fixed }, displayName: 'Errors' },\n    },\n  };\n\n  const nodeFrame = new MutableDataFrame({\n    name: 'nodes',\n    fields: Object.keys(nodeFields).map((key) => ({\n      ...nodeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgeFields: any = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.source]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.target]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n  };\n\n  const edgesFrame = new MutableDataFrame({\n    name: 'edges',\n    fields: Object.keys(edgeFields).map((key) => ({\n      ...edgeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesSet = new Set();\n  for (const node of nodes) {\n    nodeFields.id.values.add(node.id);\n    nodeFields.title.values.add(node.title);\n    nodeFields[NodeGraphDataFrameFieldNames.subTitle].values.add(node.subTitle);\n    nodeFields[NodeGraphDataFrameFieldNames.mainStat].values.add(node.stat1);\n    nodeFields[NodeGraphDataFrameFieldNames.secondaryStat].values.add(node.stat2);\n    nodeFields.arc__success.values.add(node.success);\n    nodeFields.arc__errors.values.add(node.error);\n    for (const edge of node.edges) {\n      const id = `${node.id}--${edge}`;\n      // We can have duplicate edges when we added some more by random\n      if (edgesSet.has(id)) {\n        continue;\n      }\n      edgesSet.add(id);\n      edgeFields.id.values.add(`${node.id}--${edge}`);\n      edgeFields.source.values.add(node.id);\n      edgeFields.target.values.add(edge);\n    }\n  }\n\n  return [nodeFrame, edgesFrame];\n}\n\nfunction makeRandomNode(index: number) {\n  const success = Math.random();\n  const error = 1 - success;\n  return {\n    id: index.toString(),\n    title: `service:${index}`,\n    subTitle: 'service',\n    success,\n    error,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [],\n  };\n}\n\nexport function savedNodesResponse(): any {\n  return [new MutableDataFrame(nodes), new MutableDataFrame(edges)];\n}\n","import { DataFrameDTO } from '@grafana/data';\n\nexport const flameGraphData: DataFrameDTO = {\n  name: 'response',\n  refId: 'A',\n  // @ts-ignore\n  meta: { preferredVisualisationType: 'flamegraph' },\n  fields: [\n    {\n      name: 'level',\n      values: [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15, 16, 10, 11, 12, 13, 9, 10, 9, 9, 7, 7, 6, 5, 6, 7,\n        8, 8, 9, 10, 11, 12, 13, 8, 9, 10, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 11, 12,\n        13, 8, 8, 7, 8, 8, 7, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 8, 8, 7, 8, 6, 7, 8, 8, 7, 6, 7, 8,\n        8, 8, 9, 10, 11, 12, 4, 5, 6, 7, 8, 9, 9, 10, 11, 9, 10, 7, 4, 5, 6, 7, 8, 8, 7, 8, 9, 10, 11, 12, 13, 10, 10,\n        11, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 5, 6, 7, 6, 7, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 7, 8, 4, 5,\n        6, 5, 6, 5, 4, 5, 5, 3, 4, 5, 6, 7, 7, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\n        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 24, 25, 26, 24, 25, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n        32, 21, 22, 23, 24, 25, 26, 27, 26, 24, 25, 26, 25, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 25, 26,\n        27, 25, 26, 24, 23, 24, 24, 25, 23, 23, 22, 23, 24, 24, 23, 24, 25, 26, 24, 25, 23, 24, 24, 25, 23, 23, 24, 24,\n        23, 23, 23, 23, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 26, 27, 28, 25, 26, 27, 28, 29, 24, 22, 23, 24, 25,\n        26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 23, 24, 24, 24, 22, 23, 24, 25, 24, 23, 24, 24, 23, 22, 23, 24, 25,\n        25, 26, 27, 24, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 24, 21, 22, 23, 24, 25, 26, 27, 28, 21, 22, 19, 20,\n        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 24, 25, 26, 27, 28, 23, 24, 25, 26, 27, 28, 19, 20,\n        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 31, 30, 28, 29, 30, 31, 32, 33, 34,\n        35, 36, 37, 29, 30, 31, 26, 27, 28, 28, 28, 29, 27, 26, 27, 26, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 30,\n        31, 32, 33, 34, 33, 34, 35, 36, 37, 38, 39, 29, 30, 31, 32, 32, 27, 28, 28, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n        36, 37, 38, 39, 40, 27, 28, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 28, 27, 28, 28, 29, 27, 27, 28, 27, 27, 26,\n        27, 28, 28, 29, 29, 29, 26, 27, 27, 28, 29, 30, 29, 30, 30, 29, 30, 31, 28, 29, 30, 28, 28, 28, 28, 29, 30, 29,\n        30, 27, 28, 28, 26, 27, 26, 27, 27, 28, 29, 26, 27, 28, 29, 28, 27, 28, 29, 30, 30, 28, 29, 30, 31, 32, 32, 27,\n        28, 26, 25, 25, 26, 27, 28, 29, 30, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 31, 30, 31, 32, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 29, 26, 27, 28,\n        29, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 31, 30, 29, 29, 29, 25, 26, 27, 28, 26,\n        26, 27, 28, 27, 28, 28, 26, 27, 28, 28, 27, 28, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 25, 25, 26, 27, 28, 25,\n        26, 24, 25, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 34, 32, 33, 34, 34, 32, 28, 29, 30, 31, 27,\n        28, 29, 26, 27, 28, 29, 30, 31, 32, 33, 34, 26, 27, 28, 29, 24, 25, 26, 27, 28, 29, 30, 27, 28, 26, 27, 25, 26,\n        27, 28, 29, 26, 25, 26, 27, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 30, 31, 32, 26, 27,\n        28, 27, 28, 29, 25, 26, 27, 28, 29, 30, 31, 32, 28, 29, 28, 29, 28, 29, 27, 28, 29, 30, 31, 29, 30, 31, 32, 33,\n        34, 35, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 28, 29, 30, 31, 28, 29, 30, 31, 26, 25, 26, 27, 28, 29,\n        27, 28, 29, 30, 25, 26, 15, 14, 15, 16, 17, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 12, 13, 14, 15, 16, 17, 10,\n        11, 12, 13, 14, 12, 13, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9, 2, 3, 1, 2, 3, 4, 5, 6,\n        6, 6, 6, 7, 8, 8, 9, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9, 1, 2,\n        3, 4, 5, 6, 7, 8, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 1, 2, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 5,\n        5, 6, 7, 4, 5, 6, 4, 2, 3, 4, 3, 4, 5, 6, 5, 5, 6, 4, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\n        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n        23, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n        23, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,\n      ],\n    },\n    {\n      name: 'value',\n      values: [\n        16460000000, 4100000000, 4100000000, 3670000000, 1130000000, 1060000000, 1020000000, 150000000, 150000000,\n        50000000, 30000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 80000000, 40000000, 10000000, 10000000, 530000000, 80000000, 40000000, 70000000,\n        50000000, 50000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000,\n        390000000, 390000000, 180000000, 70000000, 50000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 10000000, 10000000, 10000000, 110000000, 80000000, 60000000,\n        10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        20000000, 10000000, 10000000, 30000000, 20000000, 40000000, 30000000, 20000000, 10000000, 10000000, 40000000,\n        40000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 210000000, 210000000, 210000000,\n        130000000, 130000000, 10000000, 50000000, 40000000, 40000000, 70000000, 10000000, 40000000, 1840000000,\n        240000000, 240000000, 50000000, 10000000, 10000000, 190000000, 130000000, 50000000, 20000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 80000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 60000000, 10000000, 1330000000, 1290000000, 320000000, 10000000,\n        10000000, 10000000, 130000000, 10000000, 10000000, 60000000, 30000000, 100000000, 40000000, 10000000, 10000000,\n        40000000, 30000000, 10000000, 10000000, 70000000, 10000000, 10000000, 50000000, 40000000, 10000000, 30000000,\n        20000000, 10000000, 430000000, 430000000, 430000000, 430000000, 10000000, 40000000, 20000000, 370000000,\n        20000000, 10000000, 180000000, 10000000, 30000000, 10000000, 10000000, 10000000, 5630000000, 5580000000,\n        5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5540000000, 5540000000,\n        5530000000, 5510000000, 5500000000, 5490000000, 5490000000, 1610000000, 1610000000, 1540000000, 1540000000,\n        190000000, 170000000, 170000000, 10000000, 20000000, 120000000, 10000000, 10000000, 20000000, 20000000,\n        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 850000000, 350000000, 300000000, 120000000, 110000000, 80000000, 20000000, 10000000, 80000000,\n        40000000, 20000000, 10000000, 10000000, 50000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000,\n        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 370000000, 40000000, 20000000, 10000000, 100000000,\n        10000000, 10000000, 10000000, 30000000, 30000000, 80000000, 20000000, 10000000, 10000000, 10000000, 40000000,\n        10000000, 10000000, 10000000, 20000000, 10000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 110000000, 110000000, 60000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 480000000, 150000000, 10000000, 130000000, 10000000, 10000000,\n        50000000, 140000000, 80000000, 40000000, 10000000, 10000000, 20000000, 10000000, 10000000, 20000000, 120000000,\n        60000000, 40000000, 10000000, 10000000, 10000000, 10000000, 20000000, 30000000, 30000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 60000000, 60000000, 60000000, 60000000,\n        30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 30000000, 30000000, 30000000, 30000000,\n        30000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 3880000000, 3880000000, 3880000000,\n        3880000000, 3870000000, 3230000000, 3230000000, 3210000000, 320000000, 70000000, 70000000, 40000000, 40000000,\n        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000,\n        30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000,\n        20000000, 20000000, 70000000, 60000000, 20000000, 30000000, 10000000, 10000000, 10000000, 100000000, 20000000,\n        50000000, 1850000000, 410000000, 110000000, 110000000, 90000000, 60000000, 60000000, 40000000, 20000000,\n        20000000, 20000000, 30000000, 30000000, 30000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 30000000, 20000000, 10000000,\n        40000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 40000000, 10000000, 80000000, 30000000, 30000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 60000000, 30000000, 30000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 160000000, 120000000, 20000000, 100000000, 50000000, 10000000, 10000000,\n        640000000, 10000000, 550000000, 410000000, 80000000, 60000000, 260000000, 20000000, 170000000, 60000000,\n        30000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 20000000, 50000000, 40000000, 10000000,\n        10000000, 10000000, 70000000, 30000000, 40000000, 290000000, 90000000, 30000000, 10000000, 10000000, 10000000,\n        10000000, 210000000, 20000000, 10000000, 10000000, 10000000, 120000000, 90000000, 90000000, 60000000, 10000000,\n        30000000, 30000000, 30000000, 30000000, 10000000, 20000000, 50000000, 10000000, 10000000, 10000000, 280000000,\n        150000000, 150000000, 150000000, 60000000, 30000000, 80000000, 50000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 130000000, 130000000, 130000000, 70000000, 30000000, 30000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 40000000, 10000000, 590000000, 20000000,\n        20000000, 10000000, 40000000, 150000000, 30000000, 30000000, 120000000, 10000000, 80000000, 370000000,\n        260000000, 40000000, 150000000, 110000000, 90000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 70000000, 60000000,\n        20000000, 20000000, 640000000, 640000000, 250000000, 250000000, 230000000, 180000000, 170000000, 170000000,\n        170000000, 170000000, 50000000, 10000000, 40000000, 10000000, 10000000, 60000000, 60000000, 10000000, 30000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 50000000, 50000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 390000000,\n        60000000, 40000000, 30000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 30000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 90000000, 10000000, 10000000, 60000000, 10000000, 40000000,\n        40000000, 40000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        180000000, 170000000, 50000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 30000000, 30000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 90000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 70000000, 70000000,\n        70000000, 70000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 10000000, 40000000, 40000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000, 10000000, 6190000000, 6170000000,\n        6170000000, 6070000000, 4460000000, 10000000, 50000000, 440000000, 540000000, 20000000, 10000000, 10000000,\n        10000000, 980000000, 10000000, 50000000, 480000000, 540000000, 50000000, 210000000, 30000000, 30000000,\n        60000000, 180000000, 10000000, 210000000, 20000000, 20000000, 20000000, 100000000, 20000000, 20000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 40000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 170000000, 160000000, 70000000, 30000000,\n        10000000, 40000000, 10000000, 170000000, 90000000, 90000000, 70000000, 20000000, 10000000, 30000000, 30000000,\n        30000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 80000000,\n        10000000, 10000000, 70000000, 60000000, 10000000, 10000000, 20000000, 20000000, 20000000, 10000000, 80000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 50000000, 50000000, 50000000, 50000000, 50000000,\n        50000000, 50000000, 10000000, 10000000, 10000000, 60000000, 60000000, 60000000, 60000000, 60000000, 60000000,\n        60000000, 40000000, 40000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000,\n      ],\n      config: {\n        unit: 'short',\n      },\n    },\n    {\n      name: 'self',\n      values: [\n        16460, 4100, 4100, 3670, 1130, 1060, 1020, 150, 150, 50, 30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 80,\n        40, 10, 10, 530, 80, 40, 70, 50, 50, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n        10, 390, 390, 180, 70, 50, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 20, 10, 10, 10, 110, 80, 60, 10, 20, 20, 20,\n        10, 10, 10, 10, 10, 10, 10, 20, 10, 10, 30, 20, 40, 30, 20, 10, 10, 40, 40, 10, 10, 10, 10, 10, 10, 10, 210,\n        210, 210, 130, 130, 10, 50, 40, 40, 70, 10, 40, 1840, 240, 240, 50, 10, 10, 190, 130, 50, 20, 10, 10, 10, 10,\n        10, 10, 80, 20, 10, 10, 10, 10, 10, 10, 10, 10, 60, 10, 1330, 1290, 320, 10, 10, 10, 130, 10, 10, 60, 30, 100,\n        40, 10, 10, 40, 30, 10, 10, 70, 10, 10, 50, 40, 10, 30, 20, 10, 430, 430, 430, 430, 10, 40, 20, 370, 20, 10,\n        180, 10, 30, 10, 10, 10, 5630, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5540, 5540, 5530, 5510, 5500,\n        5490, 5490, 1610, 1610, 1540, 1540, 190, 170, 170, 10, 20, 120, 10, 10, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 850, 350, 300, 120, 110, 80, 20, 10, 80, 40, 20, 10, 10, 50, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 20, 20, 20, 20, 10, 10, 10, 10, 10, 370, 40, 20, 10, 100, 10, 10, 10, 30, 30, 80, 20, 10,\n        10, 10, 40, 10, 10, 10, 20, 10, 20, 10, 10, 10, 10, 10, 10, 10, 110, 110, 60, 20, 20, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 480, 150, 10, 130, 10, 10, 50, 140, 80, 40, 10, 10, 20,\n        10, 10, 20, 120, 60, 40, 10, 10, 10, 10, 20, 30, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 60, 60, 60, 60, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 30,\n        30, 30, 30, 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3880, 3880, 3880, 3880,\n        3870, 3230, 3230, 3210, 320, 70, 70, 40, 40, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 20, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 70, 60, 20, 30, 10, 10, 10, 100, 20, 50,\n        1850, 410, 110, 110, 90, 60, 60, 40, 20, 20, 20, 30, 30, 30, 10, 10, 20, 20, 20, 20, 20, 20, 10, 20, 20, 20, 10,\n        10, 30, 20, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 80, 30, 30, 10, 10, 10, 10, 10,\n        10, 10, 20, 60, 30, 30, 10, 10, 10, 10, 10, 10, 160, 120, 20, 100, 50, 10, 10, 640, 10, 550, 410, 80, 60, 260,\n        20, 170, 60, 30, 20, 20, 20, 10, 10, 10, 20, 50, 40, 10, 10, 10, 70, 30, 40, 290, 90, 30, 10, 10, 10, 10, 210,\n        20, 10, 10, 10, 120, 90, 90, 60, 10, 30, 30, 30, 30, 10, 20, 50, 10, 10, 10, 280, 150, 150, 150, 60, 30, 80, 50,\n        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 130, 130, 130, 70, 30, 30, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 590, 20, 20, 10, 40, 150, 30, 30, 120, 10, 80, 370, 260, 40,\n        150, 110, 90, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 70, 60, 20, 20, 640, 640, 250, 250,\n        230, 180, 170, 170, 170, 170, 50, 10, 40, 10, 10, 60, 60, 10, 30, 10, 10, 10, 10, 10, 50, 50, 20, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 390, 60, 40, 30, 20, 20, 10, 10, 10, 10, 10, 30, 10, 10, 10, 10, 10, 90,\n        10, 10, 60, 10, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30, 30, 10, 10, 10, 10, 10, 10, 20, 10, 10, 10, 10, 10, 180,\n        170, 50, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 30, 30, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 90, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 70, 70, 70, 70, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 10, 10, 10, 10,\n        10, 20, 20, 20, 20, 20, 10, 40, 40, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30, 30, 10, 10, 6190, 6170, 6170, 6070,\n        4460, 10, 50, 440, 540, 20, 10, 10, 10, 980, 10, 50, 480, 540, 50, 210, 30, 30, 60, 180, 10, 210, 20, 20, 20,\n        100, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20,\n        10, 10, 10, 10, 10, 170, 160, 70, 30, 10, 40, 10, 170, 90, 90, 70, 20, 10, 30, 30, 30, 30, 10, 10, 10, 10, 10,\n        10, 10, 10, 80, 10, 10, 70, 60, 10, 10, 20, 20, 20, 10, 80, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20,\n        20, 20, 20, 20, 50, 50, 50, 50, 50, 50, 50, 10, 10, 10, 60, 60, 60, 60, 60, 60, 60, 40, 40, 30, 30, 30, 30, 30,\n        30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10,\n      ],\n      config: {\n        unit: 'short',\n      },\n    },\n    {\n      name: 'label',\n      values: [\n        'total',\n        'test/pkg/agent.(*Target).start.func1',\n        'test/pkg/agent.(*Target).scrape',\n        'test/pkg/distributor.(*Distributor).Push',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).deflate',\n        'compress/flate.(*compressor).writeBlock',\n        'compress/flate.(*huffmanBitWriter).writeBlock',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanEncoder).generate',\n        'compress/flate.(*huffmanEncoder).bitCounts',\n        'runtime.memmove',\n        'compress/flate.(*huffmanEncoder).assignEncodingAndSize',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.insertionSort',\n        'compress/flate.(*byFreq).sort',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.doPivot',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'compress/flate.offsetCode',\n        'compress/flate.(*huffmanBitWriter).dynamicSize',\n        'compress/flate.(*compressor).findMatch',\n        'compress/flate.matchLen',\n        'compress/flate.hash4',\n        'compress/flate.NewWriter',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.heapBitsSetType',\n        'runtime.heapBitsSetTypeGCProg',\n        'runtime.runGCProg',\n        'compress/flate.(*compressor).initDeflate',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.pageIndexOf',\n        'test/pkg/pprof.OpenRaw',\n        'test/pkg/gen/google/v1.(*Profile).UnmarshalVT',\n        'test/pkg/gen/google/v1.(*Sample).UnmarshalVT',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).uncacheSpan',\n        'runtime.(*spanSet).push',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.getMCache',\n        'runtime.nextFreeFast',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.growslice',\n        'test/pkg/gen/google/v1.(*Location).UnmarshalVT',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsForAddr',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*mheap).allocMSpanLocked',\n        'runtime.(*fixalloc).alloc',\n        'runtime.heapBitsSetType',\n        'runtime.nextFreeFast',\n        'runtime.getMCache',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memclrNoHeapPointers',\n        'runtime.memmove',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memclrNoHeapPointers',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).uncacheSpan',\n        'runtime.(*spanSet).push',\n        'runtime.(*headTailIndex).incTail',\n        'compress/gzip.(*Writer).Close',\n        'compress/flate.(*compressor).close',\n        'compress/flate.(*compressor).deflate',\n        'compress/flate.(*compressor).writeBlock',\n        'compress/flate.(*huffmanBitWriter).writeBlock',\n        'compress/flate.offsetCode',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanEncoder).generate',\n        'compress/flate.(*huffmanEncoder).bitCounts',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'compress/flate.(*compressor).findMatch',\n        'test/pkg/pprof.(*Profile).Normalize',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.doPivot',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'test/pkg/pprof.(*sortedSample).Swap',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.insertionSort',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'sort.doPivot',\n        'sort.insertionSort',\n        'test/pkg/pprof.(*sortedSample).Swap',\n        'sort.doPivot',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'test/pkg/pprof.(*sortedSample).Swap',\n        'runtime.gcWriteBarrierR8',\n        'runtime.gcWriteBarrier',\n        'runtime.wbBufFlush',\n        'runtime.systemstack',\n        'runtime.wbBufFlush.func1',\n        'runtime.wbBufFlush1',\n        'runtime.findObject',\n        'sort.doPivot',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'test/pkg/pprof.(*Profile).clearSampleReferences',\n        'test/pkg/slices.RemoveInPlace[...]',\n        'test/pkg/pprof.(*Profile).clearSampleReferences.func1',\n        'runtime.growslice',\n        'runtime.memmove',\n        'runtime.memmove',\n        'test/pkg/pprof.StacktracesHasher.Hashes',\n        'github.com/cespare/xxhash/v2.round',\n        'github.com/cespare/xxhash/v2.(*Digest).Sum64',\n        'github.com/cespare/xxhash/v2.(*Digest).Write',\n        'github.com/cespare/xxhash/v2.u64',\n        'github.com/samber/lo.Uniq[...]',\n        'runtime.mapaccess2_fast64',\n        'runtime.memhash64',\n        'runtime.bucketMask',\n        'test/pkg/slices.RemoveInPlace[...]',\n        'test/pkg/pprof.(*Profile).Normalize.func1',\n        'test/pkg/slices.RemoveInPlace[...]',\n        'test/pkg/pprof.(*Profile).Normalize.func1.1',\n        'test/pkg/gen/google/v1.(*Profile).MarshalToVT',\n        'test/pkg/gen/google/v1.(*Profile).MarshalToSizedBufferVT',\n        'test/pkg/gen/google/v1.(*Sample).MarshalToSizedBufferVT',\n        'test/pkg/gen/google/v1.(*Profile).SizeVT',\n        'test/pkg/gen/google/v1.(*Sample).SizeVT',\n        'test/pkg/gen/google/v1.encodeVarint',\n        'test/pkg/gen/google/v1.(*Profile).SizeVT',\n        'test/pkg/gen/google/v1.(*Location).SizeVT',\n        'test/pkg/gen/google/v1.(*Sample).SizeVT',\n        'io/ioutil.ReadAll',\n        'io.ReadAll',\n        'compress/gzip.(*Reader).Read',\n        'compress/flate.(*decompressor).Read',\n        'runtime.memmove',\n        'compress/flate.(*dictDecoder).tryWriteCopy',\n        'runtime.memmove',\n        'compress/flate.(*decompressor).huffmanBlock',\n        'compress/flate.(*dictDecoder).writeCopy',\n        'runtime.memmove',\n        'compress/flate.(*decompressor).huffSym',\n        'bytes.(*Reader).ReadByte',\n        'compress/flate.(*decompressor).moreBits',\n        'compress/flate.(*decompressor).nextBlock',\n        'compress/flate.(*decompressor).huffmanBlock',\n        'compress/flate.(*decompressor).moreBits',\n        'net/http.(*conn).serve',\n        'net/http.serverHandler.ServeHTTP',\n        'net/http.HandlerFunc.ServeHTTP',\n        'test/pkg/util.glob..func1.1',\n        'golang.org/x/net/http2/h2c.h2cHandler.ServeHTTP',\n        'net/http.HandlerFunc.ServeHTTP',\n        'test/pkg/create.(*create).initServer.func2.1',\n        'net/http.HandlerFunc.ServeHTTP',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.MiddlewareFunc.func5',\n        'net/http.HandlerFunc.ServeHTTP',\n        'github.com/weaveworks/common/middleware.Log.Wrap.func1',\n        'net/http.HandlerFunc.ServeHTTP',\n        'github.com/weaveworks/common/middleware.Instrument.Wrap.func1',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics',\n        'github.com/weaveworks/common/middleware.Instrument.Wrap.func1.2',\n        'github.com/gorilla/mux.(*Router).ServeHTTP',\n        'github.com/bufbuild/connect-go.(*Handler).ServeHTTP',\n        'github.com/bufbuild/connect-go.NewUnaryHandler[...].func1',\n        'github.com/bufbuild/connect-go.NewUnaryHandler[...].func1.1',\n        'test/pkg/ingester.(*Ingester).Push',\n        'io.ReadAll',\n        'github.com/klauspost/compress/gzip.(*Reader).Read',\n        'github.com/klauspost/compress/flate.(*decompressor).Read',\n        'github.com/klauspost/compress/flate.(*dictDecoder).tryWriteCopy',\n        'github.com/klauspost/compress/flate.(*dictDecoder).writeByte',\n        'github.com/klauspost/compress/flate.(*decompressor).huffmanBytesReader',\n        'github.com/klauspost/compress/flate.(*dictDecoder).writeCopy',\n        'runtime.memmove',\n        'github.com/klauspost/compress/flate.(*decompressor).nextBlock',\n        'github.com/klauspost/compress/flate.(*decompressor).huffmanBytesReader',\n        'runtime.growslice',\n        'runtime.memmove',\n        'runtime.mallocgc',\n        'runtime.(*mcache).allocLarge',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*pageAlloc).alloc',\n        'runtime.(*pageAlloc).allocRange',\n        'runtime.(*pageAlloc).update',\n        'runtime.(*pallocBits).summarize',\n        'test/pkg/create.(*Head).Ingest',\n        'test/pkg/create.(*Head).convertSamples',\n        'test/pkg/create.(*deduplicatingSlice[...]).ingest',\n        'test/pkg/create.(*stacktracesHelper).rewrite',\n        'test/pkg/create.idConversionTable.rewriteUint64',\n        'runtime.mapaccess2_fast64',\n        'runtime.memhash64',\n        'runtime.add',\n        'test/pkg/create.(*stacktracesHelper).key',\n        'github.com/cespare/xxhash/v2.(*Digest).Write',\n        'runtime.memmove',\n        'github.com/cespare/xxhash/v2.round',\n        'runtime.mapaccess2_fast64',\n        'runtime.mapassign_fast64',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.profilealloc',\n        'runtime.mProf_Malloc',\n        'runtime.callers',\n        'runtime.systemstack',\n        'runtime.callers.func1',\n        'runtime.gentraceback',\n        'runtime.findfunc',\n        'runtime.(*hmap).newoverflow',\n        'runtime.growslice',\n        'runtime.releasem',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'encoding/binary.littleEndian.PutUint64',\n        'runtime.newobject',\n        'runtime.acquirem',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'test/pkg/create.(*labelCache).rewriteLabels',\n        'runtime.mapaccess1_fast64',\n        'test/pkg/create.(*deduplicatingSlice[...]).ingest',\n        'runtime.mapaccess2_faststr',\n        'aeshashbody',\n        'memeqbody',\n        'runtime.mapassign_fast64',\n        'runtime.(*hmap).newoverflow',\n        'runtime.growslice',\n        'runtime.nextFreeFast',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'runtime.mapaccess2',\n        'memeqbody',\n        'runtime.memhash_varlen',\n        'aeshashbody',\n        'runtime.evacuated',\n        'test/pkg/create.(*locationsHelper).key',\n        'github.com/cespare/xxhash/v2.(*Digest).Sum64',\n        'github.com/cespare/xxhash/v2.(*Digest).Write',\n        'runtime.bucketShift',\n        'test/pkg/create.(*stringsHelper).addToRewriter',\n        'encoding/binary.littleEndian.PutUint64',\n        'runtime.add',\n        'test/pkg/create.(*locationsHelper).rewrite',\n        'test/pkg/create.idConversionTable.rewriteUint64',\n        'runtime.mapaccess2_fast64',\n        'github.com/prometheus/client_golang/prometheus.(*CounterVec).WithLabelValues',\n        'github.com/prometheus/client_golang/prometheus.(*MetricVec).GetMetricWithLabelValues',\n        'github.com/prometheus/client_golang/prometheus.(*MetricVec).hashLabelValues',\n        'github.com/prometheus/client_golang/prometheus.hashAdd',\n        'test/pkg/create.(*deltaProfiles).computeDelta',\n        'test/pkg/create.deltaSamples',\n        'runtime.mapassign_fast64',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'runtime.typedmemmove',\n        'runtime.bulkBarrierPreWrite',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.mapaccess2_fast64',\n        'test/pkg/create.copySlice[...]',\n        'runtime.mallocgc',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*mheap).allocMSpanLocked',\n        'runtime.(*fixalloc).alloc',\n        'test/pkg/gen/google/v1.(*Profile).UnmarshalVT',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.add1',\n        'runtime.heapBitsForAddr',\n        'runtime.heapBitsSetType',\n        'test/pkg/gen/google/v1.(*Location).UnmarshalVT',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.nextFreeFast',\n        'runtime.newobject',\n        'runtime.getMCache',\n        'runtime.mallocgc',\n        'runtime.roundupsize',\n        'test/pkg/gen/google/v1.(*Sample).UnmarshalVT',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.acquirem',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.profilealloc',\n        'runtime.mProf_Malloc',\n        'runtime.callers',\n        'runtime.systemstack',\n        'runtime.callers.func1',\n        'runtime.gentraceback',\n        'runtime.pcdatavalue',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.memclrNoHeapPointers',\n        'github.com/go-kit/log.(*context).Log',\n        'github.com/go-kit/log.bindValues',\n        'github.com/go-kit/log.Caller.func1',\n        'runtime.Caller',\n        'runtime.(*Frames).Next',\n        'runtime.funcline1',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'test/pkg/gen/google/v1.(*Profile).ReturnToVTPool',\n        'test/pkg/gen/google/v1.(*Profile).ResetVT',\n        'github.com/bufbuild/connect-go.(*errorTranslatingSender).Send',\n        'github.com/bufbuild/connect-go.(*connectUnaryHandlerSender).Send',\n        'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).Marshal',\n        'github.com/bufbuild/connect-go.(*compressionPool).Compress',\n        'github.com/bufbuild/connect-go.(*compressionPool).putCompressor',\n        'compress/gzip.(*Writer).Close',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.NewWriter',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.spanOf',\n        'compress/gzip.(*Writer).Reset',\n        'compress/gzip.(*Writer).init',\n        'compress/flate.(*Writer).Reset',\n        'compress/flate.(*compressor).reset',\n        'runtime.memclrNoHeapPointers',\n        'github.com/bufbuild/connect-go.(*compressionPool).getCompressor',\n        'compress/gzip.(*Writer).Reset',\n        'compress/gzip.(*Writer).init',\n        'compress/flate.(*Writer).Reset',\n        'compress/flate.(*compressor).reset',\n        'runtime.memclrNoHeapPointers',\n        'github.com/bufbuild/connect-go.receiveUnaryRequest[...]',\n        'github.com/bufbuild/connect-go.(*errorTranslatingReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryHandlerReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryUnmarshaler).UnmarshalFunc',\n        'bytes.(*Buffer).ReadFrom',\n        'github.com/weaveworks/common/middleware.(*reqBody).Read',\n        'net/http.(*body).Read',\n        'net/http.(*body).readLocked',\n        'net/http/internal.(*chunkedReader).Read',\n        'bufio.(*Reader).Read',\n        'net/http.(*connReader).Read',\n        'net.(*conn).Read',\n        'net.(*netFD).Read',\n        'syscall.Read',\n        'syscall.read',\n        'syscall.Syscall',\n        'net/http.(*ServeMux).ServeHTTP',\n        'net/http.HandlerFunc.ServeHTTP',\n        'net/http/pprof.Index',\n        'net/http/pprof.handler.ServeHTTP',\n        'runtime/pprof.(*Profile).WriteTo',\n        'runtime/pprof.writeAlloc',\n        'runtime/pprof.writeHeapInternal',\n        'runtime/pprof.writeHeapProto',\n        'runtime/pprof.(*profileBuilder).pbSample',\n        'runtime/pprof.(*profileBuilder).flush',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'compress/flate.token.length',\n        'compress/flate.(*deflateFast).encode',\n        'compress/flate.NewWriter',\n        'compress/flate.(*compressor).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime/pprof.writeHeapProto.func1',\n        'runtime/pprof.(*profileBuilder).pbLabel',\n        'runtime.mapaccess2_faststr',\n        'runtime/pprof.(*protobuf).int64Opt',\n        'runtime/pprof.(*protobuf).endMessage',\n        'runtime.memmove',\n        'runtime/pprof.(*protobuf).startMessage',\n        'runtime/pprof.(*protobuf).uint64s',\n        'runtime.memmove',\n        'runtime/pprof.(*protobuf).int64s',\n        'runtime/pprof.(*profileBuilder).appendLocsForStack',\n        'runtime/pprof.(*profileBuilder).emitLocation',\n        'runtime/pprof.(*profileBuilder).flush',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.NewWriter',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.heapBitsSetType',\n        'runtime.heapBitsSetTypeGCProg',\n        'runtime.runGCProg',\n        'compress/flate.(*compressor).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointersChunked',\n        'runtime.memclrNoHeapPointers',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.pageIndexOf',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.acquirem',\n        'runtime.mapassign_faststr',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.profilealloc',\n        'runtime.mProf_Malloc',\n        'runtime.callers',\n        'runtime.systemstack',\n        'runtime.callers.func1',\n        'runtime.gentraceback',\n        'runtime.pcdatavalue',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.mapaccess1_faststr',\n        'aeshashbody',\n        'runtime.mapassign_fast64',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'runtime.memclrHasPointers',\n        'runtime.bulkBarrierPreWrite',\n        'runtime.wbBufFlush',\n        'runtime.systemstack',\n        'runtime.wbBufFlush.func1',\n        'runtime.wbBufFlush1',\n        'runtime.spanOf',\n        'runtime.memhash64',\n        'runtime/pprof.(*profileBuilder).pbLine',\n        'runtime/pprof.(*protobuf).int64Opt',\n        'runtime/pprof.(*protobuf).endMessage',\n        'runtime.memmove',\n        'runtime.duffcopy',\n        'runtime/pprof.(*protobuf).endMessage',\n        'runtime.memmove',\n        'runtime.duffzero',\n        'runtime/pprof.(*protobuf).int64Opt',\n        'runtime.CallersFrames',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memclrNoHeapPointers',\n        'runtime.heapBitsForAddr',\n        'runtime/pprof.allFrames',\n        'runtime.duffcopy',\n        'runtime.(*Frames).Next',\n        'runtime.funcline1',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.funcfile',\n        'runtime.findnull',\n        'indexbytebody',\n        'runtime.funcname',\n        'runtime.findnull',\n        'indexbytebody',\n        'runtime.findfunc',\n        'runtime.duffzero',\n        'runtime.(*Func).Entry',\n        'runtime.pcdatavalue1',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.mapaccess2_fast64',\n        'runtime.memhash64',\n        'runtime/pprof.runtime_expandFinalInlineFrame',\n        'runtime.findfunc',\n        'runtime.pcdatavalue1',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime/pprof.(*profileBuilder).stringIndex',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memmove',\n        'runtime.mapassign_faststr',\n        'runtime.growWork_faststr',\n        'runtime.evacuate_faststr',\n        'aeshashbody',\n        'runtime.advanceEvacuationMark',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.heapBitsSetType',\n        'runtime.mapaccess2_faststr',\n        'aeshashbody',\n        'runtime/pprof.(*protobuf).uint64Opt',\n        'runtime.funcdata',\n        'runtime/pprof.(*profileBuilder).build',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*deflateFast).encode',\n        'compress/flate.(*deflateFast).matchLen',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'compress/flate.(*huffmanBitWriter).writeBits',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanEncoder).generate',\n        'compress/flate.(*huffmanEncoder).bitCounts',\n        'compress/flate.(*huffmanBitWriter).writeDynamicHeader',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'compress/flate.hash',\n        'compress/gzip.(*Writer).Close',\n        'compress/flate.(*compressor).close',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeBits',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'fmt.Fprintf',\n        'fmt.(*pp).doPrintf',\n        'fmt.(*pp).printArg',\n        'fmt.(*pp).fmtInteger',\n        'fmt.(*fmt).fmtInteger',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'compress/flate.token.offset',\n        'compress/flate.hash',\n        'compress/flate.(*deflateFast).encode',\n        'compress/flate.load64',\n        'runtime.FuncForPC',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.findfunc',\n        'runtime.pcdatavalue1',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.funcline1',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime/pprof.newProfileBuilder',\n        'runtime/pprof.(*profileBuilder).readMapping',\n        'os.ReadFile',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.duffcopy',\n        'runtime.(*Func).Name',\n        'runtime.funcname',\n        'runtime.findnull',\n        'indexbytebody',\n        'runtime/pprof.scaleHeapSample',\n        'math.archExp',\n        'runtime.(*MemProfileRecord).Stack',\n        'runtime.duffcopy',\n        'runtime/pprof.writeGoroutine',\n        'runtime/pprof.writeRuntimeProfile',\n        'runtime/pprof.runtime_goroutineProfileWithLabels',\n        'runtime.goroutineProfileWithLabels',\n        'runtime.forEachGRace',\n        'runtime.goroutineProfileWithLabels.func4',\n        'runtime.systemstack',\n        'runtime.goroutineProfileWithLabels.func4.1',\n        'runtime.saveg',\n        'runtime.gentraceback',\n        'runtime.pcdatavalue',\n        'runtime.funcInfo.entry',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.readvarint',\n        'runtime.funcspdelta',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.findfunc',\n        'runtime.goroutineProfileWithLabels.func1',\n        'runtime.isSystemGoroutine',\n        'runtime.funcname',\n        'runtime.findnull',\n        'runtime.goroutineProfileWithLabels.func2',\n        'runtime.goroutineProfileWithLabels.func1',\n        'runtime.isSystemGoroutine',\n        'runtime.startTheWorld',\n        'runtime.systemstack',\n        'runtime.startTheWorld.func1',\n        'runtime.startTheWorldWithSema',\n        'runtime.wakep',\n        'runtime.startm',\n        'runtime.notewakeup',\n        'runtime.futexwakeup',\n        'runtime.futex',\n        'runtime.systemstack',\n        'runtime.goroutineProfileWithLabels.func3',\n        'runtime.saveg',\n        'runtime.gentraceback',\n        'runtime/pprof.printCountProfile',\n        'runtime/pprof.printCountProfile.func1',\n        'fmt.Fprintf',\n        'fmt.(*pp).doPrintf',\n        'fmt.(*pp).printArg',\n        'fmt.(*pp).fmtInteger',\n        'fmt.(*fmt).fmtInteger',\n        'bytes.(*Buffer).Write',\n        'runtime.memmove',\n        'runtime.slicebytetostring',\n        'runtime.nextFreeFast',\n        'runtime.mapassign_faststr',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.nextFreeFast',\n        'aeshashbody',\n        'runtime/pprof.(*profileBuilder).appendLocsForStack',\n        'runtime/pprof.(*profileBuilder).stringIndex',\n        'runtime.overLoadFactor',\n        'runtime/pprof.(*profileBuilder).emitLocation',\n        'runtime/pprof.(*profileBuilder).pbLine',\n        'runtime/pprof.(*profileBuilder).flush',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.NewWriter',\n        'compress/flate.(*compressor).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.heapBits.bits',\n        'runtime.scanobject',\n        'runtime.greyobject',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime/pprof.allFrames',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.(*Frames).Next',\n        'runtime.funcline1',\n        'runtime.pcvalue',\n        'runtime/pprof.newProfileBuilder',\n        'runtime/pprof.(*profileBuilder).readMapping',\n        'runtime/pprof.parseProcSelfMaps',\n        'runtime/pprof.elfBuildID',\n        'os.OpenFile',\n        'syscall.Open',\n        'syscall.openat',\n        'syscall.Syscall6',\n        'runtime/pprof.parseProcSelfMaps.func1',\n        'bytes.Cut',\n        'runtime.slicebytetostring',\n        'runtime.nextFreeFast',\n        'runtime/pprof.(*profileBuilder).addMapping',\n        'runtime.growslice',\n        'os.Open',\n        'os.OpenFile',\n        'syscall.Open',\n        'syscall.openat',\n        'syscall.Syscall6',\n        'os.openFileNolog',\n        'os.newFile',\n        'runtime.SetFinalizer',\n        'runtime.systemstack',\n        'runtime.SetFinalizer.func2',\n        'runtime.addfinalizer',\n        'runtime.addspecial',\n        'os.ReadFile',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*pageAlloc).allocToCache',\n        'os.(*File).Stat',\n        'internal/poll.(*FD).Fstat',\n        'syscall.Fstat',\n        'syscall.Syscall',\n        'os.(*File).Read',\n        'syscall.Read',\n        'syscall.read',\n        'syscall.Syscall',\n        'runtime.newobject',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.doPivot',\n        'runtime/pprof.(*keysByCount).Less',\n        'cmpbody',\n        'sort.quickSort',\n        'sort.insertionSort',\n        'runtime/pprof.(*keysByCount).Less',\n        'runtime.mapaccess1_faststr',\n        'runtime/pprof.(*profileBuilder).pbSample',\n        'runtime/pprof.(*protobuf).uint64s',\n        'runtime.newobject',\n        'github.com/prometheus/client_golang/prometheus.(*GaugeVec).WithLabelValues',\n        'runtime.assertI2I',\n        'runtime.getitab',\n        'runtime.(*itabTableType).find',\n        'github.com/weaveworks/common/middleware.Instrument.getRouteName',\n        'github.com/weaveworks/common/middleware.getRouteName',\n        'github.com/weaveworks/common/middleware.MakeLabelValue',\n        'strings.Trim',\n        'github.com/gorilla/mux.(*Router).Match',\n        'github.com/gorilla/mux.(*Route).Match',\n        'github.com/gorilla/mux.(*routeRegexp).Match',\n        'regexp.(*Regexp).doExecute',\n        'regexp.(*Regexp).backtrack',\n        'regexp.(*Regexp).tryBacktrack',\n        'github.com/weaveworks/common/logging.gokit.Debugf',\n        'github.com/go-kit/log.(*context).Log',\n        'github.com/go-kit/log.bindValues',\n        'github.com/go-kit/log.Caller.func1',\n        'runtime.Caller',\n        'runtime.callers',\n        'github.com/uber/jaeger-client-go.(*Tracer).Extract',\n        'github.com/uber/jaeger-client-go.(*TextMapPropagator).Extract',\n        'runtime.assertE2I2',\n        'runtime.getitab',\n        'runtime.(*itabTableType).find',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'github.com/weaveworks/common/middleware.Tracer.Wrap.func1',\n        'github.com/weaveworks/common/middleware.getRouteName',\n        'github.com/gorilla/mux.(*Router).Match',\n        'github.com/gorilla/mux.(*Route).Match',\n        'github.com/gorilla/mux.(*routeRegexp).Match',\n        'regexp.(*Regexp).doExecute',\n        'net/http.(*response).finishRequest',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'net/http.(*chunkWriter).writeHeader',\n        'net/http.Header.writeSubset',\n        'net/http.Header.sortedKeyValues',\n        'sync.(*Pool).Get',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'net/http.(*conn).readRequest',\n        'runtime.mapiterinit',\n        'runtime.gcBgMarkWorker',\n        'runtime.systemstack',\n        'runtime.gcBgMarkWorker.func2',\n        'runtime.gcDrain',\n        'runtime.scanobject',\n        'runtime.(*gcBits).bytep',\n        'runtime.(*mspan).objIndex',\n        'runtime.pageIndexOf',\n        'runtime.greyobject',\n        'runtime.(*gcWork).put',\n        'runtime.getempty',\n        'runtime.putfull',\n        'runtime.(*lfstack).push',\n        'runtime.findObject',\n        'runtime.spanOf',\n        'runtime.(*mspan).markBitsForIndex',\n        'runtime.spanOf',\n        'runtime.markBits.isMarked',\n        'runtime.arenaIndex',\n        'runtime.heapBitsForAddr',\n        'runtime.(*gcWork).tryGet',\n        'runtime.trygetfull',\n        'runtime.spanOfUnchecked',\n        'runtime.heapBits.next',\n        'runtime.gcFlushBgCredit',\n        'runtime.heapBits.bits',\n        'runtime.(*gcWork).balance',\n        'runtime.handoff',\n        'runtime.getempty',\n        'runtime.(*gcWork).tryGetFast',\n        'runtime.gcMarkDone',\n        'runtime.gcMarkTermination',\n        'runtime.mProf_Flush',\n        'runtime.mProf_FlushLocked',\n        'runtime.(*bucket).mp',\n        'runtime.systemstack',\n        'runtime.gcMarkTermination.func4',\n        'runtime.forEachP',\n        'runtime.gcMarkTermination.func4.1',\n        'runtime.(*mcache).prepareForSweep',\n        'runtime.(*mcache).releaseAll',\n        'net/http.(*persistConn).readLoop',\n        'runtime.selectgo',\n        'runtime.send',\n        'runtime.goready',\n        'runtime.systemstack',\n        'runtime.goready.func1',\n        'runtime.ready',\n        'runtime.runqput',\n        'bufio.(*Reader).Peek',\n        'bufio.(*Reader).fill',\n        'net/http.(*persistConn).Read',\n        'net.(*conn).Read',\n        'net.(*netFD).Read',\n        'syscall.Read',\n        'syscall.read',\n        'syscall.Syscall',\n        'net/http.(*persistConn).readResponse',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*Tracer).gotFirstResponseByte',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.bgsweep',\n        'runtime.sweepone',\n        'runtime.(*sweepLocker).tryAcquire',\n        'runtime.(*sweepLocked).sweep',\n        'runtime.(*gcBitsArena).tryAlloc',\n        'runtime.spanClass.sizeclass',\n        'runtime/internal/atomic.(*Uint32).CompareAndSwap',\n        'runtime.mcall',\n        'runtime.park_m',\n        'runtime.schedule',\n        'runtime.findrunnable',\n        'runtime.netpoll',\n        'runtime.epollwait',\n        'runtime.stopm',\n        'runtime.notesleep',\n        'runtime.futexsleep',\n        'runtime.futex',\n        'runtime.(*randomOrder).start',\n        'runtime.checkTimers',\n        'runtime.runtimer',\n        'runtime.dodeltimer0',\n        'runtime.gcstopm',\n        'runtime.lock2',\n        'runtime.procyield',\n        'runtime.(*lfstack).pop',\n        'runtime.gosched_m',\n        'runtime.lock',\n        'runtime.lock2',\n        'runtime.goschedImpl',\n        'runtime.schedule',\n        'runtime.execute',\n        'runtime.casgstatus',\n        'runtime.checkTimers',\n        'runtime.findrunnable',\n        'runtime.checkTimers',\n        'runtime.casgstatus',\n        'net/http.(*persistConn).writeLoop',\n        'net/http.(*Request).write',\n        'net/http.newTransferWriter',\n        'runtime.convI2I',\n        'runtime.getitab',\n        'runtime.(*itabTableType).find',\n        'runtime.chansend1',\n        'runtime.chansend',\n        'runtime.send',\n        'runtime.goready',\n        'runtime.systemstack',\n        'runtime.goready.func1',\n        'runtime.ready',\n        'runtime.wakep',\n        'runtime.startm',\n        'runtime.notewakeup',\n        'runtime.futexwakeup',\n        'runtime.futex',\n        'bufio.(*Writer).Flush',\n        'net/http.persistConnWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'runtime.exitsyscall',\n        'runtime.exitsyscallfast',\n        'runtime.exitsyscallfast_reacquired',\n        'test/pkg/distributor.(*Distributor).Push.func1',\n        'test/pkg/distributor.(*Distributor).sendProfiles',\n        'test/pkg/distributor.(*Distributor).sendProfilesErr',\n        'test/pkg/gen/ingester/v1/ingesterv1connect.(*ingesterServiceClient).Push',\n        'github.com/bufbuild/connect-go.(*Client[...]).CallUnary',\n        'github.com/bufbuild/connect-go.NewClient[...].func2',\n        'github.com/bufbuild/connect-go.NewClient[...].func1',\n        'github.com/bufbuild/connect-go.receiveUnaryResponse[...]',\n        'github.com/bufbuild/connect-go.(*errorTranslatingReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryClientReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryUnmarshaler).UnmarshalFunc',\n        'github.com/bufbuild/connect-go.(*compressionPool).Decompress',\n        'github.com/bufbuild/connect-go.(*compressionPool).getDecompressor',\n        'compress/gzip.(*Reader).Reset',\n        'compress/gzip.(*Reader).readHeader',\n        'compress/flate.(*dictDecoder).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.heapBits.initSpan',\n        'compress/flate.(*decompressor).Reset',\n        'runtime.newstack',\n        'runtime.copystack',\n        'runtime.gentraceback',\n        'compress/flate.NewReader',\n        'compress/flate.fixedHuffmanDecoderInit',\n        'runtime.newstack',\n        'runtime.copystack',\n        'runtime.gentraceback',\n        'runtime.funcspdelta',\n        'runtime.pcvalue',\n        'runtime.step',\n        'github.com/bufbuild/connect-go.(*errorTranslatingSender).Send',\n        'github.com/bufbuild/connect-go.(*connectClientSender).Send',\n        'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).Marshal',\n        'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).write',\n        'github.com/bufbuild/connect-go.(*duplexHTTPCall).Write',\n        'io.(*pipe).write',\n        'runtime.chanrecv1',\n        'runtime.chanrecv',\n        'runtime.recv',\n        'runtime.gcWriteBarrierR8',\n        'runtime.gcWriteBarrier',\n        'runtime.wbBufFlush',\n        'runtime.systemstack',\n        'runtime.wbBufFlush.func1',\n        'runtime.wbBufFlush1',\n        'runtime.findObject',\n        'github.com/bufbuild/connect-go.(*errorTranslatingReceiver).Close',\n        'github.com/bufbuild/connect-go.(*connectUnaryClientReceiver).Close',\n        'github.com/bufbuild/connect-go.(*duplexHTTPCall).CloseRead',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.closeTracker.Close',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime/pprof.profileWriter',\n        'runtime/pprof.(*profileBuilder).addCPUData',\n        'runtime/pprof.(*profMap).lookup',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.pageIndexOf',\n        'net/http.(*connReader).backgroundRead',\n        'net.(*conn).Read',\n        'net.(*netFD).Read',\n        'internal/poll.(*FD).Read',\n      ],\n    },\n  ],\n};\n","import { StandardVariableQuery, StandardVariableSupport } from '@grafana/data';\n\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery } from './types';\n\nexport class TestDataVariableSupport extends StandardVariableSupport<TestDataDataSource> {\n  toDataQuery(query: StandardVariableQuery): TestDataQuery {\n    return {\n      refId: 'TestDataDataSource-QueryVariable',\n      stringInput: query.query,\n      scenarioId: 'variables-query',\n      csvWave: undefined,\n    };\n  }\n}\n","import { from, merge, Observable, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\n\nimport { queryMetricTree } from './metricTree';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\nimport { runStream } from './runStreams';\nimport { flameGraphData } from './testData/flameGraphResponse';\nimport { Scenario, TestDataQuery } from './types';\nimport { TestDataVariableSupport } from './variables';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestDataQuery> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const backendQueries: TestDataQuery[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n        case 'flame_graph':\n          streams.push(this.flameGraphQuery());\n          break;\n        case 'raw_frame':\n          streams.push(this.rawFrameQuery(target, options));\n          break;\n        case 'server_error_500':\n          // this now has an option where it can return/throw an error from the frontend.\n          // if it doesn't, send it to the backend where it might panic there :)\n          const query = this.serverErrorQuery(target, options);\n          query ? streams.push(query) : backendQueries.push(target);\n          break;\n        // Unusable since 7, removed in 8\n        case 'manual_entry': {\n          let csvContent = 'Time,Value\\n';\n          if ((target as any).points) {\n            for (const point of (target as any).points) {\n              csvContent += `${point[1]},${point[0]}\\n`;\n            }\n          }\n          target.scenarioId = 'csv_content';\n          target.csvContent = csvContent;\n        }\n\n        default:\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query: TestDataQuery, scopedVars: ScopedVars) {\n    if (query.labels) {\n      query.labels = this.templateSrv.replace(query.labels, scopedVars);\n    }\n    if (query.alias) {\n      query.alias = this.templateSrv.replace(query.alias, scopedVars);\n    }\n    if (query.scenarioId) {\n      query.scenarioId = this.templateSrv.replace(query.scenarioId, scopedVars);\n    }\n    if (query.stringInput) {\n      query.stringInput = this.templateSrv.replace(query.stringInput, scopedVars);\n    }\n    if (query.csvContent) {\n      query.csvContent = this.templateSrv.replace(query.csvContent, scopedVars);\n    }\n    if (query.rawFrameContent) {\n      query.rawFrameContent = this.templateSrv.replace(query.rawFrameContent, scopedVars);\n    }\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 50);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    const scenario = query.scenarioId ?? 'Default scenario';\n\n    if (query.alias) {\n      return scenario + ' as ' + query.alias;\n    }\n\n    return scenario;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const query = target.stringInput ?? '';\n    const interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: options.scopedVars })\n    );\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n\n  flameGraphQuery(): Observable<DataQueryResponse> {\n    return of({ data: [flameGraphData] }).pipe(delay(100));\n  }\n\n  rawFrameQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    try {\n      const data = JSON.parse(target.rawFrameContent ?? '[]').map((v: any) => {\n        const f = toDataFrame(v);\n        f.refId = target.refId;\n        return f;\n      });\n      return of({ data, state: LoadingState.Done }).pipe(delay(100));\n    } catch (ex) {\n      return of({\n        data: [],\n        error: ex instanceof Error ? ex : new Error('Unkown error'),\n      }).pipe(delay(100));\n    }\n  }\n\n  serverErrorQuery(\n    target: TestDataQuery,\n    options: DataQueryRequest<TestDataQuery>\n  ): Observable<DataQueryResponse> | null {\n    const { errorType } = target;\n\n    if (errorType === 'server_panic') {\n      return null;\n    }\n\n    const stringInput = target.stringInput ?? '';\n    if (stringInput === '') {\n      if (errorType === 'frontend_exception') {\n        throw new Error('Scenario threw an exception in the frontend because the input was empty.');\n      } else {\n        return throwError(() => new Error('Scenario returned an error because the input was empty.'));\n      }\n    }\n\n    return null;\n  }\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    key: `testStream.${liveQueryCounter++}`,\n  });\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { TestInfoTab } from './TestInfoTab';\nimport { TestDataDataSource } from './datasource';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"names":["buildMetricTree","parent","depth","chars","children","letter","nodeName","push","name","queryTree","query","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","indexOf","pattern","RegExp","test","concat","queryMetricTree","ConfigEditor","PureComponent","render","streamingClientFields","label","id","placeholder","min","step","types","value","StreamingClientEditor","onChange","onInputChange","e","target","Number","InlineFieldRow","InlineField","labelWidth","Select","width","defaultValue","options","stream","type","map","Input","I","refId","grow","url","randomWalkFields","max","tooltip","testSelectors","selectors","RandomWalkEditor","selector","CSVContentEditor","onSaveCSV","csvContent","CodeEditor","height","language","onBlur","onSave","showMiniMap","showLineNumbers","CSVFileEditor","files","csvFileName","find","f","defaultPulseQuery","timeStep","onCount","onValue","offCount","offValue","defaultCSVWaveQuery","valuesCSV","defaultQuery","scenarioId","CSVWaveEditor","props","wave","last","index","onAdd","setValuesCSV","useState","labels","setLabels","setName","onValueChange","key","currentTarget","autoFocus","onKeyDown","evt","valueAsNumber","Button","icon","variant","onClick","undefined","CSVWavesEditor","waves","this","splice","ERROR_OPTIONS","errorType","v","liveTestDataChannels","description","GrafanaLiveEditor","channel","NodeGraphEditor","nodes","o","item","count","parseInt","fields","PredictablePulseEditor","pulseWave","RawFrameEditor","error","setError","warning","setWarning","onSaveFrames","rawFrameContent","json","JSON","parse","isArray","data","series","state","toDataFrameDTO","toDataFrame","toDataQueryResponse","dataFrameToJSON","console","log","stringify","Alert","title","severity","renderInput","field","config","newValue","getStyles","theme","jsonView","css","spacing","SimulationSchemaForm","schema","setJsonView","styles","useStyles2","FieldSet","className","showLabel","TextArea","rows","event","element","SimulationQueryEditor","ds","simQuery","sim","simKey","cfgValue","setCfgValue","info","useAsync","async","getResource","sims","s","current","useMemo","details","option","path","tick","uid","onUpdateKey","isLoading","loading","Boolean","suffix","Label","postResource","then","res","USAQueryEditor","usaQueryModes","mode","ep","period","fieldNames","vals","stateNames","states","getNextWord","Math","floor","random","words","defaultStreamQuery","speed","spread","noise","bands","runStream","req","defaults","Observable","subscriber","streamId","panelId","maxDataPoints","FieldType","alias","i","frame","StreamingDataFrame","maxLength","timeoutId","lastSent","addNextRow","time","values","Date","now","pushNextEvent","liveTimer","next","LoadingState","setTimeout","clearTimeout","runSignalStream","CircularDataFrame","append","capacity","addField","meta","preferredVisualisationType","add","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","onRow","row","processChunk","text","TextDecoder","decode","readCSV","done","complete","read","Error","fetch","Request","response","body","getReader","runFetchStream","showLabelsFor","endpoints","editorSelectors","TestInfoTab","constructor","super","href","rel","NodeGraphDataFrameFieldNames","links","internal","queryType","datasourceUid","datasourceName","displayName","unit","color","FieldColorModeId","fixedColor","edges","makeRandomNode","success","toString","subTitle","stat1","stat2","flameGraphData","TestDataVariableSupport","StandardVariableSupport","toDataQuery","stringInput","csvWave","TestDataDataSource","DataSourceWithBackend","instanceSettings","templateSrv","getTemplateSrv","variables","backendQueries","streams","targets","hide","resolveTemplateVariables","scopedVars","runGrafanaLiveQuery","runGrafanaAPI","annotationDataTopicTest","variablesQuery","nodesQuery","flameGraphQuery","rawFrameQuery","serverErrorQuery","points","point","backendOpts","of","merge","events","buildFakeAnnotationEvents","range","dataFrame","ArrayDataFrame","dataTopic","DataTopic","pipe","delay","timeWalker","from","valueOf","to","tags","annotationQuery","Promise","resolve","getQueryDisplayText","scenario","testDatasource","status","message","getScenarios","scenariosCache","interpolatedQuery","getSearchFilterScopedVar","wildcardChar","items","frames","root","nodesWithoutMaxEdges","maxEdges","sourceIndex","source","additionalEdges","nodeFields","ArrayVector","nodeFrame","MutableDataFrame","Object","keys","edgeFields","edgesFrame","edgesSet","Set","arc__success","arc__errors","edge","has","generateRandomNodes","ex","throwError","getBackendSrv","get","liveQueryCounter","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","namespace","TestDataAnnotationsQueryCtrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","datasource","onRunQuery","scenarioList","hideAlias","hideAliasField","includes","onUpdate","currentScenario","checked","onFieldChange","onStreamClientChange","onPulseWaveChange","sort","a","b","localeCompare","showLabels","scenarioSelectContainer","inputId","sc","update","usa","lines","levelColumn","val","ErrorEditor","setAnnotationQueryCtrl","addConfigPage"],"sourceRoot":""}