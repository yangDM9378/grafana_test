{"version":3,"file":"mysqlPlugin.f4cdc0ac9b11cecf8ea7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/sql/components/configuration/TLSSecretsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlQueryModel.ts","webpack://grafana/./public/app/plugins/datasource/mysql/fields.ts","webpack://grafana/./public/app/plugins/datasource/mysql/mySqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlDatasource.ts","webpack://grafana/./public/app/plugins/datasource/mysql/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/module.ts"],"sourcesContent":["import React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  KeyValue,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { InlineField, SecretTextArea } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData, S> {\n  editorProps: DataSourcePluginOptionsEditorProps<T, S>;\n  showCACert?: boolean;\n  showKeyPair?: boolean;\n  secureJsonFields?: KeyValue<Boolean>;\n  labelWidth?: number;\n}\n\nexport const TLSSecretsConfig = <T extends DataSourceJsonData, S extends {} = {}>(props: Props<T, S>) => {\n  const { labelWidth, editorProps, showCACert, showKeyPair = true } = props;\n  const { secureJsonFields } = editorProps.options;\n  return (\n    <>\n      {showKeyPair ? (\n        <InlineField\n          tooltip={\n            <span>To authenticate with an TLS/SSL client certificate, provide the client certificate here.</span>\n          }\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientCert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientCert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientCert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showCACert ? (\n        <InlineField\n          tooltip={<span>If the selected TLS/SSL mode requires a server root certificate, provide it here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Root Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsCACert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsCACert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsCACert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showKeyPair ? (\n        <InlineField\n          tooltip={<span>To authenticate with a client TLS/SSL certificate, provide the key here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Key\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN RSA PRIVATE KEY-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientKey}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientKey')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientKey');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n    </>\n  );\n};\n","import { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport { MySQLQuery } from './types';\n\nexport default class MySQLQueryModel {\n  target: Partial<MySQLQuery>;\n  templateSrv?: TemplateSrv;\n  scopedVars?: ScopedVars;\n\n  constructor(target: Partial<MySQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  getDatabase() {\n    return this.target.dataset;\n  }\n}\n","import { RAQBFieldTypes, SQLSelectableValue } from 'app/features/plugins/sql/types';\n\nexport function mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: SQLSelectableValue[] = [];\n  for (const col of columns) {\n    let type: RAQBFieldTypes = 'text';\n    switch (col.type?.toUpperCase()) {\n      case 'BOOLEAN':\n      case 'BOOL': {\n        type = 'boolean';\n        break;\n      }\n      case 'BYTES':\n      case 'VARCHAR': {\n        type = 'text';\n        break;\n      }\n      case 'FLOAT':\n      case 'FLOAT64':\n      case 'INT':\n      case 'INTEGER':\n      case 'INT64':\n      case 'NUMERIC':\n      case 'BIGNUMERIC': {\n        type = 'number';\n        break;\n      }\n      case 'DATE': {\n        type = 'date';\n        break;\n      }\n      case 'DATETIME': {\n        type = 'datetime';\n        break;\n      }\n      case 'TIME': {\n        type = 'time';\n        break;\n      }\n      case 'TIMESTAMP': {\n        type = 'datetime';\n        break;\n      }\n      case 'GEOGRAPHY': {\n        type = 'text';\n        break;\n      }\n      default:\n        break;\n    }\n\n    fields.push({ ...col, raqbFieldType: type, icon: mapColumnTypeToIcon(col.type!.toUpperCase()) });\n  }\n  return fields;\n}\n\nexport function mapColumnTypeToIcon(type: string) {\n  switch (type) {\n    case 'TIME':\n    case 'DATETIME':\n    case 'TIMESTAMP':\n      return 'clock-nine';\n    case 'BOOLEAN':\n      return 'toggle-off';\n    case 'INTEGER':\n    case 'FLOAT':\n    case 'FLOAT64':\n    case 'INT':\n    case 'SMALLINT':\n    case 'BIGINT':\n    case 'TINYINT':\n    case 'BYTEINT':\n    case 'INT64':\n    case 'NUMERIC':\n    case 'DECIMAL':\n      return 'calculator-alt';\n    case 'CHAR':\n    case 'VARCHAR':\n    case 'STRING':\n    case 'BYTES':\n    case 'TEXT':\n    case 'TINYTEXT':\n    case 'MEDIUMTEXT':\n    case 'LONGTEXT':\n      return 'text';\n    case 'GEOGRAPHY':\n      return 'map';\n    default:\n      return undefined;\n  }\n}\n","import MySQLQueryModel from './MySqlQueryModel';\n\nexport function buildTableQuery(dataset?: string) {\n  const database = dataset !== undefined ? `'${dataset}'` : 'database()';\n  return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${database} ORDER BY table_name`;\n}\n\nexport function showDatabases() {\n  return `SELECT DISTINCT TABLE_SCHEMA from information_schema.TABLES where TABLE_TYPE != 'SYSTEM VIEW' ORDER BY TABLE_SCHEMA`;\n}\n\nexport function buildColumnQuery(queryModel: MySQLQueryModel, table: string, type?: string, timeColumn?: string) {\n  let query = 'SELECT column_name, data_type FROM information_schema.columns WHERE ';\n  query += buildTableConstraint(queryModel, table);\n\n  switch (type) {\n    case 'time': {\n      query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n      break;\n    }\n    case 'metric': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n    case 'value': {\n      query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n      query += ' AND column_name <> ' + quoteIdentAsLiteral(queryModel, timeColumn!);\n      break;\n    }\n    case 'group': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n  }\n\n  query += ' ORDER BY column_name';\n\n  return query;\n}\n\nexport function buildTableConstraint(queryModel: MySQLQueryModel, table: string) {\n  let query = '';\n\n  // check for schema qualified table\n  if (table.includes('.')) {\n    const parts = table.split('.');\n    query = 'table_schema = ' + quoteIdentAsLiteral(queryModel, parts[0]);\n    query += ' AND table_name = ' + quoteIdentAsLiteral(queryModel, parts[1]);\n    return query;\n  } else {\n    const database = queryModel.getDatabase() !== undefined ? `'${queryModel.getDatabase()}'` : 'database()';\n    query = `table_schema = ${database} AND table_name = ` + quoteIdentAsLiteral(queryModel, table);\n\n    return query;\n  }\n}\n\nexport function quoteIdentAsLiteral(queryModel: MySQLQueryModel, value: string) {\n  return queryModel.quoteLiteral(queryModel.unquoteIdentifier(value));\n}\n","import {\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  TableDefinition,\n  TableIdentifier,\n} from '@grafana/experimental';\n\ninterface CompletionProviderGetterArgs {\n  getMeta: React.MutableRefObject<(t?: TableIdentifier) => Promise<TableDefinition[]>>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getMeta }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    tables: {\n      resolve: getMeta.current,\n    },\n    columns: {\n      resolve: getMeta.current,\n    },\n  });\n","import { DataSourceInstanceSettings, ScopedVars, TimeRange } from '@grafana/data';\nimport { CompletionItemKind, LanguageDefinition, TableIdentifier } from '@grafana/experimental';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlDatasource } from 'app/features/plugins/sql/datasource/SqlDatasource';\nimport { DB, SQLQuery } from 'app/features/plugins/sql/types';\nimport { formatSQL } from 'app/features/plugins/sql/utils/formatSQL';\n\nimport MySQLQueryModel from './MySqlQueryModel';\nimport { mapFieldsToTypes } from './fields';\nimport { buildColumnQuery, buildTableQuery, showDatabases } from './mySqlMetaQuery';\nimport { getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { MySQLOptions } from './types';\n\nexport class MySqlDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<MySQLOptions>) {\n    super(instanceSettings);\n  }\n\n  getQueryModel(target?: Partial<SQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): MySQLQueryModel {\n    return new MySQLQueryModel(target!, templateSrv, scopedVars);\n  }\n\n  getSqlLanguageDefinition(db: DB): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n\n    const args = {\n      getMeta: { current: (identifier?: TableIdentifier) => this.fetchMeta(identifier) },\n    };\n    this.sqlLanguageDefinition = {\n      id: 'sql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    const datasets = await this.runSql<string[]>(showDatabases(), { refId: 'datasets' });\n    return datasets.map((t) => t[0]);\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    const tables = await this.runSql<string[]>(buildTableQuery(dataset), { refId: 'tables' });\n    return tables.map((t) => t[0]);\n  }\n\n  async fetchFields(query: Partial<SQLQuery>) {\n    if (!query.dataset || !query.table) {\n      return [];\n    }\n    const queryString = buildColumnQuery(this.getQueryModel(query), query.table!);\n    const frame = await this.runSql<string[]>(queryString, { refId: 'fields' });\n    const fields = frame.map((f) => ({ name: f[0], text: f[0], value: f[0], type: f[1], label: f[0] }));\n    return mapFieldsToTypes(fields);\n  }\n\n  async fetchMeta(identifier?: TableIdentifier) {\n    const defaultDB = this.instanceSettings.jsonData.database;\n    if (!identifier?.schema && defaultDB) {\n      const tables = await this.fetchTables(defaultDB);\n      return tables.map((t) => ({ name: t, completion: `${defaultDB}.${t}`, kind: CompletionItemKind.Class }));\n    } else if (!identifier?.schema && !defaultDB) {\n      const datasets = await this.fetchDatasets();\n      return datasets.map((d) => ({ name: d, completion: `${d}.`, kind: CompletionItemKind.Module }));\n    } else {\n      if (!identifier?.table && !defaultDB) {\n        const tables = await this.fetchTables(identifier?.schema);\n        return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n      } else if (identifier?.table && identifier.schema) {\n        const fields = await this.fetchFields({ dataset: identifier.schema, table: identifier.table });\n        return fields.map((t) => ({ name: t.value, completion: t.value, kind: CompletionItemKind.Field }));\n      } else {\n        return [];\n      }\n    }\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      fields: (query: SQLQuery) => this.fetchFields(query),\n      validateQuery: (query: SQLQuery, range?: TimeRange) =>\n        Promise.resolve({ query, error: '', isError: false, isValid: true }),\n      dsID: () => this.id,\n      functions: () => ['VARIANCE', 'STDDEV'],\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(this.db),\n    };\n  }\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Alert, FieldSet, InlineField, InlineFieldRow, InlineSwitch, Input, Link, SecretInput } from '@grafana/ui';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\nimport { TLSSecretsConfig } from 'app/features/plugins/sql/components/configuration/TLSSecretsConfig';\n\nimport { MySQLOptions } from '../types';\n\nexport const ConfigurationEditor = (props: DataSourcePluginOptionsEditorProps<MySQLOptions>) => {\n  const { options, onOptionsChange } = props;\n  const jsonData = options.jsonData;\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const onDSOptionChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const onSwitchChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      updateDatasourcePluginJsonDataOption(props, property, event.currentTarget.checked);\n    };\n  };\n\n  const mediumWidth = 20;\n  const shortWidth = 15;\n  const longWidth = 40;\n\n  return (\n    <>\n      <FieldSet label=\"MySQL Connection\" width={400}>\n        <InlineField labelWidth={shortWidth} label=\"Host\">\n          <Input\n            width={longWidth}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:3306\"\n            onChange={onDSOptionChanged('url')}\n          ></Input>\n        </InlineField>\n        <InlineField labelWidth={shortWidth} label=\"Database\">\n          <Input\n            width={longWidth}\n            name=\"database\"\n            value={options.database || ''}\n            placeholder=\"database name\"\n            onChange={onDSOptionChanged('database')}\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={shortWidth} label=\"User\">\n            <Input\n              width={shortWidth}\n              value={options.user || ''}\n              placeholder=\"user\"\n              onChange={onDSOptionChanged('user')}\n            ></Input>\n          </InlineField>\n          <InlineField labelWidth={shortWidth - 5} label=\"Password\">\n            <SecretInput\n              width={shortWidth}\n              placeholder=\"Password\"\n              isConfigured={options.secureJsonFields && options.secureJsonFields.password}\n              onReset={onResetPassword}\n              onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n            ></SecretInput>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField\n          tooltip={\n            <span>\n              Specify the time zone used in the database session, e.g. <code>Europe/Berlin</code> or\n              <code>+02:00</code>. This is necessary, if the timezone of the database (or the host of the database) is\n              set to something other than UTC. The value is set in the session with\n              <code>SET time_zone=&apos;...&apos;</code>. If you leave this field empty, the timezone is not updated.\n              You can find more information in the MySQL documentation.\n            </span>\n          }\n          label=\"Session timezone\"\n          labelWidth={mediumWidth}\n        >\n          <Input\n            width={longWidth - 5}\n            value={jsonData.timezone || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timezone')}\n            placeholder=\"(default)\"\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={mediumWidth} htmlFor=\"tlsAuth\" label=\"TLS Client Auth\">\n            <InlineSwitch\n              id=\"tlsAuth\"\n              onChange={onSwitchChanged('tlsAuth')}\n              value={jsonData.tlsAuth || false}\n            ></InlineSwitch>\n          </InlineField>\n          <InlineField\n            labelWidth={mediumWidth}\n            tooltip=\"Needed for verifing self-signed TLS Certs\"\n            htmlFor=\"tlsCaCert\"\n            label=\"With CA Cert\"\n          >\n            <InlineSwitch\n              id=\"tlsCaCert\"\n              onChange={onSwitchChanged('tlsAuthWithCACert')}\n              value={jsonData.tlsAuthWithCACert || false}\n            ></InlineSwitch>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField labelWidth={mediumWidth} htmlFor=\"skipTLSVerify\" label=\"Skip TLS Verify\">\n          <InlineSwitch\n            id=\"skipTLSVerify\"\n            onChange={onSwitchChanged('tlsSkipVerify')}\n            value={jsonData.tlsSkipVerify || false}\n          ></InlineSwitch>\n        </InlineField>\n      </FieldSet>\n\n      {jsonData.tlsAuth || jsonData.tlsAuthWithCACert ? (\n        <FieldSet label=\"TLS/SSL Auth Details\">\n          <TLSSecretsConfig\n            showCACert={jsonData.tlsAuthWithCACert}\n            showKeyPair={jsonData.tlsAuth}\n            editorProps={props}\n            labelWidth={25}\n          ></TLSSecretsConfig>\n        </FieldSet>\n      ) : null}\n\n      <ConnectionLimits\n        labelWidth={shortWidth}\n        jsonData={jsonData}\n        onPropertyChanged={(property, value) => {\n          updateDatasourcePluginJsonDataOption(props, property, value);\n        }}\n      ></ConnectionLimits>\n\n      <FieldSet label=\"MySQL details\">\n        <InlineField\n          tooltip={\n            <span>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\n              <code>1m</code> if your data is written every minute.\n            </span>\n          }\n          labelWidth={mediumWidth}\n          label=\"Min time interval\"\n        >\n          <Input\n            placeholder=\"1m\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          ></Input>\n        </InlineField>\n      </FieldSet>\n\n      <Alert title=\"User Permission\" severity=\"info\">\n        The database user should only be granted SELECT permissions on the specified database &amp; tables you want to\n        query. Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect\n        against this we <strong>Highly</strong> recommend you create a specific MySQL user with restricted permissions.\n        Check out the{' '}\n        <Link rel=\"noreferrer\" target=\"_blank\" href=\"http://docs.grafana.org/features/datasources/mysql/\">\n          MySQL Data Source Docs\n        </Link>{' '}\n        for more information.\n      </Alert>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SqlQueryEditor } from 'app/features/plugins/sql/components/QueryEditor';\nimport { SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { MySqlDatasource } from './MySqlDatasource';\nimport { ConfigurationEditor } from './configuration/ConfigurationEditor';\nimport { MySQLOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<MySqlDatasource, SQLQuery, MySQLOptions>(MySqlDatasource)\n  .setQueryEditor(SqlQueryEditor)\n  .setConfigEditor(ConfigurationEditor);\n"],"names":["TLSSecretsConfig","props","labelWidth","editorProps","showCACert","showKeyPair","secureJsonFields","options","tooltip","label","placeholder","cols","rows","isConfigured","tlsClientCert","onChange","onUpdateDatasourceSecureJsonDataOption","onReset","updateDatasourcePluginResetOption","tlsCACert","tlsClientKey","MySQLQueryModel","constructor","target","templateSrv","scopedVars","this","unquoteIdentifier","value","length","substring","replace","quoteIdentifier","quoteLiteral","getDatabase","dataset","mapColumnTypeToIcon","type","buildColumnQuery","queryModel","table","timeColumn","query","includes","parts","split","quoteIdentAsLiteral","undefined","buildTableConstraint","getSqlCompletionProvider","getMeta","monaco","language","getStandardSQLCompletionProvider","tables","resolve","current","columns","MySqlDatasource","SqlDatasource","instanceSettings","super","getQueryModel","getSqlLanguageDefinition","db","sqlLanguageDefinition","args","identifier","fetchMeta","id","completionProvider","formatter","formatSQL","async","runSql","refId","map","t","buildTableQuery","queryString","fields","col","toUpperCase","push","raqbFieldType","icon","mapFieldsToTypes","f","name","text","defaultDB","jsonData","database","schema","fetchFields","completion","kind","CompletionItemKind","fetchTables","fetchDatasets","d","getDB","datasets","validateQuery","range","Promise","error","isError","isValid","dsID","functions","getEditorLanguageDefinition","plugin","DataSourcePlugin","setQueryEditor","SqlQueryEditor","setConfigEditor","onOptionsChange","onDSOptionChanged","property","event","currentTarget","onSwitchChanged","updateDatasourcePluginJsonDataOption","checked","shortWidth","FieldSet","width","InlineField","Input","I","url","InlineFieldRow","user","SecretInput","password","onBlur","longWidth","timezone","onUpdateDatasourceJsonDataOption","htmlFor","tlsAuth","tlsAuthWithCACert","tlsSkipVerify","ConnectionLimits","onPropertyChanged","timeInterval","Alert","title","severity","Link","rel","href"],"sourceRoot":""}