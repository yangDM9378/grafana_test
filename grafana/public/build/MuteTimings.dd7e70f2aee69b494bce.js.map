{"version":3,"file":"MuteTimings.dd7e70f2aee69b494bce.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingTimeRange.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingTimeInterval.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingForm.tsx","webpack://grafana/./public/app/features/alerting/unified/MuteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts"],"sourcesContent":["import { omitBy, isUndefined } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n};\n\nexport const validateArrayField = (value: string, validateValue: (input: string) => boolean, invalidText: string) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years }) => {\n      const interval = {\n        times: times.filter(({ start_time, end_time }) => !!start_time && !!end_time),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineFieldRow, InlineField, Input, Button, IconButton, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\n\ninterface Props {\n  intervalIndex: number;\n}\n\nexport const MuteTimingTimeRange: FC<Props> = ({ intervalIndex }) => {\n  const styles = useStyles2(getStyles);\n  const { register, formState } = useFormContext<MuteTimingFields>();\n\n  const {\n    fields: timeRanges,\n    append: addTimeRange,\n    remove: removeTimeRange,\n  } = useFieldArray<MuteTimingFields>({\n    name: `time_intervals.${intervalIndex}.times`,\n  });\n\n  const validateTime = (timeString: string) => {\n    if (!timeString) {\n      return true;\n    }\n    const [hour, minutes] = timeString.split(':').map((x) => parseInt(x, 10));\n    const isHourValid = hour >= 0 && hour < 25;\n    const isMinuteValid = minutes > -1 && minutes < 60;\n    const isTimeValid = hour === 24 ? minutes === 0 : isHourValid && isMinuteValid;\n\n    return isTimeValid || 'Time is invalid';\n  };\n\n  const formErrors = formState.errors.time_intervals?.[intervalIndex];\n  const timeRangeInvalid = formErrors?.times?.some((value) => value?.start_time || value?.end_time) ?? false;\n\n  return (\n    <div>\n      <Field\n        className={styles.field}\n        label=\"Time range\"\n        description=\"The time inclusive of the starting time and exclusive of the end time in UTC\"\n        invalid={timeRangeInvalid}\n        error={timeRangeInvalid ? 'Times must be between 00:00 and 24:00 UTC' : ''}\n      >\n        <>\n          {timeRanges.map((timeRange, index) => {\n            return (\n              <div className={styles.timeRange} key={timeRange.id}>\n                <InlineFieldRow>\n                  <InlineField label=\"Start time\" invalid={!!formErrors?.times?.[index]?.start_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.start_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.start_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-starts-at\"\n                    />\n                  </InlineField>\n                  <InlineField label=\"End time\" invalid={!!formErrors?.times?.[index]?.end_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.end_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.end_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-ends-at\"\n                    />\n                  </InlineField>\n                  <IconButton\n                    className={styles.deleteTimeRange}\n                    title={'Remove'}\n                    name={'trash-alt'}\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      removeTimeRange(index);\n                    }}\n                  />\n                </InlineFieldRow>\n              </div>\n            );\n          })}\n        </>\n      </Field>\n      <Button\n        className={styles.addTimeRange}\n        variant=\"secondary\"\n        type=\"button\"\n        icon={'plus'}\n        onClick={() => addTimeRange({ start_time: '', end_time: '' })}\n      >\n        Add another time range\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: 0;\n  `,\n  timeRange: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  timeRangeInput: css`\n    width: 120px;\n  `,\n  deleteTimeRange: css`\n    margin: ${theme.spacing(1)} 0 0 ${theme.spacing(0.5)};\n  `,\n  addTimeRange: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, Field, FieldSet, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { DAYS_OF_THE_WEEK, MONTHS, validateArrayField, defaultTimeInterval } from '../../utils/mute-timings';\n\nimport { MuteTimingTimeRange } from './MuteTimingTimeRange';\n\nexport const MuteTimingTimeInterval = () => {\n  const styles = useStyles2(getStyles);\n  const { formState, register } = useFormContext();\n  const {\n    fields: timeIntervals,\n    append: addTimeInterval,\n    remove: removeTimeInterval,\n  } = useFieldArray<MuteTimingFields>({\n    name: 'time_intervals',\n  });\n\n  return (\n    <FieldSet className={styles.timeIntervalLegend} label=\"Time intervals\">\n      <>\n        <p>\n          A time interval is a definition for a moment in time. All fields are lists, and at least one list element must\n          be satisfied to match the field. If a field is left blank, any moment of time will match the field. For an\n          instant of time to match a complete time interval, all fields must match. A mute timing can contain multiple\n          time intervals.\n        </p>\n        {timeIntervals.map((timeInterval, timeIntervalIndex) => {\n          const errors = formState.errors;\n          return (\n            <div key={timeInterval.id} className={styles.timeIntervalSection}>\n              <MuteTimingTimeRange intervalIndex={timeIntervalIndex} />\n              <Field\n                label=\"Days of the week\"\n                error={errors.time_intervals?.[timeIntervalIndex]?.weekdays?.message ?? ''}\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.weekdays}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.weekdays`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (day) => DAYS_OF_THE_WEEK.includes(day.toLowerCase()),\n                        'Invalid day of the week'\n                      ),\n                  })}\n                  className={styles.input}\n                  data-testid=\"mute-timing-weekdays\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.weekdays}\n                  placeholder=\"Example: monday, tuesday:thursday\"\n                />\n              </Field>\n              <Field\n                label=\"Days of the month\"\n                description=\"The days of the month, 1-31, of a month. Negative values can be used to represent days which begin at the end of the month\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.days_of_month}\n                error={errors.time_intervals?.[timeIntervalIndex]?.days_of_month?.message}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.days_of_month`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (day) => {\n                          const parsedDay = parseInt(day, 10);\n                          return (parsedDay > -31 && parsedDay < 0) || (parsedDay > 0 && parsedDay < 32);\n                        },\n                        'Invalid day'\n                      ),\n                  })}\n                  className={styles.input}\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.days_of_month}\n                  placeholder=\"Example: 1, 14:16, -1\"\n                  data-testid=\"mute-timing-days\"\n                />\n              </Field>\n              <Field\n                label=\"Months\"\n                description=\"The months of the year in either numerical or the full calendar month\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.months}\n                error={errors.time_intervals?.[timeIntervalIndex]?.months?.message}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.months`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (month) => MONTHS.includes(month) || (parseInt(month, 10) < 13 && parseInt(month, 10) > 0),\n                        'Invalid month'\n                      ),\n                  })}\n                  className={styles.input}\n                  placeholder=\"Example: 1:3, may:august, december\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.months}\n                  data-testid=\"mute-timing-months\"\n                />\n              </Field>\n              <Field\n                label=\"Years\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.years}\n                error={errors.time_intervals?.[timeIntervalIndex]?.years?.message ?? ''}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.years`, {\n                    validate: (value) => validateArrayField(value, (year) => /^\\d{4}$/.test(year), 'Invalid year'),\n                  })}\n                  className={styles.input}\n                  placeholder=\"Example: 2021:2022, 2030\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.years}\n                  data-testid=\"mute-timing-years\"\n                />\n              </Field>\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                icon=\"trash-alt\"\n                onClick={() => removeTimeInterval(timeIntervalIndex)}\n              >\n                Remove time interval\n              </Button>\n            </div>\n          );\n        })}\n        <Button\n          type=\"button\"\n          variant=\"secondary\"\n          className={styles.removeTimeIntervalButton}\n          onClick={() => {\n            addTimeInterval(defaultTimeInterval);\n          }}\n          icon=\"plus\"\n        >\n          Add another time interval\n        </Button>\n      </>\n    </FieldSet>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  timeIntervalLegend: css`\n    legend {\n      font-size: 1.25rem;\n    }\n  `,\n  timeIntervalSection: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  removeTimeIntervalButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { Alert, Field, FieldSet, Input, Button, LinkButton, useStyles2 } from '@grafana/ui';\nimport {\n  AlertmanagerConfig,\n  AlertManagerCortexConfig,\n  MuteTimeInterval,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { renameMuteTimings } from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { createMuteTiming, defaultTimeInterval } from '../../utils/mute-timings';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\n\nimport { MuteTimingTimeInterval } from './MuteTimingTimeInterval';\n\ninterface Props {\n  muteTiming?: MuteTimeInterval;\n  showError?: boolean;\n  provenance?: string;\n}\n\nconst useDefaultValues = (muteTiming?: MuteTimeInterval): MuteTimingFields => {\n  return useMemo(() => {\n    const defaultValues = {\n      name: '',\n      time_intervals: [defaultTimeInterval],\n    };\n\n    if (!muteTiming) {\n      return defaultValues;\n    }\n\n    const intervals = muteTiming.time_intervals.map((interval) => ({\n      times: interval.times ?? defaultTimeInterval.times,\n      weekdays: interval?.weekdays?.join(', ') ?? defaultTimeInterval.weekdays,\n      days_of_month: interval?.days_of_month?.join(', ') ?? defaultTimeInterval.days_of_month,\n      months: interval?.months?.join(', ') ?? defaultTimeInterval.months,\n      years: interval?.years?.join(', ') ?? defaultTimeInterval.years,\n    }));\n\n    return {\n      name: muteTiming.name,\n      time_intervals: intervals,\n    };\n  }, [muteTiming]);\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'sitemap',\n  breadcrumbs: [{ title: 'Notification Policies', url: 'alerting/routes' }],\n};\n\nconst MuteTimingForm = ({ muteTiming, showError, provenance }: Props) => {\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const styles = useStyles2(getStyles);\n\n  const defaultAmCortexConfig = { alertmanager_config: {}, template_files: {} };\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const { result = defaultAmCortexConfig, loading } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n  const defaultValues = useDefaultValues(muteTiming);\n  const formApi = useForm({ defaultValues });\n\n  const onSubmit = (values: MuteTimingFields) => {\n    const newMuteTiming = createMuteTiming(values);\n\n    const muteTimings = muteTiming\n      ? config?.mute_time_intervals?.filter(({ name }) => name !== muteTiming.name)\n      : config.mute_time_intervals;\n\n    const newConfig: AlertManagerCortexConfig = {\n      ...result,\n      alertmanager_config: {\n        ...config,\n        route:\n          muteTiming && newMuteTiming.name !== muteTiming.name\n            ? renameMuteTimings(newMuteTiming.name, muteTiming.name, config.route ?? {})\n            : config.route,\n        mute_time_intervals: [...(muteTimings || []), newMuteTiming],\n      },\n    };\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig,\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Mute timing saved',\n        redirectPath: '/alerting/routes/',\n      })\n    );\n  };\n\n  return (\n    <AlertingPageWrapper\n      pageId=\"am-routes\"\n      pageNav={{\n        ...defaultPageNav,\n        id: muteTiming ? 'alert-policy-edit' : 'alert-policy-new',\n        text: muteTiming ? 'Edit mute timing' : 'New mute timing',\n      }}\n    >\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        disabled\n        dataSources={alertManagers}\n      />\n      {provenance && <ProvisioningAlert resource={ProvisionedResource.MuteTiming} />}\n      {result && !loading && (\n        <FormProvider {...formApi}>\n          <form onSubmit={formApi.handleSubmit(onSubmit)} data-testid=\"mute-timing-form\">\n            {showError && <Alert title=\"No matching mute timing found\" />}\n            <FieldSet label={'Create mute timing'} disabled={Boolean(provenance)}>\n              <Field\n                required\n                label=\"Name\"\n                description=\"A unique name for the mute timing\"\n                invalid={!!formApi.formState.errors?.name}\n                error={formApi.formState.errors.name?.message}\n              >\n                <Input\n                  {...formApi.register('name', {\n                    required: true,\n                    validate: (value) => {\n                      if (!muteTiming) {\n                        const existingMuteTiming = config?.mute_time_intervals?.find(({ name }) => value === name);\n                        return existingMuteTiming ? `Mute timing already exists for \"${value}\"` : true;\n                      }\n                      return value.length > 0 || 'Name is required';\n                    },\n                  })}\n                  className={styles.input}\n                  data-testid={'mute-timing-name'}\n                />\n              </Field>\n              <MuteTimingTimeInterval />\n              <LinkButton\n                type=\"button\"\n                variant=\"secondary\"\n                href={makeAMLink('/alerting/routes/', alertManagerSourceName)}\n              >\n                Cancel\n              </LinkButton>\n              <Button type=\"submit\" className={styles.submitButton}>\n                {muteTiming ? 'Save' : 'Submit'}\n              </Button>\n            </FieldSet>\n          </form>\n        </FormProvider>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  submitButton: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n\nexport default MuteTimingForm;\n","import React, { useCallback, useEffect } from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport MuteTimingForm from './components/amroutes/MuteTimingForm';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction } from './state/actions';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst MuteTimings = () => {\n  const [queryParams] = useQueryParams();\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const { result, error, loading } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n\n  const getMuteTimingByName = useCallback(\n    (id: string): MuteTimeInterval | undefined => {\n      const timing = config?.mute_time_intervals?.find(({ name }: MuteTimeInterval) => name === id);\n\n      if (timing) {\n        const provenance = (config?.muteTimeProvenances ?? {})[timing.name];\n\n        return {\n          ...timing,\n          provenance,\n        };\n      }\n\n      return timing;\n    },\n    [config]\n  );\n\n  return (\n    <>\n      {loading && <LoadingPlaceholder text=\"Loading mute timing\" />}\n      {error && !loading && (\n        <Alert severity=\"error\" title={`Error loading Alertmanager config for ${alertManagerSourceName}`}>\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/routes/mute-timing/new\">\n            <MuteTimingForm />\n          </Route>\n          <Route exact path=\"/alerting/routes/mute-timing/edit\">\n            {() => {\n              if (queryParams['muteName']) {\n                const muteTiming = getMuteTimingByName(String(queryParams['muteName']));\n                const provenance = muteTiming?.provenance;\n\n                return <MuteTimingForm muteTiming={muteTiming} showError={!muteTiming} provenance={provenance} />;\n              }\n              return <Redirect to=\"/alerting/routes\" />;\n            }}\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n};\n\nexport default MuteTimings;\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n"],"names":["DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","times","start_time","end_time","weekdays","days_of_month","months","years","validateArrayField","value","validateValue","invalidText","split","map","x","trim","every","entry","convertStringToArray","str","s","undefined","MuteTimingTimeRange","intervalIndex","styles","useStyles2","getStyles","register","formState","useFormContext","fields","timeRanges","append","addTimeRange","remove","removeTimeRange","useFieldArray","name","validateTime","timeString","hour","minutes","parseInt","formErrors","errors","time_intervals","timeRangeInvalid","some","Field","className","field","label","description","invalid","error","timeRange","index","InlineFieldRow","InlineField","Input","I","validate","timeRangeInput","defaultValue","placeholder","IconButton","deleteTimeRange","title","type","onClick","e","preventDefault","id","Button","variant","icon","theme","css","spacing","MuteTimingTimeInterval","timeIntervals","addTimeInterval","removeTimeInterval","FieldSet","timeIntervalLegend","timeInterval","timeIntervalIndex","timeIntervalSection","message","day","includes","toLowerCase","input","parsedDay","month","year","test","removeTimeIntervalButton","colors","background","secondary","defaultPageNav","breadcrumbs","url","submitButton","muteTiming","showError","provenance","dispatch","useDispatch","alertManagers","useAlertManagersByPermission","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","defaultAmCortexConfig","alertmanager_config","template_files","amConfigs","useUnifiedAlertingSelector","state","result","loading","initialAsyncRequestState","config","defaultValues","useMemo","intervals","interval","join","useDefaultValues","formApi","useForm","AlertingPageWrapper","pageId","pageNav","text","AlertManagerPicker","current","onChange","disabled","dataSources","Provisioning","resource","ProvisionedResource","onSubmit","handleSubmit","values","newMuteTiming","filter","v","omitBy","isUndefined","createMuteTiming","muteTimings","mute_time_intervals","newConfig","route","renameMuteTimings","updateAlertManagerConfigAction","oldConfig","successMessage","redirectPath","Alert","Boolean","required","find","length","href","makeAMLink","queryParams","useQueryParams","fetchConfig","useCallback","fetchAlertManagerConfigAction","useEffect","getMuteTimingByName","timing","muteTimeProvenances","LoadingPlaceholder","severity","exact","path","String","to","children","isLoading","navId","ProvisioningAlert","ProvisioningBadge","color","availableAlertManagers","updateQueryParams","isAlertManagerAvailable","alertManagerName","am","useIsAlertManagerAvailable","update","GRAFANA_RULES_SOURCE_NAME","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","accessType","getAlertManagerDataSourcesByPermission"],"sourceRoot":""}