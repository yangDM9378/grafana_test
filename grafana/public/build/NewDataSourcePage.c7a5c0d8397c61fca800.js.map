{"version":3,"file":"NewDataSourcePage.c7a5c0d8397c61fca800.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx","webpack://grafana/./public/app/features/datasources/pages/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\nexport function PluginsErrorsInfo() {\n  const errors = useGetErrors();\n  const { isLoading } = useFetchStatus();\n  const styles = useStyles2(getStyles);\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={styles.list}\n          renderItem={(error) => (\n            <div className={styles.wrapper}>\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{error.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                  className={styles.badge}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n      </div>\n    </InfoBox>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      listStyleType: 'circle',\n    }),\n    wrapper: css({\n      marginTop: theme.spacing(1),\n    }),\n    badge: css({\n      marginTop: 0,\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            icon=\"external-link-alt\"\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target=\"_blank\"\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css`\n        > li {\n          margin-bottom: 2px;\n        }\n      `}\n    />\n  );\n}\n","import React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className=\"add-data-source-category\" key={id}>\n          <div className=\"add-data-source-category__header\" id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className=\"add-data-source-more\">\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Find more data source plugins on grafana.com\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { AnyAction } from 'redux';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n  useDataSourcesRoutes,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoading = useSelector((s: StoreState) => s.dataSources.isLoadingDataSources);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoading}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => AnyAction;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput value={searchQuery} onChange={onSetSearchQuery} placeholder=\"Filter by name or type\" />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={dataSourcesRoutes.List} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          Cancel\n        </LinkButton>\n      </div>\n\n      {/* Show any plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { NewDataSource } from '../components/NewDataSource';\nimport { DATASOURCES_ROUTES } from '../constants';\n\nexport function NewDataSourcePage() {\n  const pageNav: NavModelItem = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    url: DATASOURCES_ROUTES.New,\n    subTitle: 'Choose a data source type',\n  };\n\n  return (\n    <Page navId=\"datasources\" pageNav={pageNav}>\n      <Page.Contents>\n        <NewDataSource />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default NewDataSourcePage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings, NavModelItem, urlUtil } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(testDataSource(uid));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl('/explore', { left: exploreState });\n\n  return exploreUrl;\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${dataSourceId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginErrorCode, unEscapeStringFromRegex } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(unEscapeStringFromRegex(searchBy).toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\n\nimport { PluginError } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters } from '../helpers';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall } from './actions';\nimport { setDisplayMode } from './reducer';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n} from './selectors';\n\ntype Filters = {\n  query?: string; // Note: this will be an escaped regex string as it comes from `FilterInput`\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors);\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["PluginsErrorsInfo","errors","useGetErrors","isLoading","useFetchStatus","styles","useStyles2","getStyles","length","InfoBox","selectors","severity","urlTitle","url","List","items","className","list","renderItem","error","wrapper","spacing","justify","align","pluginId","PluginSignatureBadge","status","mapPluginErrorCodeToSignatureStatus","errorCode","badge","code","PluginErrorCode","PluginSignatureStatus","theme","css","listStyleType","marginTop","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","module","isClickable","unlicensed","learnMoreLink","info","links","Card","cx","card","heading","e2eSelectors","name","figure","logo","src","logos","small","alt","description","meta","signature","actions","href","icon","e","stopPropagation","rel","target","variant","fontSize","v1","typography","h5","fontWeight","width","marginRight","position","margin","size","sm","alignSelf","opacity","gridTemplateAreas","lg","marginLeft","maxHeight","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","getItemKey","item","id","toString","DataSourceCategories","categories","map","title","plugins","NewDataSource","useLoadDataSourcePlugins","dispatch","useDispatch","filteredDataSources","useSelector","s","getFilteredDataSourcePlugins","dataSources","searchQuery","dataSourceTypeSearchQuery","isLoadingDataSources","dataSourceCategories","onAddDataSource","useAddDatasource","NewDataSourceView","onSetSearchQuery","q","setDataSourceTypeSearchQuery","dataSourcesRoutes","useDataSourcesRoutes","PageLoader","FilterInput","value","onChange","placeholder","fill","NewDataSourcePage","pageNav","text","DATASOURCES_ROUTES","subTitle","navId","DataSourcesRoutesContext","createContext","useInitDataSourceSettings","uid","useEffect","initDataSourceSettings","cleanUpAction","cleanupAction","state","dataSourceSettings","initialDataSourceSettingsState","useTestDataSource","testDataSource","useLoadDataSources","loadDataSources","useLoadDataSource","loadDataSource","loadDataSourcePlugins","plugin","addDataSource","Edit","useUpdateDatasource","async","updateDataSource","dataSource","useDeleteLoadedDataSource","appEvents","ShowConfirmModalEvent","yesText","onConfirm","deleteLoadedDataSource","useDataSource","getDataSource","useDataSourceExploreUrl","exploreState","JSON","stringify","datasource","context","urlUtil","left","useDataSourceMeta","pluginType","getDataSourceMeta","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","main","getNavModel","getDataSourceLoadingNav","getDataSourceNav","buildNavModel","useDataSourceRights","readOnly","hasWriteRights","contextSrv","AccessControlAction","hasDeleteRights","useContext","selectRoot","selectItems","createSelector","selectDisplayMode","settings","displayMode","selectAll","selectById","pluginsAdapter","findByInstallAndType","filterBy","filterByType","filter","isInstalled","isCore","selectInstalled","type","find","searchBy","fields","push","toLowerCase","orgName","some","f","includes","unEscapeStringFromRegex","findByKeyword","filteredPlugins","searchedPlugins","selectPluginErrors","p","Boolean","selectRequest","actionType","requests","selectIsRequestPending","request","RequestStatus","selectRequestError","useGetAllWithFilters","query","sortBy","Sorters","useFetchAll","filtered","sortPlugins","useGetSingle","useFetchDetails","useInstall","version","isUpdating","install","useUninstall","uninstall","useIsRemotePluginsAvailable","fetchRemotePlugins","fetchAll","useFetchDetailsStatus","fetchDetails","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","undefined","shouldFetch","details","useDisplayMode","setDisplayMode","v"],"sourceRoot":""}