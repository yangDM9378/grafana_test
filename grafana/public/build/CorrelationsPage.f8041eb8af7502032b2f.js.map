{"version":3,"file":"CorrelationsPage.f8041eb8af7502032b2f.js","mappings":"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","sources":["webpack://grafana/./public/app/core/utils/types.ts","webpack://grafana/./public/app/features/correlations/Forms/QueryEditorField.tsx","webpack://grafana/./public/app/features/correlations/Forms/CorrelationDetailsFormPart.tsx","webpack://grafana/./public/app/features/correlations/Forms/AddCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/EditCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/components/EmptyCorrelationsCTA.tsx","webpack://grafana/./public/app/features/correlations/components/Table/ExpanderCell.tsx","webpack://grafana/./public/app/features/correlations/components/Table/utils.ts","webpack://grafana/./public/app/features/correlations/components/Table/index.tsx","webpack://grafana/./public/app/features/correlations/CorrelationsPage.tsx","webpack://grafana/./public/app/features/correlations/useCorrelations.ts"],"sourcesContent":["type Truthy<T> = T extends false | '' | 0 | null | undefined ? never : T;\n\nexport const isTruthy = <T>(value: T): value is Truthy<T> => Boolean(value);\n","import React from 'react';\nimport { Controller } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Field, LoadingPlaceholder, Alert } from '@grafana/ui';\n\ninterface Props {\n  dsUid?: string;\n  name: string;\n  invalid?: boolean;\n  error?: string;\n}\n\nexport const QueryEditorField = ({ dsUid, invalid, error, name }: Props) => {\n  const {\n    value: datasource,\n    loading: dsLoading,\n    error: dsError,\n  } = useAsync(async () => {\n    if (!dsUid) {\n      return;\n    }\n    return getDataSourceSrv().get(dsUid);\n  }, [dsUid]);\n  const QueryEditor = datasource?.components?.QueryEditor;\n\n  return (\n    <Field label=\"Query\" invalid={invalid} error={error}>\n      <Controller\n        name={name}\n        rules={{\n          validate: {\n            hasQueryEditor: () =>\n              QueryEditor !== undefined || 'The selected target data source must export a query editor.',\n          },\n        }}\n        render={({ field: { value, onChange } }) => {\n          if (dsLoading) {\n            return <LoadingPlaceholder text=\"Loading query editor...\" />;\n          }\n          if (dsError) {\n            return <Alert title=\"Error loading data source\">The selected data source could not be loaded.</Alert>;\n          }\n          if (!datasource) {\n            return (\n              <Alert title=\"No data source selected\" severity=\"info\">\n                Please select a target data source first.\n              </Alert>\n            );\n          }\n          if (!QueryEditor) {\n            return <Alert title=\"Data source does not export a query editor.\"></Alert>;\n          }\n\n          return <QueryEditor onRunQuery={() => {}} onChange={onChange} datasource={datasource} query={value} />;\n        }}\n      />\n    </Field>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { Correlation } from '../types';\n\nimport { QueryEditorField } from './QueryEditorField';\nimport { FormDTO } from './types';\n\nconst getInputId = (inputName: string, correlation?: CorrelationBaseData) => {\n  if (!correlation) {\n    return inputName;\n  }\n\n  return `${inputName}_${correlation.sourceUID}-${correlation.uid}`;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  label: css`\n    max-width: ${theme.spacing(32)};\n  `,\n  description: css`\n    max-width: ${theme.spacing(80)};\n  `,\n});\n\ntype CorrelationBaseData = Pick<Correlation, 'uid' | 'sourceUID' | 'targetUID'>;\ninterface Props {\n  readOnly?: boolean;\n  correlation?: CorrelationBaseData;\n}\n\nexport function CorrelationDetailsFormPart({ readOnly = false, correlation }: Props) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<FormDTO>();\n  const targetUID: string | undefined = useWatch({ name: 'targetUID' }) || correlation?.targetUID;\n\n  return (\n    <>\n      <input type=\"hidden\" {...register('config.type')} />\n\n      <Field label=\"Label\" className={styles.label}>\n        <Input\n          id={getInputId('label', correlation)}\n          {...register('label')}\n          readOnly={readOnly}\n          placeholder=\"i.e. Tempo traces\"\n        />\n      </Field>\n\n      <Field\n        label=\"Description\"\n        // the Field component automatically adds margin to itself, so we are forced to workaround it by overriding  its styles\n        className={cx(styles.description)}\n      >\n        <TextArea id={getInputId('description', correlation)} {...register('description')} readOnly={readOnly} />\n      </Field>\n\n      <Field\n        label=\"Target field\"\n        className={styles.label}\n        invalid={!!errors?.config?.field}\n        error={errors?.config?.field?.message}\n      >\n        <Input\n          id={getInputId('field', correlation)}\n          {...register('config.field', { required: 'This field is required.' })}\n          readOnly={readOnly}\n        />\n      </Field>\n\n      <QueryEditorField\n        name=\"config.target\"\n        dsUid={targetUID}\n        invalid={!!errors?.config?.target}\n        // @ts-expect-error react-hook-form's errors do not work well with object types\n        error={errors?.config?.target?.message}\n      />\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, Field, HorizontalGroup, PanelContainer, useStyles2 } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { useCorrelations } from '../useCorrelations';\n\nimport { CorrelationDetailsFormPart } from './CorrelationDetailsFormPart';\nimport { FormDTO } from './types';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelContainer: css`\n    position: relative;\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  linksToContainer: css`\n    flex-grow: 1;\n    /* This is the width of the textarea minus the sum of the label&description fields,\n     * so that this element takes exactly the remaining space and the inputs will be\n     * nicely aligned with the textarea\n    **/\n    max-width: ${theme.spacing(80 - 64)};\n    margin-top: ${theme.spacing(3)};\n    text-align: right;\n    padding-right: ${theme.spacing(1)};\n  `,\n  // we can't use HorizontalGroup because it wraps elements in divs and sets margins on them\n  horizontalGroup: css`\n    display: flex;\n  `,\n});\n\ninterface Props {\n  onClose: () => void;\n  onCreated: () => void;\n}\n\nconst withDsUID = (fn: Function) => (ds: DataSourceInstanceSettings) => fn(ds.uid);\n\nexport const AddCorrelationForm = ({ onClose, onCreated }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    create: { execute, loading, error, value },\n  } = useCorrelations();\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onCreated();\n    }\n  }, [error, loading, value, onCreated]);\n\n  const methods = useForm<FormDTO>({ defaultValues: { config: { type: 'query', target: {} } } });\n\n  return (\n    <PanelContainer className={styles.panelContainer}>\n      <CloseButton onClick={onClose} />\n      <FormProvider {...methods}>\n        <form onSubmit={methods.handleSubmit(execute)}>\n          <div className={styles.horizontalGroup}>\n            <Controller\n              control={methods.control}\n              name=\"sourceUID\"\n              rules={{\n                required: { value: true, message: 'This field is required.' },\n                validate: {\n                  writable: (uid: string) =>\n                    !getDatasourceSrv().getInstanceSettings(uid)?.readOnly ||\n                    \"Source can't be a read-only data source.\",\n                },\n              }}\n              render={({ field: { onChange, value } }) => (\n                <Field\n                  label=\"Source\"\n                  htmlFor=\"source\"\n                  invalid={!!methods.formState.errors.sourceUID}\n                  error={methods.formState.errors.sourceUID?.message}\n                >\n                  <DataSourcePicker\n                    onChange={withDsUID(onChange)}\n                    noDefault\n                    current={value}\n                    inputId=\"source\"\n                    width={32}\n                  />\n                </Field>\n              )}\n            />\n            <div className={styles.linksToContainer}>Links to</div>\n            <Controller\n              control={methods.control}\n              name=\"targetUID\"\n              rules={{ required: { value: true, message: 'This field is required.' } }}\n              render={({ field: { onChange, value } }) => (\n                <Field\n                  label=\"Target\"\n                  htmlFor=\"target\"\n                  invalid={!!methods.formState.errors.targetUID}\n                  error={methods.formState.errors.targetUID?.message}\n                >\n                  <DataSourcePicker\n                    onChange={withDsUID(onChange)}\n                    noDefault\n                    current={value}\n                    inputId=\"target\"\n                    width={32}\n                  />\n                </Field>\n              )}\n            />\n          </div>\n\n          <CorrelationDetailsFormPart />\n\n          <HorizontalGroup justify=\"flex-end\">\n            <Button variant=\"primary\" icon={loading ? 'fa fa-spinner' : 'plus'} type=\"submit\" disabled={loading}>\n              Add\n            </Button>\n          </HorizontalGroup>\n        </form>\n      </FormProvider>\n    </PanelContainer>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { Button, HorizontalGroup } from '@grafana/ui';\n\nimport { Correlation } from '../types';\nimport { useCorrelations } from '../useCorrelations';\n\nimport { CorrelationDetailsFormPart } from './CorrelationDetailsFormPart';\nimport { EditFormDTO } from './types';\n\ninterface Props {\n  onUpdated: () => void;\n  correlation: Correlation;\n  readOnly?: boolean;\n}\n\nexport const EditCorrelationForm = ({ onUpdated, correlation, readOnly = false }: Props) => {\n  const {\n    update: { execute, loading, error, value },\n  } = useCorrelations();\n\n  const onSubmit = (data: EditFormDTO) => {\n    return execute({ ...data, sourceUID: correlation.sourceUID, uid: correlation.uid });\n  };\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onUpdated();\n    }\n  }, [error, loading, value, onUpdated]);\n\n  const { uid, sourceUID, targetUID, ...otherCorrelation } = correlation;\n\n  const methods = useForm<EditFormDTO>({ defaultValues: otherCorrelation });\n\n  return (\n    <FormProvider {...methods}>\n      <form onSubmit={readOnly ? (e) => e.preventDefault() : methods.handleSubmit(onSubmit)}>\n        <CorrelationDetailsFormPart readOnly={readOnly} correlation={correlation} />\n\n        {!readOnly && (\n          <HorizontalGroup justify=\"flex-end\">\n            <Button variant=\"primary\" icon={loading ? 'fa fa-spinner' : 'save'} type=\"submit\" disabled={loading}>\n              Save\n            </Button>\n          </HorizontalGroup>\n        )}\n      </form>\n    </FormProvider>\n  );\n};\n","import React from 'react';\n\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\ninterface Props {\n  onClick?: () => void;\n}\nexport const EmptyCorrelationsCTA = ({ onClick }: Props) => {\n  // TODO: if there are no datasources show a different message\n\n  return (\n    <EmptyListCTA\n      title=\"You haven't defined any correlation yet.\"\n      buttonIcon=\"gf-glue\"\n      onClick={onClick}\n      buttonTitle=\"Add correlation\"\n      proTip=\"you can also define correlations via datasource provisioning\"\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { CellProps } from 'react-table';\n\nimport { IconButton } from '@grafana/ui';\n\nconst expanderContainerStyles = css`\n  display: flex;\n  align-items: center;\n  height: 100%;\n`;\n\nexport function ExpanderCell<K extends object>({ row }: CellProps<K, void>) {\n  return (\n    <div className={expanderContainerStyles}>\n      <IconButton\n        // @ts-expect-error react-table doesn't ship with useExpanded types and we can't use declaration merging without affecting the table viz\n        name={row.isExpanded ? 'angle-down' : 'angle-right'}\n        // @ts-expect-error same as the line above\n        {...row.getToggleRowExpandedProps({})}\n      />\n    </div>\n  );\n}\n","import { uniqueId } from 'lodash';\nimport { Column as RTColumn } from 'react-table';\n\nimport { ExpanderCell } from './ExpanderCell';\n\nimport { Column } from '.';\n\nexport const EXPANDER_CELL_ID = '__expander';\n\ntype InternalColumn<T extends object> = RTColumn<T> & {\n  visible?: (data: T[]) => boolean;\n};\n\n// Returns the columns in a \"react-table\" acceptable format\nexport function getColumns<K extends object>(columns: Array<Column<K>>): Array<InternalColumn<K>> {\n  return [\n    {\n      id: EXPANDER_CELL_ID,\n      Cell: ExpanderCell,\n      disableSortBy: true,\n      width: 0,\n    },\n    // @ts-expect-error react-table expects each column key(id) to have data associated with it and therefore complains about\n    // column.id being possibly undefined and not keyof T (where T is the data object)\n    // We do not want to be that strict as we simply pass undefined to cells that do not have data associated with them.\n    ...columns.map((column) => ({\n      Header: column.header || (() => null),\n      accessor: column.id || uniqueId(),\n      sortType: column.sortType || 'alphanumeric',\n      disableSortBy: !Boolean(column.sortType),\n      width: column.shrink ? 0 : undefined,\n      visible: column.visible,\n      ...(column.cell && { Cell: column.cell }),\n    })),\n  ];\n}\n","import { cx, css } from '@emotion/css';\nimport React, { useMemo, Fragment, ReactNode } from 'react';\nimport {\n  CellProps,\n  SortByFn,\n  useExpanded,\n  useSortBy,\n  useTable,\n  DefaultSortTypes,\n  TableOptions,\n  IdType,\n} from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { isTruthy } from 'app/core/utils/types';\n\nimport { EXPANDER_CELL_ID, getColumns } from './utils';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n    td,\n    th {\n      padding: ${theme.spacing(1)};\n      min-width: ${theme.spacing(3)};\n    }\n  `,\n  evenRow: css`\n    background: ${theme.colors.background.primary};\n  `,\n  shrink: css`\n    width: 0%;\n  `,\n});\n\nexport interface Column<TableData extends object> {\n  /**\n   * ID of the column.\n   * Set this to the matching object key of your data or `undefined` if the column doesn't have any associated data with it.\n   * This must be unique among all other columns.\n   */\n  id?: IdType<TableData>;\n  cell?: (props: CellProps<TableData>) => ReactNode;\n  header?: (() => ReactNode | string) | string;\n  sortType?: DefaultSortTypes | SortByFn<TableData>;\n  shrink?: boolean;\n  visible?: (col: TableData[]) => boolean;\n}\n\ninterface Props<TableData extends object> {\n  columns: Array<Column<TableData>>;\n  data: TableData[];\n  renderExpandedRow?: (row: TableData) => JSX.Element;\n  className?: string;\n  getRowId: TableOptions<TableData>['getRowId'];\n}\n\n/**\n * non-viz table component.\n * Will need most likely to be moved in @grafana/ui\n */\nexport function Table<TableData extends object>({\n  data,\n  className,\n  columns,\n  renderExpandedRow,\n  getRowId,\n}: Props<TableData>) {\n  const styles = useStyles2(getStyles);\n  const tableColumns = useMemo(() => {\n    const cols = getColumns<TableData>(columns);\n    return cols;\n  }, [columns]);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable<TableData>(\n    {\n      columns: tableColumns,\n      data,\n      autoResetExpanded: false,\n      autoResetSortBy: false,\n      getRowId,\n      initialState: {\n        hiddenColumns: [\n          !renderExpandedRow && EXPANDER_CELL_ID,\n          ...tableColumns\n            .filter((col) => !(col.visible?.(data) ?? true))\n            .map((c) => c.id)\n            .filter(isTruthy),\n        ].filter(isTruthy),\n      },\n    },\n    useSortBy,\n    useExpanded\n  );\n  // This should be called only for rows thar we'd want to actually render, which is all at this stage.\n  // We may want to revisit this if we decide to add pagination and/or virtualized tables.\n  rows.forEach(prepareRow);\n\n  return (\n    <table {...getTableProps()} className={cx(styles.table, className)}>\n      <thead>\n        {headerGroups.map((headerGroup) => {\n          const { key, ...headerRowProps } = headerGroup.getHeaderGroupProps();\n\n          return (\n            <tr key={key} {...headerRowProps}>\n              {headerGroup.headers.map((column) => {\n                // TODO: if the column is a function, it should also provide an accessible name as a string to be used a the column title in getSortByToggleProps\n                const { key, ...headerCellProps } = column.getHeaderProps(\n                  column.canSort ? column.getSortByToggleProps() : undefined\n                );\n\n                return (\n                  <th key={key} className={cx(column.width === 0 && styles.shrink)} {...headerCellProps}>\n                    {column.render('Header')}\n\n                    {column.isSorted && <Icon name={column.isSortedDesc ? 'angle-down' : 'angle-up'} />}\n                  </th>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </thead>\n\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, rowIndex) => {\n          const className = cx(rowIndex % 2 === 0 && styles.evenRow);\n          const { key, ...otherRowProps } = row.getRowProps();\n\n          return (\n            <Fragment key={key}>\n              <tr className={className} {...otherRowProps}>\n                {row.cells.map((cell) => {\n                  const { key, ...otherCellProps } = cell.getCellProps();\n                  return (\n                    <td key={key} {...otherCellProps}>\n                      {cell.render('Cell')}\n                    </td>\n                  );\n                })}\n              </tr>\n              {\n                // @ts-expect-error react-table doesn't ship with useExpanded types and we can't use declaration merging without affecting the table viz\n                row.isExpanded && renderExpandedRow && (\n                  <tr className={className} {...otherRowProps}>\n                    <td colSpan={row.cells.length}>{renderExpandedRow(row.original)}</td>\n                  </tr>\n                )\n              }\n            </Fragment>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import { css } from '@emotion/css';\nimport { negate } from 'lodash';\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport { CellProps, SortByFn } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError, reportInteraction } from '@grafana/runtime';\nimport { Badge, Button, DeleteButton, HorizontalGroup, LoadingPlaceholder, useStyles2, Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AccessControlAction } from 'app/types';\n\nimport { AddCorrelationForm } from './Forms/AddCorrelationForm';\nimport { EditCorrelationForm } from './Forms/EditCorrelationForm';\nimport { EmptyCorrelationsCTA } from './components/EmptyCorrelationsCTA';\nimport { Column, Table } from './components/Table';\nimport type { RemoveCorrelationParams } from './types';\nimport { CorrelationData, useCorrelations } from './useCorrelations';\n\nconst sortDatasource: SortByFn<CorrelationData> = (a, b, column) =>\n  a.values[column].name.localeCompare(b.values[column].name);\n\nconst isSourceReadOnly = ({ source }: Pick<CorrelationData, 'source'>) => source.readOnly;\n\nconst loaderWrapper = css`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function CorrelationsPage() {\n  const navModel = useNavModel('correlations');\n  const [isAdding, setIsAdding] = useState(false);\n  const {\n    remove,\n    get: { execute: fetchCorrelations, ...get },\n  } = useCorrelations();\n\n  useEffect(() => {\n    fetchCorrelations();\n    // we only want to fetch data on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const canWriteCorrelations = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  const handleAdded = useCallback(() => {\n    reportInteraction('grafana_correlations_added');\n    fetchCorrelations();\n    setIsAdding(false);\n  }, [fetchCorrelations]);\n\n  const handleUpdated = useCallback(() => {\n    reportInteraction('grafana_correlations_edited');\n    fetchCorrelations();\n  }, [fetchCorrelations]);\n\n  const handleDelete = useCallback(\n    (params: RemoveCorrelationParams) => {\n      remove.execute(params);\n    },\n    [remove]\n  );\n\n  // onDelete - triggers when deleting a correlation\n  useEffect(() => {\n    if (remove.value) {\n      reportInteraction('grafana_correlations_deleted');\n    }\n  }, [remove.value]);\n\n  useEffect(() => {\n    if (!remove.error && !remove.loading && remove.value) {\n      fetchCorrelations();\n    }\n  }, [remove.error, remove.loading, remove.value, fetchCorrelations]);\n\n  const RowActions = useCallback(\n    ({\n      row: {\n        original: {\n          source: { uid: sourceUID, readOnly },\n          uid,\n        },\n      },\n    }: CellProps<CorrelationData, void>) =>\n      !readOnly && (\n        <DeleteButton\n          aria-label=\"delete correlation\"\n          onConfirm={() => handleDelete({ sourceUID, uid })}\n          closeOnConfirm\n        />\n      ),\n    [handleDelete]\n  );\n\n  const columns = useMemo<Array<Column<CorrelationData>>>(\n    () => [\n      {\n        cell: InfoCell,\n        shrink: true,\n        visible: (data) => data.some(isSourceReadOnly),\n      },\n      {\n        id: 'source',\n        header: 'Source',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      {\n        id: 'target',\n        header: 'Target',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      { id: 'label', header: 'Label', sortType: 'alphanumeric' },\n      {\n        cell: RowActions,\n        shrink: true,\n        visible: (data) => canWriteCorrelations && data.some(negate(isSourceReadOnly)),\n      },\n    ],\n    [RowActions, canWriteCorrelations]\n  );\n\n  const data = useMemo(() => get.value, [get.value]);\n\n  const showEmptyListCTA = data?.length === 0 && !isAdding && !get.error;\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div>\n          <HorizontalGroup justify=\"space-between\">\n            <div>\n              <h4>Correlations</h4>\n              <p>Define how data living in different data sources relates to each other.</p>\n            </div>\n            {canWriteCorrelations && data?.length !== 0 && data !== undefined && !isAdding && (\n              <Button icon=\"plus\" onClick={() => setIsAdding(true)}>\n                Add new\n              </Button>\n            )}\n          </HorizontalGroup>\n        </div>\n\n        <div>\n          {!data && get.loading && (\n            <div className={loaderWrapper}>\n              <LoadingPlaceholder text=\"loading...\" />\n            </div>\n          )}\n\n          {showEmptyListCTA && <EmptyCorrelationsCTA onClick={() => setIsAdding(true)} />}\n\n          {\n            // This error is not actionable, it'd be nice to have a recovery button\n            get.error && (\n              <Alert severity=\"error\" title=\"Error fetching correlation data\" topSpacing={2}>\n                {(isFetchError(get.error) && get.error.data?.message) ||\n                  'An unknown error occurred while fetching correlation data. Please try again.'}\n              </Alert>\n            )\n          }\n\n          {isAdding && <AddCorrelationForm onClose={() => setIsAdding(false)} onCreated={handleAdded} />}\n\n          {data && data.length >= 1 && (\n            <Table\n              renderExpandedRow={(correlation) => (\n                <ExpendedRow\n                  correlation={correlation}\n                  onUpdated={handleUpdated}\n                  readOnly={isSourceReadOnly({ source: correlation.source }) || !canWriteCorrelations}\n                />\n              )}\n              columns={columns}\n              data={data}\n              getRowId={(correlation) => `${correlation.source.uid}-${correlation.uid}`}\n            />\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ninterface ExpandedRowProps {\n  correlation: CorrelationData;\n  readOnly: boolean;\n  onUpdated: () => void;\n}\nfunction ExpendedRow({ correlation: { source, target, ...correlation }, readOnly, onUpdated }: ExpandedRowProps) {\n  useEffect(\n    () => reportInteraction('grafana_correlations_details_expanded'),\n    // we only want to fire this on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <EditCorrelationForm\n      correlation={{ ...correlation, sourceUID: source.uid, targetUID: target.uid }}\n      onUpdated={onUpdated}\n      readOnly={readOnly}\n    />\n  );\n}\n\nconst getDatasourceCellStyles = (theme: GrafanaTheme2) => ({\n  root: css`\n    display: flex;\n    align-items: center;\n  `,\n  dsLogo: css`\n    margin-right: ${theme.spacing()};\n    height: 16px;\n    width: 16px;\n  `,\n});\n\nconst DataSourceCell = memo(\n  function DataSourceCell({\n    cell: { value },\n  }: CellProps<CorrelationData, CorrelationData['source'] | CorrelationData['target']>) {\n    const styles = useStyles2(getDatasourceCellStyles);\n\n    return (\n      <span className={styles.root}>\n        <img src={value.meta.info.logos.small} alt=\"\" className={styles.dsLogo} />\n        {value.name}\n      </span>\n    );\n  },\n  ({ cell: { value } }, { cell: { value: prevValue } }) => {\n    return value.type === prevValue.type && value.name === prevValue.name;\n  }\n);\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst InfoCell = memo(\n  function InfoCell({ ...props }: CellProps<CorrelationData, void>) {\n    const readOnly = props.row.original.source.readOnly;\n\n    if (readOnly) {\n      return <Badge text=\"Read only\" color=\"purple\" className={noWrap} />;\n    } else {\n      return null;\n    }\n  },\n  (props, prevProps) => props.row.original.source.readOnly === prevProps.row.original.source.readOnly\n);\n","import { useAsyncFn } from 'react-use';\nimport { lastValueFrom } from 'rxjs';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { getDataSourceSrv, FetchResponse } from '@grafana/runtime';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\n\nimport { Correlation, CreateCorrelationParams, RemoveCorrelationParams, UpdateCorrelationParams } from './types';\n\nexport interface CorrelationData extends Omit<Correlation, 'sourceUID' | 'targetUID'> {\n  source: DataSourceInstanceSettings;\n  target: DataSourceInstanceSettings;\n}\n\nconst toEnrichedCorrelationData = ({ sourceUID, targetUID, ...correlation }: Correlation): CorrelationData => ({\n  ...correlation,\n  source: getDataSourceSrv().getInstanceSettings(sourceUID)!,\n  target: getDataSourceSrv().getInstanceSettings(targetUID)!,\n});\n\nconst toEnrichedCorrelationsData = (correlations: Correlation[]) => correlations.map(toEnrichedCorrelationData);\nfunction getData<T>(response: FetchResponse<T>) {\n  return response.data;\n}\n\n/**\n * hook for managing correlations data.\n * TODO: ideally this hook shouldn't have any side effect like showing notifications on error\n * and let consumers handle them. It works nicely with the correlations settings page, but when we'll\n * expose this we'll have to remove those side effects.\n */\nexport const useCorrelations = () => {\n  const { backend } = useGrafana();\n\n  const [getInfo, get] = useAsyncFn<() => Promise<CorrelationData[]>>(\n    () =>\n      lastValueFrom(\n        backend.fetch<Correlation[]>({ url: '/api/datasources/correlations', method: 'GET', showErrorAlert: false })\n      )\n        .then(getData)\n        .then(toEnrichedCorrelationsData),\n    [backend]\n  );\n\n  const [createInfo, create] = useAsyncFn<(params: CreateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, ...correlation }) =>\n      backend.post(`/api/datasources/uid/${sourceUID}/correlations`, correlation).then(toEnrichedCorrelationData),\n    [backend]\n  );\n\n  const [removeInfo, remove] = useAsyncFn<(params: RemoveCorrelationParams) => Promise<{ message: string }>>(\n    ({ sourceUID, uid }) => backend.delete(`/api/datasources/uid/${sourceUID}/correlations/${uid}`),\n    [backend]\n  );\n\n  const [updateInfo, update] = useAsyncFn<(params: UpdateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, uid, ...correlation }) =>\n      backend\n        .patch(`/api/datasources/uid/${sourceUID}/correlations/${uid}`, correlation)\n        .then(toEnrichedCorrelationData),\n    [backend]\n  );\n\n  return {\n    create: {\n      execute: create,\n      ...createInfo,\n    },\n    update: {\n      execute: update,\n      ...updateInfo,\n    },\n    get: {\n      execute: get,\n      ...getInfo,\n    },\n    remove: {\n      execute: remove,\n      ...removeInfo,\n    },\n  };\n};\n"],"names":["isTruthy","value","Boolean","QueryEditorField","dsUid","invalid","error","name","datasource","loading","dsLoading","dsError","useAsync","async","getDataSourceSrv","get","QueryEditor","components","Field","label","rules","validate","hasQueryEditor","undefined","render","field","onChange","LoadingPlaceholder","text","Alert","title","onRunQuery","query","severity","getInputId","inputName","correlation","sourceUID","uid","getStyles","theme","css","spacing","description","CorrelationDetailsFormPart","readOnly","styles","useStyles2","register","formState","errors","useFormContext","targetUID","useWatch","type","className","Input","I","id","placeholder","cx","TextArea","config","message","required","target","panelContainer","linksToContainer","horizontalGroup","withDsUID","fn","ds","AddCorrelationForm","onClose","onCreated","create","execute","useCorrelations","useEffect","methods","useForm","defaultValues","PanelContainer","CloseButton","onClick","onSubmit","handleSubmit","control","writable","getDatasourceSrv","getInstanceSettings","htmlFor","DataSourcePicker","noDefault","current","inputId","width","justify","Button","variant","icon","disabled","EditCorrelationForm","onUpdated","update","otherCorrelation","e","preventDefault","data","EmptyCorrelationsCTA","EmptyListCTA","buttonIcon","buttonTitle","proTip","expanderContainerStyles","ExpanderCell","row","IconButton","isExpanded","getToggleRowExpandedProps","EXPANDER_CELL_ID","table","shape","borderRadius","colors","border","weak","background","secondary","evenRow","primary","shrink","Table","columns","renderExpandedRow","getRowId","tableColumns","useMemo","cols","Cell","disableSortBy","map","column","Header","header","accessor","uniqueId","sortType","visible","cell","getColumns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useTable","autoResetExpanded","autoResetSortBy","initialState","hiddenColumns","filter","col","c","useSortBy","useExpanded","forEach","headerGroup","getHeaderGroupProps","key","headerRowProps","headers","getHeaderProps","canSort","getSortByToggleProps","headerCellProps","isSorted","Icon","isSortedDesc","rowIndex","getRowProps","otherRowProps","Fragment","cells","getCellProps","otherCellProps","colSpan","length","original","sortDatasource","a","b","values","localeCompare","isSourceReadOnly","source","loaderWrapper","CorrelationsPage","navModel","useNavModel","isAdding","setIsAdding","useState","remove","fetchCorrelations","canWriteCorrelations","contextSrv","AccessControlAction","handleAdded","useCallback","reportInteraction","handleUpdated","handleDelete","params","RowActions","DeleteButton","onConfirm","closeOnConfirm","InfoCell","some","DataSourceCell","negate","showEmptyListCTA","Page","topSpacing","isFetchError","ExpendedRow","getDatasourceCellStyles","root","dsLogo","memo","src","meta","info","logos","small","alt","prevValue","noWrap","Badge","color","props","prevProps","toEnrichedCorrelationData","toEnrichedCorrelationsData","correlations","getData","response","backend","useGrafana","getInfo","useAsyncFn","lastValueFrom","fetch","url","method","showErrorAlert","then","createInfo","post","removeInfo","delete","updateInfo","patch"],"sourceRoot":""}