{"version":3,"file":"lokiPlugin.26df0c80747251c1d867.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderExplained.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/LokiQueryCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPattern.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/components/QueryPatternsModal.tsx","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/loki/components/LokiQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/MaxLinesField.tsx","webpack://grafana/./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/loki/module.ts"],"sourcesContent":["import { shuffle } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport LokiLanguageProvider from '../LanguageProvider';\nimport { LokiQuery } from '../types';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, keeps logs that contain the substring \"metrics\", and then parses and filters the logs further.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps<LokiQuery>, { userExamples: string[] }> {\n  declare userLabelTimer: ReturnType<typeof setTimeout>;\n  state = {\n    userExamples: [],\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n    reportInteraction('grafana_loki_cheatsheet_opened', {});\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n    const onClick = (query: LokiQuery) => {\n      onClickExample(query);\n      reportInteraction('grafana_loki_cheatsheet_example_clicked', {});\n    };\n\n    return (\n      <div className=\"cheat-sheet-item__example\" key={expr} onClick={(e) => onClick({ refId: 'A', expr })}>\n        <code>{expr}</code>\n      </div>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">\n            Start by selecting a log stream from the Label browser, or alternatively you can write a stream selector\n            into the query field.\n          </div>\n          {hasUserExamples ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here is an example of a log stream:</div>\n              {this.renderExpression(DEFAULT_EXAMPLES[0])}\n            </div>\n          )}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { uniqBy } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { QueryBuilderLabelFilter } from './types';\n\nexport interface Props {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n  invalidLabel?: boolean;\n  invalidValue?: boolean;\n}\n\nexport function LabelFilterItem({\n  item,\n  defaultOp,\n  onChange,\n  onDelete,\n  onGetLabelNames,\n  onGetLabelValues,\n  invalidLabel,\n  invalidValue,\n}: Props) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n\n  const isMultiSelect = (operator = item.op) => {\n    return operators.find((op) => op.label === operator)?.isMultiValue;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const getOptions = (): SelectableValue[] => {\n    const labelValues = state.labelValues ? [...state.labelValues] : [];\n    const selectedOptions = getSelectOptionsFromString(item?.value).map(toOption);\n\n    // Remove possible duplicated values\n    return uniqBy([...selectedOptions, ...labelValues], 'value');\n  };\n\n  return (\n    <div data-testid=\"prometheus-dimensions-filter-item\">\n      <InputGroup>\n        <Select\n          placeholder=\"Select label\"\n          aria-label={selectors.components.QueryBuilder.labelSelect}\n          inputId=\"prometheus-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={item.label ? toOption(item.label) : null}\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelNames: true });\n            const labelNames = await onGetLabelNames(item);\n            setState({ labelNames, isLoadingLabelNames: undefined });\n          }}\n          isLoading={state.isLoadingLabelNames}\n          options={state.labelNames}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({\n                ...item,\n                op: item.op ?? defaultOp,\n                label: change.label,\n              } as unknown as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidLabel}\n        />\n\n        <Select\n          aria-label={selectors.components.QueryBuilder.matchOperatorSelect}\n          value={toOption(item.op ?? defaultOp)}\n          options={operators}\n          width=\"auto\"\n          onChange={(change) => {\n            if (change.value != null) {\n              onChange({\n                ...item,\n                op: change.value,\n                value: isMultiSelect(change.value) ? item.value : getSelectOptionsFromString(item?.value)[0],\n              } as unknown as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n\n        <Select\n          placeholder=\"Select value\"\n          aria-label={selectors.components.QueryBuilder.valueSelect}\n          inputId=\"prometheus-dimensions-filter-item-value\"\n          width=\"auto\"\n          value={\n            isMultiSelect()\n              ? getSelectOptionsFromString(item?.value).map(toOption)\n              : getSelectOptionsFromString(item?.value).map(toOption)[0]\n          }\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelValues: true });\n            const labelValues = await onGetLabelValues(item);\n            setState({\n              ...state,\n              labelValues,\n              isLoadingLabelValues: undefined,\n            });\n          }}\n          isMulti={isMultiSelect()}\n          isLoading={state.isLoadingLabelValues}\n          options={getOptions()}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({\n                ...item,\n                value: change.value,\n                op: item.op ?? defaultOp,\n              } as unknown as QueryBuilderLabelFilter);\n            } else {\n              const changes = change\n                .map((change: any) => {\n                  return change.label;\n                })\n                .join('|');\n              onChange({ ...item, value: changes, op: item.op ?? defaultOp } as unknown as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidValue}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n      </InputGroup>\n    </div>\n  );\n}\n\nconst operators = [\n  { label: '=~', value: '=~', isMultiValue: true },\n  { label: '=', value: '=', isMultiValue: false },\n  { label: '!=', value: '!=', isMultiValue: false },\n  { label: '!~', value: '!~', isMultiValue: true },\n];\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorFieldGroup, EditorField, EditorList } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: QueryBuilderLabelFilter[]) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n}: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels as QueryBuilderLabelFilter[]);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Label filters\"\n        error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n        invalid={labelFilterRequired && !hasLabelFilter}\n      >\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              item={item}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n              invalidLabel={labelFilterRequired && !item.label}\n              invalidValue={labelFilterRequired && !item.value}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport { lokiGrammar } from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nexport const EXPLAIN_LABEL_FILTER_CONTENT = 'Fetch all log lines matching label filters.';\n\nexport interface Props {\n  query: string;\n}\n\nexport const LokiQueryBuilderExplained = React.memo<Props>(({ query }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n  const lang = { grammar: lokiGrammar, name: 'lokiql' };\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={<RawQuery query={`${lokiQueryModeller.renderLabels(visQuery.labels)}`} lang={lang} />}\n      >\n        {EXPLAIN_LABEL_FILTER_CONTENT}\n      </OperationExplainedBox>\n      <OperationListExplained<LokiVisualQuery>\n        stepNumber={2}\n        queryModeller={lokiQueryModeller}\n        query={visQuery}\n        lang={lang}\n      />\n    </Stack>\n  );\n});\n\nLokiQueryBuilderExplained.displayName = 'LokiQueryBuilderExplained';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { LokiDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { LokiVisualQueryBinary } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\n\nexport interface Props {\n  nestedQuery: LokiVisualQueryBinary;\n  datasource: LokiDatasource;\n  index: number;\n  showExplain: boolean;\n  onChange: (index: number, update: LokiVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n}\n\nexport const NestedQuery = React.memo<Props>(\n  ({ nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain }) => {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.card}>\n        <div className={styles.header}>\n          <div className={styles.name}>Operator</div>\n          <Select\n            aria-label=\"Select operator\"\n            width=\"auto\"\n            options={operators}\n            value={toOption(nestedQuery.operator)}\n            onChange={(value) => {\n              onChange(index, {\n                ...nestedQuery,\n                operator: value.value!,\n              });\n            }}\n          />\n          <div className={styles.name}>Vector matches</div>\n          <div className={styles.vectorMatchWrapper}>\n            <Select<LokiVisualQueryBinary['vectorMatchesType']>\n              width=\"auto\"\n              value={nestedQuery.vectorMatchesType || 'on'}\n              allowCustomValue\n              options={[\n                { value: 'on', label: 'on' },\n                { value: 'ignoring', label: 'ignoring' },\n              ]}\n              onChange={(val) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatchesType: val.value,\n                });\n              }}\n            />\n            <AutoSizeInput\n              className={styles.vectorMatchInput}\n              minWidth={20}\n              defaultValue={nestedQuery.vectorMatches}\n              onCommitChange={(evt) => {\n                onChange(index, {\n                  ...nestedQuery,\n                  vectorMatches: evt.currentTarget.value,\n                  vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n                });\n              }}\n            />\n          </div>\n          <FlexItem grow={1} />\n          <IconButton ariaLabel=\"Remove nested query\" name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n        </div>\n        <div className={styles.body}>\n          <EditorRows>\n            <LokiQueryBuilder\n              showExplain={showExplain}\n              query={nestedQuery.query}\n              datasource={datasource}\n              onRunQuery={onRunQuery}\n              onChange={(update) => {\n                onChange(index, { ...nestedQuery, query: update });\n              }}\n            />\n          </EditorRows>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { LokiDatasource } from '../../datasource';\nimport { LokiVisualQuery, LokiVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  onChange: (query: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport function NestedQueryList({ query, datasource, onChange, onRunQuery, showExplain }: Props) {\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: LokiVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { DataSourceApi, getDefaultTimeRange, LoadingState, PanelData, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationExplainedBox } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { OperationListExplained } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained';\nimport { OperationsEditorRow } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow';\nimport { QueryBuilderHints } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\nimport {\n  QueryBuilderLabelFilter,\n  QueryBuilderOperation,\n} from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { escapeLabelValueInSelector } from '../../languageUtils';\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiOperationId, LokiVisualQuery } from '../types';\n\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './LokiQueryBuilderExplained';\nimport { NestedQueryList } from './NestedQueryList';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  showExplain: boolean;\n  onChange: (update: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n}\nexport const LokiQueryBuilder = React.memo<Props>(({ datasource, query, onChange, onRunQuery, showExplain }) => {\n  const [sampleData, setSampleData] = useState<PanelData>();\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>(undefined);\n\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  const withTemplateVariableOptions = async (optionsPromise: Promise<string[]>): Promise<SelectableValue[]> => {\n    const options = await optionsPromise;\n    return [...datasource.getVariables(), ...options].map((value) => ({ label: value, value }));\n  };\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<any> => {\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      await datasource.languageProvider.refreshLogLabels();\n      return datasource.languageProvider.getLabelKeys();\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const series = await datasource.languageProvider.fetchSeriesLabels(expr);\n    const labelsNamesToConsider = labelsToConsider.map((l) => l.label);\n\n    const labelNames = Object.keys(series)\n      // Filter out label names that are already selected\n      .filter((name) => !labelsNamesToConsider.includes(name))\n      .sort();\n\n    return labelNames;\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    let values;\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    if (labelsToConsider.length === 0) {\n      values = await datasource.languageProvider.fetchLabelValues(forLabel.label);\n    } else {\n      const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n      const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n      values = result[datasource.interpolateString(forLabel.label)];\n    }\n\n    return values ? values.map((v) => escapeLabelValueInSelector(v, forLabel.op)) : []; // Escape values in return\n  };\n\n  const labelFilterRequired: boolean = useMemo(() => {\n    const { labels, operations: op } = query;\n    if (!labels.length && op.length) {\n      // Filter is required when operations are present (empty line contains operation is exception)\n      if (op.length === 1 && op[0].id === LokiOperationId.LineContains && op[0].params[0] === '') {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }, [query]);\n\n  useEffect(() => {\n    const onGetSampleData = async () => {\n      const lokiQuery = { expr: lokiQueryModeller.renderQuery(query), refId: 'data-samples' };\n      const series = await datasource.getDataSamples(lokiQuery);\n      const sampleData = { series, state: LoadingState.Done, timeRange: getDefaultTimeRange() };\n      setSampleData(sampleData);\n    };\n\n    onGetSampleData().catch(console.error);\n  }, [datasource, query]);\n\n  const lang = { grammar: logqlGrammar, name: 'logql' };\n  return (\n    <div data-testid={testIds.editor}>\n      <EditorRow>\n        <LabelFilters\n          onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelNames(forLabel))\n          }\n          onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelValues(forLabel))\n          }\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n          labelFilterRequired={labelFilterRequired}\n        />\n      </EditorRow>\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${lokiQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList\n          queryModeller={lokiQueryModeller}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource as DataSourceApi}\n          highlightedOp={highlightedOp}\n        />\n        <QueryBuilderHints<LokiVisualQuery>\n          datasource={datasource}\n          query={query}\n          onChange={onChange}\n          data={sampleData}\n          queryModeller={lokiQueryModeller}\n          buildVisualQueryFromString={buildVisualQueryFromString}\n        />\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<LokiVisualQuery>\n          stepNumber={2}\n          queryModeller={lokiQueryModeller}\n          query={query}\n          lang={lang}\n          onMouseEnter={(op) => {\n            setHighlightedOp(op);\n          }}\n          onMouseLeave={() => {\n            setHighlightedOp(undefined);\n          }}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </div>\n  );\n});\n\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';\n","import React from 'react';\n\nimport { EditorRow, EditorFieldGroup, EditorField } from '@grafana/experimental';\n\nimport { RawQuery } from '../../../prometheus/querybuilder/shared/RawQuery';\nimport { lokiGrammar } from '../../syntax';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <EditorField label=\"Raw query\">\n          <RawQuery query={query} lang={{ grammar: lokiGrammar, name: 'lokiql' }} />\n        </EditorField>\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: LokiQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  showRawQuery: boolean;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: LokiVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function LokiQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, showRawQuery, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, {\n    expr: query.expr,\n    // Use initial visual query only if query.expr is empty string\n    visQuery:\n      query.expr === ''\n        ? {\n            labels: [],\n            operations: [{ id: '__line_contains', params: [''] }],\n          }\n        : undefined,\n  });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: LokiVisualQuery) => {\n    const expr = lokiQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <LokiQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        showExplain={showExplain}\n        data-testid={testIds.editor}\n      />\n      {showRawQuery && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'loki-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: LokiVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n","import React from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { RadioButtonGroup, Select, AutoSizeInput } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\n\nimport { preprocessMaxLines, queryTypeOptions, RESOLUTION_OPTIONS } from '../../components/LokiOptionFields';\nimport { isLogsQuery } from '../../queryUtils';\nimport { LokiQuery, LokiQueryType } from '../../types';\n\nexport interface Props {\n  query: LokiQuery;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  app?: CoreApp;\n}\n\nexport const LokiQueryBuilderOptions = React.memo<Props>(({ app, query, onChange, onRunQuery }) => {\n  const onQueryTypeChange = (value: LokiQueryType) => {\n    onChange({ ...query, queryType: value });\n    onRunQuery();\n  };\n\n  const onResolutionChange = (option: SelectableValue<number>) => {\n    reportInteraction('grafana_loki_resolution_clicked', {\n      app,\n      resolution: option.value,\n    });\n    onChange({ ...query, resolution: option.value });\n    onRunQuery();\n  };\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, legendFormat: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    const newMaxLines = preprocessMaxLines(e.currentTarget.value);\n    if (query.maxLines !== newMaxLines) {\n      onChange({ ...query, maxLines: newMaxLines });\n      onRunQuery();\n    }\n  }\n\n  let queryType = query.queryType ?? (query.instant ? LokiQueryType.Instant : LokiQueryType.Range);\n  let showMaxLines = isLogsQuery(query.expr);\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup title=\"Options\" collapsedInfo={getCollapsedInfo(query, queryType, showMaxLines)}>\n        <EditorField\n          label=\"Legend\"\n          tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        >\n          <AutoSizeInput\n            placeholder=\"{{label}}\"\n            id=\"loki-query-editor-legend-format\"\n            type=\"string\"\n            minWidth={14}\n            defaultValue={query.legendFormat}\n            onCommitChange={onLegendFormatChanged}\n          />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryType} onChange={onQueryTypeChange} />\n        </EditorField>\n        {showMaxLines && (\n          <EditorField label=\"Line limit\" tooltip=\"Upper limit for number of log lines returned by query.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={0}\n              defaultValue={query.maxLines?.toString() ?? ''}\n              onCommitChange={onMaxLinesChange}\n            />\n          </EditorField>\n        )}\n        <EditorField label=\"Resolution\">\n          <Select\n            isSearchable={false}\n            onChange={onResolutionChange}\n            options={RESOLUTION_OPTIONS}\n            value={query.resolution || 1}\n            aria-label=\"Select resolution\"\n          />\n        </EditorField>\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction getCollapsedInfo(query: LokiQuery, queryType: LokiQueryType, showMaxLines: boolean): string[] {\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryType);\n  const resolutionLabel = RESOLUTION_OPTIONS.find((x) => x.value === (query.resolution ?? 1));\n\n  const items: string[] = [];\n\n  if (query.legendFormat) {\n    items.push(`Legend: ${query.legendFormat}`);\n  }\n\n  if (query.resolution) {\n    items.push(`Resolution: ${resolutionLabel?.label}`);\n  }\n\n  items.push(`Type: ${queryTypeLabel?.label}`);\n\n  if (showMaxLines && query.maxLines) {\n    items.push(`Line limit: ${query.maxLines}`);\n  }\n\n  return items;\n}\n\nLokiQueryBuilderOptions.displayName = 'LokiQueryBuilderOptions';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { testIds } from '../../components/LokiQueryEditor';\nimport { LokiQueryField } from '../../components/LokiQueryField';\nimport { LokiQueryEditorProps } from '../../components/types';\n\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplained';\n\ntype Props = LokiQueryEditorProps & {\n  showExplain: boolean;\n};\n\nexport function LokiQueryCodeEditor({\n  query,\n  datasource,\n  range,\n  onRunQuery,\n  onChange,\n  data,\n  app,\n  showExplain,\n  history,\n}: Props) {\n  const styles = useStyles2(getStyles);\n\n  // the inner QueryField works like this when a blur event happens:\n  // - if it has an onBlur prop, it calls it\n  // - else it calls onRunQuery (some extra conditions apply)\n  //\n  // we want it to not do anything when a blur event happens in explore mode,\n  // so we set an empty-function in such case. otherwise we set `undefined`,\n  // which will cause it to run the query when blur happens.\n  const onBlur = app === CoreApp.Explore ? () => undefined : undefined;\n\n  return (\n    <div className={styles.wrapper}>\n      <LokiQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        onBlur={onBlur}\n        history={history}\n        data={data}\n        app={app}\n        data-testid={testIds.editor}\n      />\n      {showExplain && <LokiQueryBuilderExplained query={query.expr} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      .gf-form {\n        margin-bottom: 0.5;\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport logqlGrammar from '../../syntax';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { LokiQueryPattern } from '../types';\n\ntype Props = {\n  pattern: LokiQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: LokiQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: logqlGrammar, name: 'logql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          query={lokiQueryModeller.renderQuery({ labels: [], operations: pattern.operations })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to replace it\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either replace your current query or create a new query'\n                  : 'your current query will be replaced'\n              }.`}\n            </div>\n            <Button size=\"sm\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Replace query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      width: 49.5%;\n      display: flex;\n      flex-direction: column;\n    `,\n    rawQueryContainer: css`\n      flex-grow: 1;\n    `,\n    rawQuery: css`\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(1)};\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiQueryPattern, LokiQueryPatternType } from '../types';\n\nimport { QueryPattern } from './QueryPattern';\n\ntype Props = {\n  isOpen: boolean;\n  query: LokiQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: LokiQuery) => void;\n  onAddQuery?: (query: LokiQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(\n    () => buildVisualQueryFromString(query.expr).query.operations.length > 0,\n    [query.expr]\n  );\n\n  const onPatternSelect = (pattern: LokiQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_loki_query_patterns_selected', {\n      version: 'v2',\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: lokiQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(LokiQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {lokiQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import store from 'app/core/store';\n\nimport { QueryEditorMode } from '../../prometheus/querybuilder/shared/types';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'LokiQueryEditorModeDefault';\n\nexport function changeEditorMode(query: LokiQuery, editorMode: QueryEditorMode, onChange: (query: LokiQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nexport function getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey) as QueryEditorMode;\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: LokiQuery): LokiQuery {\n  // If no expr (ie new query) then default to builder\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '' };\n  }\n\n  if (query.queryType == null) {\n    // Default to range query\n    result = { ...result, queryType: LokiQueryType.Range };\n  }\n\n  return result;\n}\n","import React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport {\n  lokiQueryEditorExplainKey,\n  lokiQueryEditorRawQueryKey,\n  useFlag,\n} from '../../prometheus/querybuilder/shared/hooks/useFlag';\nimport { LokiQueryBuilderContainer } from '../querybuilder/components/LokiQueryBuilderContainer';\nimport { LokiQueryBuilderOptions } from '../querybuilder/components/LokiQueryBuilderOptions';\nimport { LokiQueryCodeEditor } from '../querybuilder/components/LokiQueryCodeEditor';\nimport { QueryPatternsModal } from '../querybuilder/components/QueryPatternsModal';\nimport { buildVisualQueryFromString } from '../querybuilder/parsing';\nimport { changeEditorMode, getQueryWithDefaults } from '../querybuilder/state';\nimport { LokiQuery } from '../types';\n\nimport { LokiQueryEditorProps } from './types';\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n\nexport const LokiQueryEditor = React.memo<LokiQueryEditorProps>((props) => {\n  const { onChange, onRunQuery, onAddQuery, data, app, queries } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(lokiQueryEditorExplainKey);\n  const { flag: rawQuery, setFlag: setRawQuery } = useFlag(lokiQueryEditorRawQueryKey, true);\n\n  const query = getQueryWithDefaults(props.query);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onExplainChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(event.currentTarget.checked);\n  };\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: QueryEditorMode) => {\n      reportInteraction('grafana_loki_editor_mode_clicked', {\n        newEditor: newEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: LokiQuery) => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  const onQueryPreviewChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    setRawQuery(isEnabled);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may lose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          onChange({ ...query, editorMode: QueryEditorMode.Builder });\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          aria-label={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => {\n            setQueryPatternsModalOpen((prevValue) => !prevValue);\n\n            const visualQuery = buildVisualQueryFromString(query.expr || '');\n            reportInteraction('grafana_loki_query_patterns_opened', {\n              version: 'v2',\n              app: app ?? '',\n              editorMode: query.editorMode,\n              preSelectedOperationsCount: visualQuery.query.operations.length,\n              preSelectedLabelsCount: visualQuery.query.labels.length,\n            });\n          }}\n        >\n          Kick start your query\n        </Button>\n        <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onExplainChange} />\n        {editorMode === QueryEditorMode.Builder && (\n          <>\n            <QueryHeaderSwitch label=\"Raw query\" value={rawQuery} onChange={onQueryPreviewChange} />\n          </>\n        )}\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode!} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <LokiQueryCodeEditor {...props} query={query} onChange={onChangeInternal} showExplain={explain} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <LokiQueryBuilderContainer\n            datasource={props.datasource}\n            query={query}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            showRawQuery={rawQuery}\n            showExplain={explain}\n          />\n        )}\n        <LokiQueryBuilderOptions query={query} onChange={onChange} onRunQuery={onRunQuery} app={app} />\n      </EditorRows>\n    </>\n  );\n});\n\nLokiQueryEditor.displayName = 'LokiQueryEditor';\n","import React from 'react';\n\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorForAlerting(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery, history } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={history}\n      data={data}\n      placeholder=\"Enter a Loki query\"\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { LokiQueryEditor } from './LokiQueryEditor';\nimport { LokiQueryEditorForAlerting } from './LokiQueryEditorForAlerting';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditorByApp(props: LokiQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <LokiQueryEditorForAlerting {...props} />;\n    default:\n      return <LokiQueryEditor {...props} />;\n  }\n}\n\nexport default memo(LokiQueryEditorByApp);\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport React, { ReactNode, useState } from 'react';\n\nimport { ArrayVector, Field, FieldType, LinkModel } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\n\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\nimport { DerivedFieldConfig } from '../types';\n\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <FormField\n        labelWidth={12}\n        label={'Debug log message'}\n        inputEl={\n          <textarea\n            placeholder={'Paste an example log line here to test the regular expressions of your derived fields'}\n            className={cx(\n              'gf-form-input gf-form-textarea',\n              css`\n                width: 100%;\n              `\n            )}\n            value={debugText}\n            onChange={(event) => setDebugText(event.currentTarget.value)}\n          />\n        }\n      />\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: ReactNode = field.value;\n          if (field.error && field.error instanceof Error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: unknown;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: new ArrayVector([value]),\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        const result: DebugField = {\n          name: field.name,\n          value: value || '<no match>',\n          href: link ? link.href : undefined,\n        };\n        return result;\n      } catch (error) {\n        const result: DebugField = {\n          name: field.name,\n          error,\n        };\n        return result;\n      }\n    });\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, VariableSuggestion } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, DataLinkInput, LegacyForms, useStyles2 } from '@grafana/ui';\n\nimport { DerivedFieldConfig } from '../types';\n\nconst { Switch, FormField } = LegacyForms;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  urlField: css`\n    flex: 1;\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n});\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = useStyles2(getStyles);\n  const [showInternalLink, setShowInternalLink] = useState(!!value.datasourceUid);\n  const previousUid = usePrevious(value.datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && value.datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !value.datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, value.datasourceUid, showInternalLink]);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className} data-testid=\"derived-field\">\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={10}\n          className={styles.nameField}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Name\"\n          type=\"text\"\n          value={value.name}\n          onChange={handleChange('name')}\n        />\n        <FormField\n          labelWidth={10}\n          className={styles.regexField}\n          inputWidth={null}\n          label=\"Regex\"\n          type=\"text\"\n          value={value.matcherRegex}\n          onChange={handleChange('matcherRegex')}\n          tooltip={\n            'Use to parse and capture some part of the log message. You can use the captured groups in the template.'\n          }\n        />\n        <Button\n          variant=\"destructive\"\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <FormField\n          labelWidth={10}\n          label={showInternalLink ? 'Query' : 'URL'}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={(newValue) =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={styles.urlField}\n        />\n        <FormField\n          className={styles.urlDisplayLabelField}\n          labelWidth={10}\n          inputWidth={null}\n          label=\"URL Label\"\n          type=\"text\"\n          value={value.urlDisplayLabel}\n          onChange={handleChange('urlDisplayLabel')}\n          tooltip={'Use to override the button label when this derived field is found in a log.'}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              })\n            }\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { DerivedFieldConfig } from '../types';\n\nimport { DebugSection } from './DebugSection';\nimport { DerivedField } from './DerivedField';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n});\n\ntype Props = {\n  value?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = ({ value = [], onChange }: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Derived fields</h3>\n\n      <div className={styles.infoText}>\n        Derived fields can be used to extract new fields from a log message and create a link from its value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value.map((field, index) => {\n          return (\n            <DerivedField\n              className={styles.derivedField}\n              key={index}\n              value={field}\n              onChange={(newField) => {\n                const newDerivedFields = [...value];\n                newDerivedFields.splice(index, 1, newField);\n                onChange(newDerivedFields);\n              }}\n              onDelete={() => {\n                const newDerivedFields = [...value];\n                newDerivedFields.splice(index, 1);\n                onChange(newDerivedFields);\n              }}\n              suggestions={[\n                {\n                  value: DataLinkBuiltInVars.valueRaw,\n                  label: 'Raw value',\n                  documentation: 'Exact string captured by the regular expression',\n                  origin: VariableOrigin.Value,\n                },\n              ]}\n            />\n          );\n        })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newDerivedFields = [...value, { name: '', matcherRegex: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {value.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showDebug && (\n        <div className=\"gf-form-group\">\n          <DebugSection\n            className={css`\n              margin-bottom: 10px;\n            `}\n            derivedFields={value}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport const MaxLinesField = (props: Props) => {\n  const { value, onChange } = props;\n  return (\n    <FormField\n      label=\"Maximum lines\"\n      labelWidth={11}\n      inputWidth={20}\n      inputEl={\n        <input\n          type=\"number\"\n          className=\"gf-form-input width-8 gf-form-input--has-help-icon\"\n          value={value}\n          onChange={(event) => onChange(event.currentTarget.value)}\n          spellCheck={false}\n          placeholder=\"1000\"\n        />\n      }\n      tooltip={\n        <>\n          Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this limit\n          to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish when\n          displaying the log results.\n        </>\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings,\n  onUpdateDatasourceJsonDataOptionChecked,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AlertingSettings, DataSourceHttpSettings, InlineField, InlineSwitch } from '@grafana/ui';\n\nimport { LokiOptions } from '../types';\n\nimport { DerivedFields } from './DerivedFields';\nimport { MaxLinesField } from './MaxLinesField';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater =\n  <T extends any>(field: keyof LokiOptions) =>\n  (options: DataSourceSettings<LokiOptions>, value: T): DataSourceSettings<LokiOptions> => {\n    return {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [field]: value,\n      },\n    };\n  };\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const socksProxy = config.featureToggles.secureSocksDatasourceProxy;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:3100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      {socksProxy && (\n        <>\n          <h3 className=\"page-heading\">Secure Socks Proxy</h3>\n          <div className=\"gf-form-group\">\n            <div className=\"gf-form-inline\"></div>\n            <InlineField\n              labelWidth={28}\n              label=\"Enabled\"\n              tooltip=\"Connect to this datasource via the secure socks proxy.\"\n            >\n              <InlineSwitch\n                value={options.jsonData.enableSecureSocksProxy ?? false}\n                onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'enableSecureSocksProxy')}\n              />\n            </InlineField>\n          </div>\n        </>\n      )}\n\n      <AlertingSettings<LokiOptions> options={options} onOptionsChange={onOptionsChange} />\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <MaxLinesField\n              value={options.jsonData.maxLines || ''}\n              onChange={(value) => onOptionsChange(setMaxLines(options, value))}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DerivedFields\n        value={options.jsonData.derivedFields}\n        onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n      />\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiQueryEditorByApp from './components/LokiQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { LokiDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(LokiDatasource)\n  .setQueryEditor(LokiQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(LokiCheatSheet);\n"],"names":["DEFAULT_EXAMPLES","PREFERRED_LABELS","LOGQL_EXAMPLES","title","expression","label","LokiCheatSheet","PureComponent","userExamples","async","provider","this","props","datasource","languageProvider","started","labels","getLabelKeys","preferredLabel","find","l","includes","values","getLabelValues","shuffle","slice","map","value","setState","scheduleUserLabelChecking","componentDidMount","reportInteraction","componentWillUnmount","clearTimeout","userLabelTimer","setTimeout","checkUserLabels","renderExpression","expr","onClickExample","className","onClick","e","refId","render","state","hasUserExamples","length","example","href","target","item","LabelFilterItem","defaultOp","onChange","onDelete","onGetLabelNames","onGetLabelValues","invalidLabel","invalidValue","useState","isMultiSelect","operator","op","operators","isMultiValue","getSelectOptionsFromString","indexOf","split","InputGroup","Select","placeholder","selectors","inputId","width","toOption","allowCustomValue","onOpenMenu","isLoadingLabelNames","labelNames","undefined","isLoading","options","change","invalid","isLoadingLabelValues","labelValues","isMulti","selectedOptions","uniqBy","getOptions","changes","join","AccessoryButton","icon","variant","LabelFilters","labelsFilters","labelFilterRequired","items","setItems","useEffect","hasLabelFilter","some","EditorFieldGroup","EditorField","error","EditorList","newItems","newLabels","filter","x","isEqual","renderItem","onChangeItem","EXPLAIN_LABEL_FILTER_CONTENT","LokiQueryBuilderExplained","React","query","visQuery","buildVisualQueryFromString","lang","grammar","lokiGrammar","name","Stack","gap","direction","OperationExplainedBox","stepNumber","RawQuery","lokiQueryModeller","OperationListExplained","queryModeller","displayName","NestedQuery","nestedQuery","index","onRemove","onRunQuery","showExplain","styles","useStyles2","getStyles","card","header","vectorMatchWrapper","vectorMatchesType","val","AutoSizeInput","vectorMatchInput","minWidth","defaultValue","vectorMatches","onCommitChange","evt","currentTarget","FlexItem","grow","IconButton","ariaLabel","size","body","EditorRows","LokiQueryBuilder","update","binaryScalarDefs","def","sign","theme","css","display","flexDirection","spacing","padding","alignItems","whiteSpace","paddingLeft","marginLeft","NestedQueryList","nestedQueries","binaryQueries","onNestedQueryUpdate","updatedList","splice","toString","sampleData","setSampleData","highlightedOp","setHighlightedOp","withTemplateVariableOptions","optionsPromise","getVariables","useMemo","operations","id","LokiOperationId","params","lokiQuery","series","getDataSamples","LoadingState","timeRange","getDefaultTimeRange","onGetSampleData","catch","console","logqlGrammar","testIds","editor","EditorRow","forLabel","labelsToConsider","refreshLogLabels","fetchSeriesLabels","labelsNamesToConsider","Object","keys","sort","fetchLabelValues","interpolateString","v","escapeLabelValueInSelector","OperationsEditorRow","OperationList","QueryBuilderHints","data","onMouseEnter","onMouseLeave","QueryPreview","LokiQueryBuilderContainer","showRawQuery","dispatch","useReducer","stateSlice","reducer","exprChanged","visualQueryChange","createSlice","initialState","reducers","action","payload","parseResult","actions","LokiQueryBuilderOptions","app","queryType","instant","LokiQueryType","showMaxLines","isLogsQuery","QueryOptionGroup","collapsedInfo","getCollapsedInfo","tooltip","type","legendFormat","RadioButtonGroup","queryTypeOptions","min","maxLines","newMaxLines","preprocessMaxLines","isSearchable","option","resolution","RESOLUTION_OPTIONS","queryTypeLabel","resolutionLabel","push","LokiQueryCodeEditor","range","history","onBlur","CoreApp","wrapper","LokiQueryField","QueryPattern","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","Card","rawQueryContainer","rawQuery","Button","fill","colors","background","primary","QueryPatternsModal","isOpen","onClose","onAddQuery","queries","openTabs","setOpenTabs","selectAsNewQuery","visualQuery","version","editorMode","selectedPattern","preSelectedOperationsCount","preSelectedLabelsCount","createNewQuery","getNextRefIdChar","Modal","onDismiss","LokiQueryPatternType","patternType","Collapse","capitalize","collapsible","onToggle","tabs","t","cardsContainer","queryEditorModeDefaultLocalStorageKey","getDefaultEditorMode","QueryEditorMode","store","LokiQueryEditor","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","flag","explain","setFlag","setExplain","useFlag","lokiQueryEditorExplainKey","setRawQuery","lokiQueryEditorRawQueryKey","result","getQueryWithDefaults","onEditorModeChange","useCallback","newEditorMode","newEditor","previousEditor","newQuery","errors","changeEditorMode","onChangeInternal","ConfirmModal","confirmText","onConfirm","EditorHeader","prevValue","QueryHeaderSwitch","event","checked","isEnabled","disabled","QueryEditorModeToggle","mode","Space","LokiQueryEditorForAlerting","LokiQueryEditorByApp","memo","FormField","LegacyForms","DebugSection","derivedFields","debugText","setDebugText","debugFields","field","matcherRegex","testMatch","match","link","url","getFieldLinksForExplore","FieldType","ArrayVector","config","links","rowIndex","makeDebugFields","labelWidth","inputEl","cx","DebugFields","fields","Error","message","Switch","row","nameField","regexField","urlField","urlDisplayLabelField","DerivedField","suggestions","showInternalLink","setShowInternalLink","datasourceUid","previousUid","usePrevious","handleChange","inputWidth","preventDefault","DataLinkInput","newValue","urlDisplayLabel","DataSourcePicker","tracing","ds","uid","current","DerivedFields","infoText","text","secondary","derivedField","useTheme2","showDebug","setShowDebug","newField","newDerivedFields","DataLinkBuiltInVars","documentation","origin","VariableOrigin","MaxLinesField","spellCheck","makeJsonUpdater","jsonData","setMaxLines","setDerivedFields","plugin","DataSourcePlugin","LokiDatasource","setQueryEditor","setConfigEditor","onOptionsChange","socksProxy","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","InlineField","enableSecureSocksProxy","onUpdateDatasourceJsonDataOptionChecked","AlertingSettings","setQueryEditorHelp"],"sourceRoot":""}