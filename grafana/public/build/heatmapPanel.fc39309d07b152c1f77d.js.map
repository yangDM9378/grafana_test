{"version":3,"file":"heatmapPanel.fc39309d07b152c1f77d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/fields.ts","webpack://grafana/./public/app/plugins/panel/heatmap/models.gen.ts","webpack://grafana/./public/app/plugins/panel/heatmap/palettes.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/migrations.ts","webpack://grafana/./public/app/plugins/panel/heatmap/module.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/suggestions.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span>{display(min)}</span>\n            <span>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css`\n    width: 100%;\n    font-size: 11px;\n    opacity: 1;\n  `,\n  scaleGradient: css`\n    background: linear-gradient(90deg, ${colors.join()});\n    height: 10px;\n    pointer-events: none;\n  `,\n  legendValues: css`\n    display: flex;\n    justify-content: space-between;\n    pointer-events: none;\n  `,\n  hoverValue: css`\n    position: absolute;\n    margin-top: -14px;\n    padding: 3px 15px;\n    background: ${theme.colors.background.primary};\n    transform: translateX(-50%);\n  `,\n  followerContainer: css`\n    position: relative;\n    pointer-events: none;\n    white-space: nowrap;\n  `,\n  follower: css`\n    position: absolute;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    border: 2px solid ${theme.colors.text.primary};\n    margin-top: 5px;\n  `,\n});\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport {\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  LinkModel,\n  TimeRange,\n} from '@grafana/data';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { DataHoverView } from '../geomap/components/DataHoverView';\n\nimport { HeatmapData } from './fields';\nimport { HeatmapHoverEvent } from './utils';\n\ntype Props = {\n  data: HeatmapData;\n  hover: HeatmapHoverEvent;\n  showHistogram?: boolean;\n  timeRange: TimeRange;\n};\n\nexport const HeatmapHoverView = (props: Props) => {\n  if (props.hover.seriesIdx === 2) {\n    return <DataHoverView data={props.data.exemplars} rowIndex={props.hover.dataIdx} header={'Exemplar'} />;\n  }\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({ data, hover, showHistogram }: Props) => {\n  const index = hover.dataIdx;\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n\n  const xDisp = (v: any) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField?.values.toArray();\n  const yVals = yField?.values.toArray();\n  const countVals = countField?.values.toArray();\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: any) => formattedValueToString(yField.display!(v)) : (v: any) => `${v}`;\n\n  const yValueIdx = index % data.yBucketCount! ?? 0;\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  if (meta.yOrdinalDisplay) {\n    const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n    const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n    yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n    yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n    // e.g. \"pod-xyz123\"\n    if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n      nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n    }\n  } else {\n    const value = yVals?.[yValueIdx];\n\n    if (data.yLayout === HeatmapCellLayout.le) {\n      yBucketMax = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) - 1 / data.yLogSplit!;\n        yBucketMin = `${data.yLog ** exp}`;\n      } else {\n        yBucketMin = `${value - data.yBucketSize!}`;\n      }\n    } else {\n      yBucketMin = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) + 1 / data.yLogSplit!;\n        yBucketMax = `${data.yLog ** exp}`;\n      } else {\n        yBucketMax = `${value + data.yBucketSize!}`;\n      }\n    }\n  }\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  if (data.xLayout === HeatmapCellLayout.le) {\n    xBucketMax = xVals?.[index];\n    xBucketMin = xBucketMax - data.xBucketSize!;\n  } else {\n    xBucketMin = xVals?.[index];\n    xBucketMax = xBucketMin + data.xBucketSize!;\n  }\n\n  const count = countVals?.[index];\n\n  const visibleFields = data.heatmap?.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of visibleFields ?? []) {\n    // TODO: Currently always undefined? (getLinks)\n    if (field.getLinks) {\n      const v = field.values.get(index);\n      const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n      field.getLinks({ calculatedValue: disp, valueRowIndex: index }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram) {\n        let histCtx = can.current?.getContext('2d');\n\n        if (histCtx && xVals && yVals && countVals) {\n          let fromIdx = index;\n\n          while (xVals[fromIdx--] === xVals[index]) {}\n\n          fromIdx++;\n\n          let toIdx = fromIdx + data.yBucketCount!;\n\n          let maxCount = 0;\n\n          let i = fromIdx;\n          while (i < toIdx) {\n            let c = countVals[i];\n            maxCount = Math.max(maxCount, c);\n            i++;\n          }\n\n          let pHov = new Path2D();\n          let pRest = new Path2D();\n\n          i = fromIdx;\n          let j = 0;\n          while (i < toIdx) {\n            let c = countVals[i];\n\n            if (c > 0) {\n              let pctY = c / maxCount;\n              let pctX = j / (data.yBucketCount! + 1);\n\n              let p = i === index ? pHov : pRest;\n\n              p.rect(\n                Math.round(histCanWidth * pctX),\n                Math.round(histCanHeight * (1 - pctY)),\n                Math.round(histCanWidth / data.yBucketCount!),\n                Math.round(histCanHeight * pctY)\n              );\n            }\n\n            i++;\n            j++;\n          }\n\n          histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n          histCtx.fillStyle = '#ffffff80';\n          histCtx.fill(pRest);\n\n          histCtx.fillStyle = '#ff000080';\n          histCtx.fill(pHov);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  if (isSparse) {\n    return (\n      <div>\n        <DataHoverView data={data.heatmap} rowIndex={index} />\n      </div>\n    );\n  }\n\n  const renderYBucket = () => {\n    if (nonNumericOrdinalDisplay) {\n      return <div>Name: {nonNumericOrdinalDisplay}</div>;\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return <div>{yDisp(yBucketMin)}</div>;\n    }\n    return (\n      <div>\n        Bucket: {yDisp(yBucketMin)} - {yDisp(yBucketMax)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <div>{xDisp(xBucketMin)}</div>\n        <div>{xDisp(xBucketMax)}</div>\n      </div>\n      {showHistogram && (\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCanWidth + 'px', height: histCanHeight + 'px' }}\n        />\n      )}\n      <div>\n        {renderYBucket()}\n        <div>\n          {getFieldDisplayName(countField!, data.heatmap)}: {data.display!(count)}\n        </div>\n      </div>\n      {links.length > 0 && (\n        <VerticalGroup>\n          {links.map((link, i) => (\n            <LinkButton\n              key={i}\n              icon={'external-link-alt'}\n              target={link.target}\n              href={link.href}\n              onClick={link.onClick}\n              fill=\"text\"\n              style={{ width: '100%' }}\n            >\n              {link.title}\n            </LinkButton>\n          ))}\n        </VerticalGroup>\n      )}\n    </>\n  );\n};\n","import { MutableRefObject, RefObject } from 'react';\nimport uPlot, { Cursor } from 'uplot';\n\nimport {\n  DashboardCursorSync,\n  DataFrameType,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  EventBus,\n  formattedValueToString,\n  getValueFormat,\n  GrafanaTheme2,\n  incrRoundDn,\n  incrRoundUp,\n  TimeRange,\n} from '@grafana/data';\nimport { AxisPlacement, ScaleDirection, ScaleDistribution, ScaleOrientation } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { HeatmapData } from './fields';\nimport { PanelFieldConfig, YAxisConfig } from './models.gen';\n\ninterface PathbuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  gap?: number | null;\n  hideLE?: number;\n  hideGE?: number;\n  xAlign?: -1 | 0 | 1;\n  yAlign?: -1 | 0 | 1;\n  ySizeDivisor?: number;\n  disp: {\n    fill: {\n      values: (u: uPlot, seriesIndex: number) => number[];\n      index: Array<CanvasRenderingContext2D['fillStyle']>;\n    };\n  };\n}\n\ninterface PointsBuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n}\n\nexport interface HeatmapHoverEvent {\n  seriesIdx: number;\n  dataIdx: number;\n  pageX: number;\n  pageY: number;\n}\n\nexport interface HeatmapZoomEvent {\n  xMin: number;\n  xMax: number;\n}\n\ninterface PrepConfigOpts {\n  dataRef: RefObject<HeatmapData>;\n  theme: GrafanaTheme2;\n  eventBus: EventBus;\n  onhover?: null | ((evt?: HeatmapHoverEvent | null) => void);\n  onclick?: null | ((evt?: Object) => void);\n  onzoom?: null | ((evt: HeatmapZoomEvent) => void);\n  isToolTipOpen: MutableRefObject<boolean>;\n  timeZone: string;\n  getTimeRange: () => TimeRange;\n  palette: string[];\n  exemplarColor: string;\n  cellGap?: number | null; // in css pixels\n  hideLE?: number;\n  hideGE?: number;\n  yAxisConfig: YAxisConfig;\n  ySizeDivisor?: number;\n  sync?: () => DashboardCursorSync;\n}\n\nexport function prepConfig(opts: PrepConfigOpts) {\n  const {\n    dataRef,\n    theme,\n    eventBus,\n    onhover,\n    onclick,\n    onzoom,\n    isToolTipOpen,\n    timeZone,\n    getTimeRange,\n    palette,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    sync,\n  } = opts;\n\n  const xScaleKey = 'x';\n  const xScaleUnit = 'time';\n\n  const pxRatio = devicePixelRatio;\n\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  let builder = new UPlotConfigBuilder(timeZone);\n\n  let rect: DOMRect;\n\n  builder.addHook('init', (u) => {\n    u.root.querySelectorAll<HTMLElement>('.u-cursor-pt').forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: '0',\n        border: '1px solid white',\n        background: 'transparent',\n      });\n    });\n\n    onclick &&\n      u.over.addEventListener(\n        'mouseup',\n        (e) => {\n          // @ts-ignore\n          let isDragging: boolean = u.cursor.drag._x || u.cursor.drag._y;\n\n          if (!isDragging) {\n            onclick(e);\n          }\n        },\n        true\n      );\n  });\n\n  onzoom &&\n    builder.addHook('setSelect', (u) => {\n      onzoom({\n        xMin: u.posToVal(u.select.left, xScaleKey),\n        xMax: u.posToVal(u.select.left + u.select.width, xScaleKey),\n      });\n      u.setSelect({ left: 0, top: 0, width: 0, height: 0 }, false);\n    });\n\n  // this is a tmp hack because in mode: 2, uplot does not currently call scales.x.range() for setData() calls\n  // scales.x.range() typically reads back from drilled-down panelProps.timeRange via getTimeRange()\n  builder.addHook('setData', (u) => {\n    //let [min, max] = (u.scales!.x!.range! as uPlot.Range.Function)(u, 0, 100, xScaleKey);\n\n    let { min: xMin, max: xMax } = u.scales!.x;\n\n    let min = getTimeRange().from.valueOf();\n    let max = getTimeRange().to.valueOf();\n\n    if (xMin !== min || xMax !== max) {\n      queueMicrotask(() => {\n        u.setScale(xScaleKey, { min, max });\n      });\n    }\n  });\n\n  // rect of .u-over (grid area)\n  builder.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  const payload: DataHoverPayload = {\n    point: {\n      [xScaleUnit]: null,\n    },\n    data: dataRef.current?.heatmap,\n  };\n  const hoverEvent = new DataHoverEvent(payload);\n\n  let pendingOnleave: ReturnType<typeof setTimeout> | 0;\n\n  onhover &&\n    builder.addHook('setLegend', (u) => {\n      if (u.cursor.idxs != null) {\n        for (let i = 0; i < u.cursor.idxs.length; i++) {\n          const sel = u.cursor.idxs[i];\n          if (sel != null) {\n            const { left, top } = u.cursor;\n            payload.rowIndex = sel;\n            payload.point[xScaleUnit] = u.posToVal(left!, xScaleKey);\n            eventBus.publish(hoverEvent);\n\n            if (!isToolTipOpen.current) {\n              if (pendingOnleave) {\n                clearTimeout(pendingOnleave);\n                pendingOnleave = 0;\n              }\n              onhover({\n                seriesIdx: i,\n                dataIdx: sel,\n                pageX: rect.left + left!,\n                pageY: rect.top + top!,\n              });\n            }\n            return;\n          }\n        }\n      }\n\n      if (!isToolTipOpen.current) {\n        // if tiles have gaps, reduce flashing / re-render (debounce onleave by 100ms)\n        if (!pendingOnleave) {\n          pendingOnleave = setTimeout(() => {\n            onhover(null);\n            payload.rowIndex = undefined;\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(hoverEvent);\n          }, 100);\n        }\n      }\n    });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime: true,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: () => {\n      return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n    },\n  });\n\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: AxisPlacement.Bottom,\n    isTime: true,\n    theme: theme,\n    timeZone,\n  });\n\n  const yField = dataRef.current?.heatmap?.fields[1]!;\n  if (!yField) {\n    return builder; // early abort (avoids error)\n  }\n\n  // eslint-ignore @typescript-eslint/no-explicit-any\n  const yFieldConfig = yField.config?.custom as PanelFieldConfig | undefined;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n  const shouldUseLogScale = yScale.type !== ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdianalY = readHeatmapRowsCustomMeta(dataRef.current?.heatmap).yOrdinalDisplay != null;\n\n  // random to prevent syncing y in other heatmaps\n  // TODO: try to match TimeSeries y keygen algo to sync with TimeSeries panels (when not isOrdianalY)\n  const yScaleKey = 'y_' + (Math.random() + 1).toString(36).substring(7);\n\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: ScaleOrientation.Vertical,\n    direction: yAxisReverse ? ScaleDirection.Down : ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? ScaleDistribution.Log : ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range:\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap\n        ? (u, dataMin, dataMax) => {\n            let scaleMin: number | null, scaleMax: number | null;\n\n            [scaleMin, scaleMax] = shouldUseLogScale\n              ? uPlot.rangeLog(dataMin, dataMax, (yScale.log ?? 2) as unknown as uPlot.Scale.LogBase, true)\n              : [dataMin, dataMax];\n\n            if (shouldUseLogScale && !isOrdianalY) {\n              let yExp = u.scales[yScaleKey].log!;\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n              // guard against <= 0\n              if (explicitMin != null && explicitMin > 0) {\n                // snap to magnitude\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** incrRoundDn(minLog, 1);\n              }\n\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** incrRoundUp(maxLog, 1);\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          }\n        : // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n          (u, dataMin, dataMax) => {\n            let scaleMin = dataMin,\n              scaleMax = dataMax;\n\n            let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n            // logarithmic expansion\n            if (shouldUseLogScale) {\n              let yExp = u.scales[yScaleKey].log!;\n\n              let minExpanded = false;\n              let maxExpanded = false;\n\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              if (ySizeDivisor !== 1) {\n                let minLog = log(dataMin);\n                let maxLog = log(dataMax);\n\n                if (!Number.isInteger(minLog)) {\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                  minExpanded = true;\n                }\n\n                if (!Number.isInteger(maxLog)) {\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                  maxExpanded = true;\n                }\n              }\n\n              if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                if (!minExpanded) {\n                  scaleMin /= yExp;\n                }\n              } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                if (!maxExpanded) {\n                  scaleMax *= yExp;\n                }\n              } else {\n                scaleMin /= yExp / 2;\n                scaleMax *= yExp / 2;\n              }\n\n              if (!isOrdianalY) {\n                // guard against <= 0\n                if (explicitMin != null && explicitMin > 0) {\n                  // snap down to magnitude\n                  let minLog = log(explicitMin);\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                }\n\n                if (explicitMax != null && explicitMax > 0) {\n                  let maxLog = log(explicitMax);\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                }\n              }\n            }\n            // linear expansion\n            else {\n              let bucketSize = dataRef.current?.yBucketSize;\n\n              if (bucketSize === 0) {\n                bucketSize = 1;\n              }\n\n              if (bucketSize) {\n                if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                  scaleMin -= bucketSize!;\n                } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                  scaleMax += bucketSize!;\n                } else {\n                  scaleMin -= bucketSize! / 2;\n                  scaleMax += bucketSize! / 2;\n                }\n              } else {\n                // how to expand scale range if inferred non-regular or log buckets?\n              }\n\n              if (!isOrdianalY) {\n                scaleMin = explicitMin ?? scaleMin;\n                scaleMax = explicitMax ?? scaleMax;\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          },\n  });\n\n  const dispY = yField.display ?? getValueFormat('short');\n\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme: theme,\n    formatValue: (v, decimals) => formattedValueToString(dispY(v, decimals)),\n    splits: isOrdianalY\n      ? (self: uPlot) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (!meta.yOrdinalDisplay) {\n            return [0, 1]; //?\n          }\n          let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n\n          switch (dataRef.current?.yLayout) {\n            case HeatmapCellLayout.le:\n              splits.unshift(-1);\n              break;\n            case HeatmapCellLayout.ge:\n              splits.push(splits.length);\n              break;\n          }\n\n          // Skip labels when the height is too small\n          if (self.height < 60) {\n            splits = [splits[0], splits[splits.length - 1]];\n          } else {\n            while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n              splits = splits.filter((v, idx) => idx % 2 === 0); // remove half the items\n            }\n          }\n          return splits;\n        }\n      : undefined,\n    values: isOrdianalY\n      ? (self: uPlot, splits) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (meta.yOrdinalDisplay) {\n            return splits.map((v) =>\n              v < 0\n                ? meta.yMinDisplay ?? '' // Check prometheus style labels\n                : meta.yOrdinalDisplay[v] ?? ''\n            );\n          }\n          return splits;\n        }\n      : undefined,\n  });\n\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n\n  // heatmap layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx,\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign:\n        dataRef.current?.xLayout === HeatmapCellLayout.le\n          ? -1\n          : dataRef.current?.xLayout === HeatmapCellLayout.ge\n          ? 1\n          : 0,\n      yAlign: ((dataRef.current?.yLayout === HeatmapCellLayout.le\n        ? -1\n        : dataRef.current?.yLayout === HeatmapCellLayout.ge\n        ? 1\n        : 0) * (yAxisReverse ? -1 : 1)) as -1 | 0 | 1,\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => {\n            let countFacetIdx = !isSparseHeatmap ? 2 : 3;\n            return valuesToFills(\n              u.data[seriesIdx][countFacetIdx] as unknown as number[],\n              palette,\n              dataRef.current?.minValue!,\n              dataRef.current?.maxValue!\n            );\n          },\n          index: palette,\n        },\n      },\n    }),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  // exemplars layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx,\n          });\n        },\n      },\n      exemplarFillColor\n    ),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  const cursor: Cursor = {\n    drag: {\n      x: true,\n      y: false,\n      setScale: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      fill: 'rgba(255,255,255, 0.3)',\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n\n        return {\n          left: isHovered ? hRect!.x / pxRatio : -10,\n          top: isHovered ? hRect!.y / pxRatio : -10,\n          width: isHovered ? hRect!.w / pxRatio : 0,\n          height: isHovered ? hRect!.h / pxRatio : 0,\n        };\n      },\n    },\n  };\n\n  if (sync && sync() !== DashboardCursorSync.Off) {\n    cursor.sync = {\n      key: '__global_',\n      scales: [xScaleKey, yScaleKey],\n      filters: {\n        pub: (type: string, src: uPlot, x: number, y: number, w: number, h: number, dataIdx: number) => {\n          if (x < 0) {\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(new DataHoverClearEvent());\n          } else {\n            payload.point[xScaleUnit] = src.posToVal(x, xScaleKey);\n            eventBus.publish(hoverEvent);\n          }\n\n          return true;\n        },\n      },\n    };\n\n    builder.setSync();\n  }\n\n  builder.setCursor(cursor);\n\n  return builder;\n}\n\nconst CRISP_EDGES_GAP_MIN = 4;\n\nexport function heatmapPathsDense(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0] as unknown as number[];\n        const ys = d[1] as unknown as number[];\n        const counts = d[2] as unknown as number[];\n        const dlen = xs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // detect x and y bin qtys by detecting layout repetition in x & y data\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max! - scaleY.min!;\n        let xBinIncr = xs[yBinQty] - xs[0];\n\n        // uniform tile sizes based on zoom level\n        let xSize: number;\n        let ySize: number;\n\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log!, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n\n        if (scaleY.distr === 3) {\n          ySize =\n            Math.abs(valToPosY(ys[0] * scaleY.log!, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) /\n            ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n\n        // clamp min tile size to 1px\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n\n        // bucket agg direction\n        // let xCeil = false;\n        // let yCeil = false;\n\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n\n        // pre-compute x and y offsets\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from({ length: xBinQty }, (v, i) =>\n          round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n\n            let fillPath = fillPaths[fills[i]];\n\n            rect(fillPath, cx, cy, xSize, ySize);\n\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        return null;\n      }\n    );\n\n    return null;\n  };\n}\n\nexport function heatmapPathsPoints(opts: PointsBuilderOpts, exemplarColor: string) {\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? 'rgba(255,0,255,0.7)'];\n\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i]!;\n          yVal -= 0.5; // center vertically in bucket (when tiles are le)\n          // y-randomize vertically to distribute exemplars in same bucket at same time\n          let randSign = Math.round(Math.random()) * 2 - 1;\n          yVal += randSign * 0.5 * Math.random();\n\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n\n          rect(points, x - w / 2, y - h / 2, w, h);\n\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n\n    return null;\n  };\n}\n// accepts xMax, yMin, yMax, count\n// xbinsize? x tile sizes are uniform?\nexport function heatmapPathsSparse(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0] as unknown as number[]; // xMax, do we get interval?\n        const yMins = d[1] as unknown as number[];\n        const yMaxs = d[2] as unknown as number[];\n        const counts = d[3] as unknown as number[];\n        const dlen = xMaxs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // cache all tile bounds\n        let xOffs = new Map();\n        let yOffs = new Map();\n\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n\n        // uniform x size (interval, step)\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          let xMaxPx = xOffs.get(xMax); // xSize is from interval, or inferred delta?\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n\n          // clamp min tile size to 1px\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n\n          let x = xMaxPx;\n          let y = yMinPx;\n\n          let fillPath = fillPaths[fills[i]];\n\n          rect(fillPath, x, y, xSize, ySize);\n\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        //console.timeEnd('heatmapPathsSparse');\n      }\n    );\n\n    return null;\n  };\n}\n\nexport const boundedMinMax = (\n  values: number[],\n  minValue?: number,\n  maxValue?: number,\n  hideLE = -Infinity,\n  hideGE = Infinity\n) => {\n  if (minValue == null) {\n    minValue = Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n\n  if (maxValue == null) {\n    maxValue = -Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n\n  return [minValue, maxValue];\n};\n\nexport const valuesToFills = (values: number[], palette: string[], minValue: number, maxValue: number) => {\n  let range = Math.max(maxValue - minValue, 1);\n\n  let paletteSize = palette.length;\n\n  let indexedFills = Array(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] =\n      values[i] < minValue\n        ? 0\n        : values[i] > maxValue\n        ? paletteSize - 1\n        : Math.min(paletteSize - 1, Math.floor((paletteSize * (values[i] - minValue)) / range));\n  }\n\n  return indexedFills;\n};\n","import {\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  LinkModel,\n  outerJoinDataFrames,\n  PanelData,\n  ValueFormatter,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { CellValues, PanelOptions } from './models.gen';\nimport { boundedMinMax } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  xLog?: number;\n  yLog?: number;\n\n  xLogSplit?: number;\n  yLogSplit?: number;\n\n  // color scale range\n  minValue?: number;\n  maxValue?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\nexport function prepareHeatmapData(\n  data: PanelData,\n  options: PanelOptions,\n  theme: GrafanaTheme2,\n  getFieldLinks?: (exemplars: DataFrame, field: Field) => (config: ValueLinkConfig) => Array<LinkModel<Field>>\n): HeatmapData {\n  let frames = data.series;\n  if (!frames?.length) {\n    return {};\n  }\n\n  const exemplars = data.annotations?.find((f) => f.name === 'exemplar');\n\n  if (getFieldLinks) {\n    exemplars?.fields.forEach((field, index) => {\n      exemplars.fields[index].getLinks = getFieldLinks(exemplars, field);\n    });\n  }\n\n  if (options.calculate) {\n    return getDenseHeatmapData(calculateHeatmapFromData(frames, options.calculation ?? {}), exemplars, options, theme);\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, theme)\n          : getSparseHeatmapData(frame, exemplars, options, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (!rowsHeatmap) {\n    if (frames.length > 1) {\n      rowsHeatmap = [\n        outerJoinDataFrames({\n          frames,\n        })!,\n      ][0];\n    } else {\n      rowsHeatmap = frames[0];\n    }\n  }\n\n  return getDenseHeatmapData(\n    rowsToCellsHeatmap({\n      unit: options.yAxis?.unit, // used to format the ordinal lookup values\n      decimals: options.yAxis?.decimals,\n      ...options.rowsFrame,\n      frame: rowsHeatmap,\n    }),\n    exemplars,\n    options,\n    theme\n  );\n}\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  // cell value display\n  const disp = updateFieldDisplay(frame.fields[3], options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    frame.fields[3].values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    minValue,\n    maxValue,\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values.toArray();\n  const ys = frame.fields[1].values.toArray();\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? '1') : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? '1') : 1,\n\n    minValue,\n    maxValue,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// NOTE: This file will be auto generated from models.cue\n// It is currenty hand written but will serve as the target for cuetsy\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { AxisConfig, AxisPlacement, HideableFieldConfig, ScaleDistributionConfig, VisibilityMode } from '@grafana/schema';\nimport { HeatmapCellLayout, HeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nexport const modelVersion = Object.freeze([1, 0]);\n\nexport enum HeatmapColorMode {\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\nexport enum HeatmapColorScale {\n  Linear = 'linear',\n  Exponential = 'exponential',\n}\n\nexport interface HeatmapColorOptions {\n  mode: HeatmapColorMode;\n  scheme: string; // when in scheme mode -- the d3 scheme name\n  fill: string; // when opacity mode, the target color\n  scale: HeatmapColorScale; // for opacity mode\n  exponent: number; // when scale== sqrt\n  steps: number; // 2-128\n\n  reverse: boolean;\n\n  // Clamp the colors to the value range\n  min?: number;\n  max?: number;\n}\nexport interface YAxisConfig extends AxisConfig {\n  unit?: string;\n  reverse?: boolean;\n  decimals?: number;\n  // Only used when the axis is not ordinal\n  min?: number;\n  max?: number;\n}\n\nexport interface CellValues {\n  unit?: string;\n  decimals?: number;\n}\n\nexport interface FilterValueRange {\n  le?: number;\n  ge?: number;\n}\n\nexport interface HeatmapTooltip {\n  show: boolean;\n  yHistogram?: boolean;\n}\nexport interface HeatmapLegend {\n  show: boolean;\n}\n\nexport interface ExemplarConfig {\n  color: string;\n}\n\nexport interface RowsHeatmapOptions {\n  value?: string; // value field name\n  layout?: HeatmapCellLayout;\n}\n\nexport interface PanelOptions {\n  calculate?: boolean;\n  calculation?: HeatmapCalculationOptions;\n\n  color: HeatmapColorOptions;\n  filterValues?: FilterValueRange; // was hideZeroBuckets\n  rowsFrame?: RowsHeatmapOptions;\n  showValue: VisibilityMode;\n\n  cellGap?: number; // was cardPadding\n  cellRadius?: number; // was cardRadius (not used, but migrated from angular)\n  cellValues?: CellValues;\n\n  yAxis: YAxisConfig;\n\n  legend: HeatmapLegend;\n\n  tooltip: HeatmapTooltip;\n  exemplars: ExemplarConfig;\n}\n\nexport const defaultPanelOptions: PanelOptions = {\n  calculate: false,\n  color: {\n    mode: HeatmapColorMode.Scheme,\n    scheme: 'Oranges',\n    fill: 'dark-orange',\n    scale: HeatmapColorScale.Exponential,\n    reverse: false,\n    exponent: 0.5,\n    steps: 64,\n  },\n  rowsFrame: {\n    layout: HeatmapCellLayout.auto,\n  },\n  yAxis: {\n    axisPlacement: AxisPlacement.Left,\n  },\n  cellValues: {\n\n  },\n  showValue: VisibilityMode.Auto,\n  tooltip: {\n    show: true,\n    yHistogram: false,\n  },\n  legend: {\n    show: true,\n  },\n  exemplars: {\n    color: 'rgba(255,0,255,0.7)',\n  },\n  filterValues: {\n    le: 1e-9,\n  },\n  cellGap: 1,\n};\n\nexport interface PanelFieldConfig extends HideableFieldConfig {\n  scaleDistribution?: ScaleDistributionConfig;\n}\n\nexport const defaultPanelFieldConfig: PanelFieldConfig = {};\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './models.gen';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultPanelOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { DataFrame, DataFrameType, Field, getLinksSupplier, GrafanaTheme2, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  Portal,\n  ScaleDistribution,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapHoverView } from './HeatmapHoverView';\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions } from './models.gen';\nimport { quantizeScheme } from './palettes';\nimport { HeatmapHoverEvent, prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<PanelOptions> {}\n\nexport const HeatmapPanel: React.FC<HeatmapPanelProps> = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync } = usePanelContext();\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const getFieldLinksSupplier = useCallback(\n    (exemplars: DataFrame, field: Field) => {\n      return getLinksSupplier(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n    },\n    [replaceVariables]\n  );\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data, options, theme, getFieldLinksSupplier);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data, options, theme, getFieldLinksSupplier]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] = []; // \"Time\" field\n    let exemplarsyFacet: number[] = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n    if (info.exemplars?.length && meta.yMatchWithLabel) {\n      exemplarsXFacet = info.exemplars?.fields[0].values.toArray();\n\n      // ordinal/labeled heatmap-buckets?\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n\n      if (hasLabeledY) {\n        let matchExemplarsBy = info.exemplars?.fields\n          .find((field) => field.name === meta.yMatchWithLabel)!\n          .values.toArray();\n        exemplarsyFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label)) as number[];\n      } else {\n        exemplarsyFacet = info.exemplars?.fields[1].values.toArray() as number[]; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values.toArray()), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const [hover, setHover] = useState<HeatmapHoverEvent | undefined>(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(\n    (evt?: HeatmapHoverEvent | null) => {\n      setHover(evt ?? undefined);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig = dataRef.current?.heatmap?.fields[1].config?.custom\n      ?.scaleDistribution as ScaleDistributionConfig;\n    return prepConfig({\n      dataRef,\n      theme,\n      eventBus,\n      onhover: onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: (evt) => {\n        const delta = evt.xMax - evt.xMin;\n        if (delta > 1) {\n          onChangeTimeRange({ from: evt.xMin, to: evt.xMax });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      palette,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n\n    let hoverValue: number | undefined = undefined;\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values.get(hover.dataIdx);\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.minValue!}\n            max={dataRef.current.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets as any} width={vizWidth} height={vizHeight} timeRange={timeRange}>\n            {/*children ? children(config, alignedFrame) : null*/}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      <Portal>\n        {hover && options.tooltip.show && (\n          <VizTooltipContainer\n            position={{ x: hover.pageX, y: hover.pageY }}\n            offset={{ x: 10, y: 10 }}\n            allowPointerEvents={isToolTipOpen.current}\n          >\n            {shouldDisplayCloseButton && (\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                  paddingBottom: '6px',\n                }}\n              >\n                <CloseButton\n                  onClick={onCloseToolTip}\n                  style={{\n                    position: 'relative',\n                    top: 'auto',\n                    right: 'auto',\n                    marginRight: 0,\n                  }}\n                />\n              </div>\n            )}\n            <HeatmapHoverView\n              timeRange={timeRange}\n              data={info}\n              hover={hover}\n              showHistogram={options.tooltip.yHistogram}\n            />\n          </VizTooltipContainer>\n        )}\n      </Portal>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorScaleWrapper: css`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `,\n});\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport { AxisPlacement, ScaleDistribution, VisibilityMode } from '@grafana/schema';\nimport {\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode } from './models.gen';\nimport { colorSchemes } from './palettes';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<PanelOptions> => {\n  // Migrating from angular\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: PanelOptions } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultPanelOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: PanelOptions = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultPanelOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      show: Boolean(angular.tooltip?.show),\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultPanelOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultPanelOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current = color.colorScheme as string;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultPanelOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: any, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import React from 'react';\n\nimport { FieldConfigProperty, FieldType, identityOverrideProcessor, PanelData, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AxisPlacement, GraphFieldConfig, ScaleDistribution, ScaleDistributionConfig } from '@grafana/schema';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './models.gen';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<PanelOptions, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor as any,\n        override: ScaleDistributionEditor as any,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultPanelOptions;\n\n    let isOrdinalY = false;\n\n    try {\n      const v = prepareHeatmapData({ series: context.data } as PanelData, opts, config.theme2);\n      isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n    } catch {}\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultPanelOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultPanelOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultPanelOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultPanelOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultPanelOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultPanelOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultPanelOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultPanelOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultPanelOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultPanelOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultPanelOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultPanelOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultPanelOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultPanelOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultPanelOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultPanelOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultPanelOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultPanelOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultPanelOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultPanelOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultPanelOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.show',\n      name: 'Show tooltip',\n      defaultValue: defaultPanelOptions.tooltip.show,\n      category,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultPanelOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.show,\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultPanelOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultPanelOptions.exemplars.color,\n      category,\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier());\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions, defaultPanelOptions } from './models.gen';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const info = prepareHeatmapData(builder.data, defaultPanelOptions, config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<PanelOptions, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n"],"names":["ColorScale","colorPalette","min","max","display","hoverValue","useStopsPercentage","colors","setColors","useState","scaleHover","setScaleHover","isShown","value","percent","setPercent","theme","useTheme2","styles","getStyles","useEffect","getGradientStops","colorArray","stops","v","clampPercent100","className","scaleWrapper","onMouseMove","event","divOffset","nativeEvent","offsetX","offsetWidth","currentTarget","normPercentage","Math","floor","scaleValue","onMouseLeave","scaleGradient","undefined","followerContainer","follower","style","left","legendValues","colorCount","length","incr","per","color","push","gradientEnd","skip","ceil","gradientStops","Set","i","add","css","join","background","primary","text","HeatmapHoverView","props","hover","seriesIdx","DataHoverView","data","exemplars","rowIndex","dataIdx","header","HeatmapHoverCell","showHistogram","index","xField","heatmap","fields","yField","countField","xDisp","formattedValueToString","type","FieldType","tooltipTimeFormat","dashboard","getDashboardSrv","getCurrent","formatDate","xVals","values","toArray","yVals","countVals","meta","readHeatmapRowsCustomMeta","yDisp","yValueIdx","yBucketCount","yBucketMin","yBucketMax","nonNumericOrdinalDisplay","xBucketMin","xBucketMax","yOrdinalDisplay","yMinIdx","yLayout","HeatmapCellLayout","yMaxIdx","yMinDisplay","yOrdinalLabel","Number","isNaN","yLog","exp","log2","log10","yLogSplit","yBucketSize","xLayout","xBucketSize","count","visibleFields","filter","f","Boolean","config","custom","hideFrom","tooltip","links","linkLookup","field","getLinks","get","disp","numeric","calculatedValue","valueRowIndex","forEach","link","key","title","href","has","can","useRef","histCanWidth","round","devicePixelRatio","histCanHeight","histCtx","current","getContext","fromIdx","toIdx","maxCount","c","pHov","Path2D","pRest","j","pctY","pctX","rect","clearRect","fillStyle","fill","isSparse","DataFrameType","isHeatmapCellsDense","width","height","ref","getFieldDisplayName","map","icon","target","onClick","heatmapPathsDense","opts","each","gap","hideLE","Infinity","hideGE","xAlign","yAlign","ySizeDivisor","pxRatio","cellGap","u","uPlot","series","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","arc","d","xs","ys","counts","dlen","xSize","ySize","fills","fillPalette","fillPaths","yBinQty","lastIndexOf","xBinQty","yBinIncr","xBinIncr","distr","abs","log","xOffset","yOffset","cys","slice","y","cxs","Array","from","cx","cy","ctx","save","bbox","top","clip","p","restore","heatmapPathsPoints","exemplarColor","points","yVal","random","x","w","h","heatmapPathsSparse","xMaxs","yMins","yMaxs","xOffs","Map","yOffs","xMax","yMin","yMax","set","xSizeUniform","find","xMaxPx","yMinPx","boundedMinMax","minValue","maxValue","valuesToFills","palette","range","paletteSize","indexedFills","prepareHeatmapData","options","getFieldLinks","frames","annotations","name","calculate","getDenseHeatmapData","calculateHeatmapFromData","calculation","rowsHeatmap","frame","getSparseHeatmapData","outerJoinDataFrames","rowsToCellsHeatmap","unit","yAxis","decimals","rowsFrame","warning","updateFieldDisplay","cellValues","filterValues","le","ge","xName","yName","valueField","calcX","xBuckets","calcY","yBuckets","xBucketCount","scale","xLog","xLogSplit","getDisplayProcessor","Object","freeze","HeatmapColorMode","HeatmapColorScale","defaultPanelOptions","mode","Scheme","scheme","Exponential","reverse","exponent","steps","layout","axisPlacement","AxisPlacement","showValue","VisibilityMode","show","yHistogram","legend","colorSchemes","invert","name2","DEFAULT_SCHEME","quantizeScheme","Opacity","tinycolor","visualization","getColorByName","toPercentageRgb","d3","scalePow","domain","scaleLinear","a","toString","fnName","interpolate","d3ScaleChromatic","rgbStr","rgb","indexOf","matchAll","padStart","isDark","isLight","colorScaleWrapper","heatmapChangedHandler","panel","prevPluginId","prevOptions","prevFieldConfig","angular","fieldConfig","defaults","overrides","dataFormat","oldYAxis","logBase","HeatmapCalculationMode","xBucketNumber","yBucketNumber","splitFactor","ScaleDistribution","asNumber","cards","cardPadding","cellRadius","cardRound","reverseYBuckets","axisWidth","format","tooltipDecimals","getHeatmapCellLayout","yBucketBound","hideZeroBuckets","colorScheme","cardColor","angularToReactHeatmap","bucketFrame","defaultValue","num","plugin","PanelPlugin","id","timeRange","timeZone","eventBus","onChangeTimeRange","replaceVariables","useStyles2","sync","usePanelContext","timeRangeRef","getFieldLinksSupplier","useCallback","getLinksSupplier","state","scopedVars","info","useMemo","ex","facets","exemplarsXFacet","exemplarsyFacet","yMatchWithLabel","label","setHover","shouldDisplayCloseButton","setShouldDisplayCloseButton","isToolTipOpen","onclick","onhover","evt","structureRev","dataRef","builder","scaleConfig","scaleDistribution","onzoom","getTimeRange","yAxisConfig","xScaleKey","xScaleUnit","heatmapType","exemplarFillColor","qt","hRect","UPlotConfigBuilder","addHook","root","querySelectorAll","el","assign","borderRadius","border","over","addEventListener","e","cursor","drag","_x","_y","xMin","posToVal","select","setSelect","scales","valueOf","to","queueMicrotask","setScale","r","payload","point","hoverEvent","DataHoverEvent","pendingOnleave","idxs","sel","publish","clearTimeout","pageX","pageY","setTimeout","Quadtree","clear","s","_paths","setMode","addScale","scaleKey","isTime","orientation","ScaleOrientation","direction","ScaleDirection","addAxis","placement","yFieldConfig","yScale","yAxisReverse","isSparseHeatmap","shouldUseLogScale","isOrdianalY","yScaleKey","substring","distribution","dataMin","dataMax","scaleMin","scaleMax","yExp","explicitMin","explicitMax","minLog","incrRoundDn","maxLog","incrRoundUp","minExpanded","maxExpanded","isInteger","bucketSize","dispY","getValueFormat","size","axisLabel","formatValue","splits","self","idx","unshift","pathBuilder","addSeries","auto","sorted","sidx","didx","countFacetIdx","o","pointWithin","isHovered","DashboardCursorSync","filters","pub","src","DataHoverClearEvent","setSync","setCursor","prepConfig","PanelDataErrorView","panelId","needsNumberField","message","VizLayout","countFieldIdx","maxHeight","renderLegend","vizWidth","vizHeight","Portal","VizTooltipContainer","position","offset","allowPointerEvents","justifyContent","paddingBottom","CloseButton","right","marginRight","useFieldConfig","disableStandardOptions","FieldConfigProperty","useCustomConfig","addCustomEditor","path","category","editor","ScaleDistributionEditor","override","shouldApply","process","identityOverrideProcessor","hideFromDefaults","addHideFrom","setPanelChangeHandler","setMigrationHandler","keys","setPanelOptions","context","isOrdinalY","addRadio","settings","addHeatmapCalculationOptions","addUnitPicker","isClearable","addNumberInput","placeholder","addTextInput","addBooleanSwitch","addColorPicker","showIf","Linear","addSliderInput","step","addSelect","description","setSuggestionsSupplier","getSuggestionsForData","dataSummary","hasData","timeFieldCount","numberFieldCount","getListAppender","pluginId"],"sourceRoot":""}