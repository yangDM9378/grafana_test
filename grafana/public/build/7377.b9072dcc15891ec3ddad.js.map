{"version":3,"file":"7377.b9072dcc15891ec3ddad.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack://grafana/./public/app/features/query/components/QueryGroupOptions.tsx","webpack://grafana/./public/app/features/query/components/QueryGroup.tsx","webpack://grafana/./public/app/features/query/state/updateQueries.ts"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { LoadingPlaceholder } from '@grafana/ui';\n\ninterface Props {\n  pluginId: string;\n}\n\nexport function PluginHelp({ pluginId }: Props) {\n  const { value, loading, error } = useAsync(async () => {\n    return getBackendSrv().get(`/api/plugins/${pluginId}/markdown/query_help`);\n  }, []);\n\n  const renderedMarkdown = renderMarkdown(value);\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading help...\" />;\n  }\n\n  if (error) {\n    return <h3>An error occurred when loading help.</h3>;\n  }\n\n  if (value === '') {\n    return <h3>No query help could be found.</h3>;\n  }\n\n  return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: renderedMarkdown }} />;\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent, ChangeEvent, FocusEvent } from 'react';\n\nimport { rangeUtil, PanelData, DataSourceApi } from '@grafana/data';\nimport { Switch, Input, InlineField, InlineFormLabel, stylesFactory } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { config } from 'app/core/config';\nimport { QueryGroupOptions } from 'app/types';\n\ninterface Props {\n  options: QueryGroupOptions;\n  dataSource: DataSourceApi;\n  data: PanelData;\n  onChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  timeRangeFrom: string;\n  timeRangeShift: string;\n  timeRangeHide: boolean;\n  isOpen: boolean;\n  relativeTimeIsValid: boolean;\n  timeShiftIsValid: boolean;\n}\n\nexport class QueryGroupOptionsEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = props;\n\n    this.state = {\n      timeRangeFrom: options.timeRange?.from || '',\n      timeRangeShift: options.timeRange?.shift || '',\n      timeRangeHide: options.timeRange?.hide ?? false,\n      isOpen: false,\n      relativeTimeIsValid: true,\n      timeShiftIsValid: true,\n    };\n  }\n\n  onRelativeTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeFrom: event.target.value,\n    });\n  };\n\n  onTimeShiftChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeShift: event.target.value,\n    });\n  };\n\n  onOverrideTime = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.from !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          from: newValue,\n        },\n      });\n    }\n\n    this.setState({ relativeTimeIsValid: isValid });\n  };\n\n  onTimeShift = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.shift !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          shift: newValue,\n        },\n      });\n    }\n\n    this.setState({ timeShiftIsValid: isValid });\n  };\n\n  onToggleTimeOverride = () => {\n    const { onChange, options } = this.props;\n\n    this.setState({ timeRangeHide: !this.state.timeRangeHide }, () => {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          hide: this.state.timeRangeHide,\n        },\n      });\n    });\n  };\n\n  onCacheTimeoutBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    onChange({\n      ...options,\n      cacheTimeout: emptyToNull(event.target.value),\n    });\n  };\n\n  onMaxDataPointsBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    let maxDataPoints: number | null = parseInt(event.target.value as string, 10);\n\n    if (isNaN(maxDataPoints) || maxDataPoints === 0) {\n      maxDataPoints = null;\n    }\n\n    if (maxDataPoints !== options.maxDataPoints) {\n      onChange({\n        ...options,\n        maxDataPoints,\n      });\n    }\n  };\n\n  onMinIntervalBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    const minInterval = emptyToNull(event.target.value);\n    if (minInterval !== options.minInterval) {\n      onChange({\n        ...options,\n        minInterval,\n      });\n    }\n  };\n\n  renderCacheTimeoutOption() {\n    const { dataSource, options } = this.props;\n\n    const tooltip = `If your time series store has a query cache this option can override the default cache timeout. Specify a\n    numeric value in seconds.`;\n\n    if (!dataSource.meta.queryOptions?.cacheTimeout) {\n      return null;\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9} tooltip={tooltip}>\n            Cache timeout\n          </InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"60\"\n            spellCheck={false}\n            onBlur={this.onCacheTimeoutBlur}\n            defaultValue={options.cacheTimeout ?? ''}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderMaxDataPointsOption() {\n    const { data, options } = this.props;\n    const realMd = data.request?.maxDataPoints;\n    const value = options.maxDataPoints ?? '';\n    const isAuto = value === '';\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={9}\n            tooltip={\n              <>\n                The maximum data points per series. Used directly by some data sources and used in calculation of auto\n                interval. With streaming data this value is used for the rolling buffer.\n              </>\n            }\n          >\n            Max data points\n          </InlineFormLabel>\n          <Input\n            type=\"number\"\n            className=\"width-6\"\n            placeholder={`${realMd}`}\n            spellCheck={false}\n            onBlur={this.onMaxDataPointsBlur}\n            defaultValue={value}\n          />\n          {isAuto && (\n            <>\n              <div className=\"gf-form-label query-segment-operator\">=</div>\n              <div className=\"gf-form-label\">Width of panel</div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  renderIntervalOption() {\n    const { data, dataSource, options } = this.props;\n    const realInterval = data.request?.interval;\n    const minIntervalOnDs = dataSource.interval ?? 'No limit';\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  A lower limit for the interval. Recommended to be set to write frequency, for example <code>1m</code>{' '}\n                  if your data is written every minute. Default value can be set in data source settings for most data\n                  sources.\n                </>\n              }\n            >\n              Min interval\n            </InlineFormLabel>\n            <Input\n              type=\"text\"\n              className=\"width-6\"\n              placeholder={`${minIntervalOnDs}`}\n              spellCheck={false}\n              onBlur={this.onMinIntervalBlur}\n              defaultValue={options.minInterval ?? ''}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  The evaluated interval that is sent to data source and is used in <code>$__interval</code> and{' '}\n                  <code>$__interval_ms</code>\n                </>\n              }\n            >\n              Interval\n            </InlineFormLabel>\n            <InlineFormLabel width={6}>{realInterval}</InlineFormLabel>\n            <div className=\"gf-form-label query-segment-operator\">=</div>\n            <div className=\"gf-form-label\">Time range / max data points</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  onOpenOptions = () => {\n    this.setState({ isOpen: true });\n  };\n\n  onCloseOptions = () => {\n    this.setState({ isOpen: false });\n  };\n\n  renderCollapsedText(styles: StylesType): React.ReactNode | undefined {\n    const { data, options } = this.props;\n    const { isOpen } = this.state;\n\n    if (isOpen) {\n      return undefined;\n    }\n\n    let mdDesc = options.maxDataPoints ?? '';\n    if (mdDesc === '' && data.request) {\n      mdDesc = `auto = ${data.request.maxDataPoints}`;\n    }\n\n    let intervalDesc = options.minInterval;\n    if (data.request) {\n      intervalDesc = `${data.request.interval}`;\n    }\n\n    return (\n      <>\n        {<div className={styles.collapsedText}>MD = {mdDesc}</div>}\n        {<div className={styles.collapsedText}>Interval = {intervalDesc}</div>}\n      </>\n    );\n  }\n\n  render() {\n    const { timeRangeHide: hideTimeOverride, relativeTimeIsValid, timeShiftIsValid } = this.state;\n    const { timeRangeFrom: relativeTime, timeRangeShift: timeShift, isOpen } = this.state;\n    const styles = getStyles();\n\n    return (\n      <QueryOperationRow\n        id=\"Query options\"\n        index={0}\n        title=\"Query options\"\n        headerElement={this.renderCollapsedText(styles)}\n        isOpen={isOpen}\n        onOpen={this.onOpenOptions}\n        onClose={this.onCloseOptions}\n      >\n        {this.renderMaxDataPointsOption()}\n        {this.renderIntervalOption()}\n        {this.renderCacheTimeoutOption()}\n\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9}>Relative time</InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onRelativeTimeChange}\n            onBlur={this.onOverrideTime}\n            invalid={!relativeTimeIsValid}\n            value={relativeTime}\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <span className=\"gf-form-label width-9\">Time shift</span>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onTimeShiftChange}\n            onBlur={this.onTimeShift}\n            invalid={!timeShiftIsValid}\n            value={timeShift}\n          />\n        </div>\n        {(timeShift || relativeTime) && (\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Hide time info\" labelWidth={18}>\n              <Switch value={hideTimeOverride} onChange={this.onToggleTimeOverride} />\n            </InlineField>\n          </div>\n        )}\n      </QueryOperationRow>\n    );\n  }\n}\n\nconst timeRangeValidation = (value: string | null) => {\n  if (!value) {\n    return true;\n  }\n\n  return rangeUtil.isValidTimeSpan(value);\n};\n\nconst emptyToNull = (value: string) => {\n  return value === '' ? null : value;\n};\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    collapsedText: css`\n      margin-left: ${theme.spacing.md};\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n    `,\n  };\n});\n\ntype StylesType = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, CustomScrollbar, HorizontalGroup, InlineFormLabel, Modal, stylesFactory } from '@grafana/ui';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport config from 'app/core/config';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { addQuery, queryIsEmpty } from 'app/core/utils/query';\nimport { dataSource as expressionDatasource } from 'app/features/expressions/ExpressionDatasource';\nimport { DashboardQueryEditor, isSharedDashboardQuery } from 'app/plugins/datasource/dashboard';\nimport { QueryGroupOptions } from 'app/types';\n\nimport { PanelQueryRunner } from '../state/PanelQueryRunner';\nimport { updateQueries } from '../state/updateQueries';\n\nimport { GroupActionComponents } from './QueryActionComponent';\nimport { QueryEditorRows } from './QueryEditorRows';\nimport { QueryGroupOptionsEditor } from './QueryGroupOptions';\n\ninterface Props {\n  queryRunner: PanelQueryRunner;\n  options: QueryGroupOptions;\n  onOpenQueryInspector?: () => void;\n  onRunQueries: () => void;\n  onOptionsChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  dataSource?: DataSourceApi;\n  dsSettings?: DataSourceInstanceSettings;\n  queries: DataQuery[];\n  helpContent: React.ReactNode;\n  isLoadingHelp: boolean;\n  isPickerOpen: boolean;\n  isAddingMixed: boolean;\n  data: PanelData;\n  isHelpOpen: boolean;\n  defaultDataSource?: DataSourceApi;\n  scrollElement?: HTMLDivElement;\n}\n\nexport class QueryGroup extends PureComponent<Props, State> {\n  backendSrv = backendSrv;\n  dataSourceSrv = getDataSourceSrv();\n  querySubscription: Unsubscribable | null = null;\n\n  state: State = {\n    isLoadingHelp: false,\n    helpContent: null,\n    isPickerOpen: false,\n    isAddingMixed: false,\n    isHelpOpen: false,\n    queries: [],\n    data: {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    },\n  };\n\n  async componentDidMount() {\n    const { queryRunner, options } = this.props;\n\n    this.querySubscription = queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n      next: (data: PanelData) => this.onPanelDataUpdate(data),\n    });\n\n    try {\n      const ds = await this.dataSourceSrv.get(options.dataSource);\n      const dsSettings = this.dataSourceSrv.getInstanceSettings(options.dataSource);\n      const defaultDataSource = await this.dataSourceSrv.get();\n      const datasource = ds.getRef();\n      const queries = options.queries.map((q) => ({\n        ...(queryIsEmpty(q) && ds?.getDefaultQuery?.(CoreApp.PanelEditor)),\n        datasource,\n        ...q,\n      }));\n      this.setState({ queries, dataSource: ds, dsSettings, defaultDataSource });\n    } catch (error) {\n      console.log('failed to load data source', error);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    this.setState({ data });\n  }\n\n  onChangeDataSource = async (newSettings: DataSourceInstanceSettings) => {\n    const { dsSettings } = this.state;\n    const currentDS = dsSettings ? await getDataSourceSrv().get(dsSettings.uid) : undefined;\n    const nextDS = await getDataSourceSrv().get(newSettings.uid);\n\n    // We need to pass in newSettings.uid as well here as that can be a variable expression and we want to store that in the query model not the current ds variable value\n    const queries = await updateQueries(nextDS, newSettings.uid, this.state.queries, currentDS);\n\n    const dataSource = await this.dataSourceSrv.get(newSettings.name);\n    this.onChange({\n      queries,\n      dataSource: {\n        name: newSettings.name,\n        uid: newSettings.uid,\n        type: newSettings.meta.id,\n        default: newSettings.isDefault,\n      },\n    });\n\n    this.setState({\n      queries,\n      dataSource: dataSource,\n      dsSettings: newSettings,\n    });\n  };\n\n  onAddQueryClick = () => {\n    const { queries } = this.state;\n    this.onQueriesChange(addQuery(queries, this.newQuery()));\n    this.onScrollBottom();\n  };\n\n  newQuery(): Partial<DataQuery> {\n    const { dsSettings, defaultDataSource } = this.state;\n\n    const ds = !dsSettings?.meta.mixed ? dsSettings : defaultDataSource;\n\n    return {\n      ...this.state.dataSource?.getDefaultQuery?.(CoreApp.PanelEditor),\n      datasource: { uid: ds?.uid, type: ds?.type },\n    };\n  }\n\n  onChange(changedProps: Partial<QueryGroupOptions>) {\n    this.props.onOptionsChange({\n      ...this.props.options,\n      ...changedProps,\n    });\n  }\n\n  onAddExpressionClick = () => {\n    this.onQueriesChange(addQuery(this.state.queries, expressionDatasource.newQuery()));\n    this.onScrollBottom();\n  };\n\n  onScrollBottom = () => {\n    setTimeout(() => {\n      if (this.state.scrollElement) {\n        this.state.scrollElement.scrollTo({ top: 10000 });\n      }\n    }, 20);\n  };\n\n  onUpdateAndRun = (options: QueryGroupOptions) => {\n    this.props.onOptionsChange(options);\n    this.props.onRunQueries();\n  };\n\n  renderTopSection(styles: QueriesTabStyles) {\n    const { onOpenQueryInspector, options } = this.props;\n    const { dataSource, data } = this.state;\n\n    return (\n      <div>\n        <div className={styles.dataSourceRow}>\n          <InlineFormLabel htmlFor=\"data-source-picker\" width={'auto'}>\n            Data source\n          </InlineFormLabel>\n          <div className={styles.dataSourceRowItem}>\n            <DataSourcePicker\n              onChange={this.onChangeDataSource}\n              current={options.dataSource}\n              metrics={true}\n              mixed={true}\n              dashboard={true}\n              variables={true}\n            />\n          </div>\n          {dataSource && (\n            <>\n              <div className={styles.dataSourceRowItem}>\n                <Button\n                  variant=\"secondary\"\n                  icon=\"question-circle\"\n                  title=\"Open data source help\"\n                  onClick={this.onOpenHelp}\n                />\n              </div>\n              <div className={styles.dataSourceRowItemOptions}>\n                <QueryGroupOptionsEditor\n                  options={options}\n                  dataSource={dataSource}\n                  data={data}\n                  onChange={this.onUpdateAndRun}\n                />\n              </div>\n              {onOpenQueryInspector && (\n                <div className={styles.dataSourceRowItem}>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={onOpenQueryInspector}\n                    aria-label={selectors.components.QueryTab.queryInspectorButton}\n                  >\n                    Query inspector\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  onOpenHelp = () => {\n    this.setState({ isHelpOpen: true });\n  };\n\n  onCloseHelp = () => {\n    this.setState({ isHelpOpen: false });\n  };\n\n  renderMixedPicker = () => {\n    return (\n      <DataSourcePicker\n        mixed={false}\n        onChange={this.onAddMixedQuery}\n        current={null}\n        autoFocus={true}\n        variables={true}\n        onBlur={this.onMixedPickerBlur}\n        openMenuOnFocus={true}\n      />\n    );\n  };\n\n  onAddMixedQuery = (datasource: any) => {\n    this.onAddQuery({ datasource: datasource.name });\n    this.setState({ isAddingMixed: false });\n  };\n\n  onMixedPickerBlur = () => {\n    this.setState({ isAddingMixed: false });\n  };\n\n  onAddQuery = (query: Partial<DataQuery>) => {\n    const { dsSettings, queries } = this.state;\n    this.onQueriesChange(addQuery(queries, query, { type: dsSettings?.type, uid: dsSettings?.uid }));\n    this.onScrollBottom();\n  };\n\n  onQueriesChange = (queries: DataQuery[]) => {\n    this.onChange({ queries });\n    this.setState({ queries });\n  };\n\n  renderQueries(dsSettings: DataSourceInstanceSettings) {\n    const { onRunQueries } = this.props;\n    const { data, queries } = this.state;\n\n    if (isSharedDashboardQuery(dsSettings.name)) {\n      return (\n        <DashboardQueryEditor\n          queries={queries}\n          panelData={data}\n          onChange={this.onQueriesChange}\n          onRunQueries={onRunQueries}\n        />\n      );\n    }\n\n    return (\n      <div aria-label={selectors.components.QueryTab.content}>\n        <QueryEditorRows\n          queries={queries}\n          dsSettings={dsSettings}\n          onQueriesChange={this.onQueriesChange}\n          onAddQuery={this.onAddQuery}\n          onRunQueries={onRunQueries}\n          data={data}\n        />\n      </div>\n    );\n  }\n\n  isExpressionsSupported(dsSettings: DataSourceInstanceSettings): boolean {\n    return (dsSettings.meta.alerting || dsSettings.meta.mixed) === true;\n  }\n\n  renderExtraActions() {\n    return GroupActionComponents.getAllExtraRenderAction()\n      .map((action, index) =>\n        action({\n          onAddQuery: this.onAddQuery,\n          onChangeDataSource: this.onChangeDataSource,\n          key: index,\n        })\n      )\n      .filter(Boolean);\n  }\n\n  renderAddQueryRow(dsSettings: DataSourceInstanceSettings, styles: QueriesTabStyles) {\n    const { isAddingMixed } = this.state;\n    const showAddButton = !(isAddingMixed || isSharedDashboardQuery(dsSettings.name));\n\n    return (\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        {showAddButton && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddQueryClick}\n            variant=\"secondary\"\n            aria-label={selectors.components.QueryTab.addQuery}\n          >\n            Query\n          </Button>\n        )}\n        {config.expressionsEnabled && this.isExpressionsSupported(dsSettings) && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddExpressionClick}\n            variant=\"secondary\"\n            className={styles.expressionButton}\n          >\n            <span>Expression&nbsp;</span>\n          </Button>\n        )}\n        {this.renderExtraActions()}\n      </HorizontalGroup>\n    );\n  }\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  render() {\n    const { isHelpOpen, dsSettings } = this.state;\n    const styles = getStyles();\n\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" scrollRefCallback={this.setScrollRef}>\n        <div className={styles.innerWrapper}>\n          {this.renderTopSection(styles)}\n          {dsSettings && (\n            <>\n              <div className={styles.queriesWrapper}>{this.renderQueries(dsSettings)}</div>\n              {this.renderAddQueryRow(dsSettings, styles)}\n              {isHelpOpen && (\n                <Modal title=\"Data source help\" isOpen={true} onDismiss={this.onCloseHelp}>\n                  <PluginHelp pluginId={dsSettings.meta.id} />\n                </Modal>\n              )}\n            </>\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n}\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    innerWrapper: css`\n      display: flex;\n      flex-direction: column;\n      padding: ${theme.spacing.md};\n    `,\n    dataSourceRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing.md};\n    `,\n    dataSourceRowItem: css`\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    dataSourceRowItemOptions: css`\n      flex-grow: 1;\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    queriesWrapper: css`\n      padding-bottom: 16px;\n    `,\n    expressionWrapper: css``,\n    expressionButton: css`\n      margin-right: ${theme.spacing.sm};\n    `,\n  };\n});\n\ntype QueriesTabStyles = ReturnType<typeof getStyles>;\n","import { CoreApp, DataQuery, DataSourceApi, hasQueryExportSupport, hasQueryImportSupport } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nexport async function updateQueries(\n  nextDS: DataSourceApi,\n  nextDSUidOrVariableExpression: string,\n  queries: DataQuery[],\n  currentDS?: DataSourceApi\n): Promise<DataQuery[]> {\n  let nextQueries = queries;\n  const datasource = { type: nextDS.type, uid: nextDSUidOrVariableExpression };\n  const DEFAULT_QUERY = { ...nextDS?.getDefaultQuery?.(CoreApp.PanelEditor), datasource, refId: 'A' };\n\n  // we are changing data source type\n  if (currentDS?.meta.id !== nextDS.meta.id) {\n    // If changing to mixed do nothing\n    if (nextDS.meta.mixed) {\n      return queries;\n    }\n    // when both data sources support abstract queries\n    else if (hasQueryExportSupport(currentDS) && hasQueryImportSupport(nextDS)) {\n      const abstractQueries = await currentDS.exportToAbstractQueries(queries);\n      nextQueries = await nextDS.importFromAbstractQueries(abstractQueries);\n    }\n    // when datasource supports query import\n    else if (currentDS && nextDS.importQueries) {\n      nextQueries = await nextDS.importQueries(queries, currentDS);\n    }\n    // Otherwise clear queries\n    else {\n      return [DEFAULT_QUERY];\n    }\n  }\n\n  if (nextQueries.length === 0) {\n    return [DEFAULT_QUERY];\n  }\n\n  // Set data source on all queries except expression queries\n  return nextQueries.map((query) => {\n    if (!isExpressionReference(query.datasource) && !nextDS.meta.mixed) {\n      query.datasource = datasource;\n    }\n    return query;\n  });\n}\n"],"names":["PluginHelp","pluginId","value","loading","error","useAsync","async","getBackendSrv","get","renderedMarkdown","renderMarkdown","LoadingPlaceholder","text","className","dangerouslySetInnerHTML","__html","QueryGroupOptionsEditor","PureComponent","constructor","props","super","event","this","setState","timeRangeFrom","target","timeRangeShift","options","onChange","newValue","emptyToNull","isValid","timeRangeValidation","timeRange","from","relativeTimeIsValid","shift","timeShiftIsValid","timeRangeHide","state","hide","cacheTimeout","maxDataPoints","parseInt","isNaN","minInterval","isOpen","renderCacheTimeoutOption","dataSource","meta","queryOptions","width","tooltip","Input","I","type","placeholder","spellCheck","onBlur","onCacheTimeoutBlur","defaultValue","renderMaxDataPointsOption","data","realMd","request","isAuto","onMaxDataPointsBlur","renderIntervalOption","realInterval","interval","minIntervalOnDs","onMinIntervalBlur","renderCollapsedText","styles","mdDesc","intervalDesc","collapsedText","render","hideTimeOverride","relativeTime","timeShift","getStyles","QueryOperationRow","id","index","title","headerElement","onOpen","onOpenOptions","onClose","onCloseOptions","onRelativeTimeChange","onOverrideTime","invalid","onTimeShiftChange","onTimeShift","InlineField","label","labelWidth","Switch","onToggleTimeOverride","rangeUtil","stylesFactory","theme","config","css","spacing","md","typography","size","sm","colors","textWeak","QueryGroup","backendSrv","getDataSourceSrv","isLoadingHelp","helpContent","isPickerOpen","isAddingMixed","isHelpOpen","queries","LoadingState","series","getDefaultTimeRange","dsSettings","currentDS","uid","undefined","nextDS","newSettings","nextDSUidOrVariableExpression","nextQueries","datasource","DEFAULT_QUERY","getDefaultQuery","CoreApp","refId","mixed","hasQueryExportSupport","hasQueryImportSupport","abstractQueries","exportToAbstractQueries","importFromAbstractQueries","importQueries","length","map","query","isExpressionReference","updateQueries","dataSourceSrv","name","default","isDefault","onQueriesChange","addQuery","newQuery","onScrollBottom","expressionDatasource","setTimeout","scrollElement","scrollTo","top","onOptionsChange","onRunQueries","DataSourcePicker","onAddMixedQuery","current","autoFocus","variables","onMixedPickerBlur","openMenuOnFocus","onAddQuery","queryRunner","querySubscription","getData","withTransforms","withFieldConfig","subscribe","next","onPanelDataUpdate","ds","getInstanceSettings","defaultDataSource","getRef","q","queryIsEmpty","console","log","componentWillUnmount","unsubscribe","changedProps","renderTopSection","onOpenQueryInspector","dataSourceRow","htmlFor","dataSourceRowItem","onChangeDataSource","metrics","dashboard","Button","variant","icon","onClick","onOpenHelp","dataSourceRowItemOptions","onUpdateAndRun","selectors","renderQueries","isSharedDashboardQuery","panelData","QueryEditorRows","isExpressionsSupported","alerting","renderExtraActions","GroupActionComponents","action","key","filter","Boolean","renderAddQueryRow","showAddButton","align","onAddQueryClick","onAddExpressionClick","expressionButton","CustomScrollbar","autoHeightMin","scrollRefCallback","setScrollRef","innerWrapper","queriesWrapper","Modal","onDismiss","onCloseHelp","inlineFormMargin","expressionWrapper"],"sourceRoot":""}