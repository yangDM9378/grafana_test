{"version":3,"file":"parcaPlugin.c71d768846741a6ade42.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/parca/types.ts","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/Stack.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/EditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/EditorRows.tsx","webpack://grafana/./public/app/plugins/datasource/parca/lang/lang.ts","webpack://grafana/./public/app/plugins/datasource/parca/lang/index.ts","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/autocomplete.ts","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/LabelsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/QueryOptions.tsx","webpack://grafana/./public/app/plugins/datasource/parca/datasource.ts","webpack://grafana/./public/app/plugins/datasource/parca/module.ts","webpack://grafana/./public/app/plugins/datasource/parca/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/QueryEditor.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useLatest.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport interface Query extends DataQuery {\n  labelSelector: string;\n  profileTypeId: string;\n  queryType: 'metrics' | 'profile' | 'both';\n}\n\nexport interface ProfileTypeMessage {\n  ID: string;\n  name: string;\n  period_type: string;\n  period_unit: string;\n  sample_type: string;\n  sample_unit: string;\n}\n\nexport const defaultQuery: Partial<Query> = {\n  labelSelector: '{}',\n  queryType: 'both',\n};\n\n/**\n * These are options configured for each DataSource instance.\n */\nexport interface ParcaDataSourceOptions extends DataSourceJsonData {}\n","import { css } from '@emotion/css';\nimport React, { CSSProperties, useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n  children: React.ReactNode;\n}\n\nexport function Stack(props: StackProps) {\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\n  return <div className={styles.root}>{props.children}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowProps {\n  children: React.ReactNode;\n  stackProps?: Partial<React.ComponentProps<typeof Stack>>;\n}\n\nexport const EditorRow: React.FC<EditorRowProps> = ({ children, stackProps }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={2} {...stackProps}>\n        {children}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowsProps {\n  children: React.ReactNode;\n}\n\nexport const EditorRows: React.FC<EditorRowsProps> = ({ children }) => {\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      {children}\n    </Stack>\n  );\n};\n","import type { languages } from 'monaco-editor';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [['{', '}']],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.fireql',\n\n  keywords: [],\n  operators: [],\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/, 'tag'],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n","import { language, languageConfiguration } from './lang';\n\nexport const languageDefinition = {\n  id: 'parca',\n  extensions: ['.parca'],\n  aliases: ['parca'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import { monacoTypes, Monaco } from '@grafana/ui';\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * At this moment we just pass it all the labels/values we get from Fire backend later on we may do something a bit\n * smarter if there will be lots of labels.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  triggerCharacters = ['{', ',', '[', '(', '=', '~', ' ', '\"'];\n\n  private labels: { [label: string]: string[] } = {};\n\n  constructor(\n    private datasource: {\n      getLabelNames: () => Promise<string[]>;\n      getLabelValues: (label: string) => Promise<string[]>;\n    },\n    private monaco: Monaco,\n    private editor: monacoTypes.editor.IStandaloneCodeEditor\n  ) {}\n\n  async init() {\n    const names = await this.datasource.getLabelNames();\n    this.labels = names.reduce<{ [label: string]: string[] }>((acc, name) => {\n      acc[name] = [];\n      return acc;\n    }, {});\n  }\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n    // Cannot be async/await cause of the ProviderResult return type\n    return this.getCompletions(situation).then((completionItems) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = completionItems.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = completionItems.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n        label: item.label,\n        insertText: item.insertText,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n      }));\n      return { suggestions };\n    });\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest label names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    if (!Object.keys(this.labels).length) {\n      return [];\n    }\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: `{${key}=\"`,\n            type: 'LABEL_NAME',\n          };\n        });\n      }\n      case 'IN_LABEL_NAME':\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: key,\n            type: 'LABEL_NAME',\n          };\n        });\n      case 'IN_LABEL_VALUE':\n        let values = [];\n        if (this.labels[situation.labelName].length) {\n          values = this.labels[situation.labelName];\n        } else {\n          values = await this.datasource.getLabelValues(situation.labelName);\n          this.labels[situation.labelName] = values;\n        }\n\n        return values.map((val) => {\n          return {\n            label: val,\n            insertText: situation.betweenQuotes ? val : `\"${val}\"`,\n            type: 'LABEL_VALUE',\n          };\n        });\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'LABEL_NAME' | 'LABEL_VALUE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Label = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_LABEL_NAME';\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_VALUE';\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\nconst labelNameRegex = /[a-zA-Z_][a-zA-Z0-9_]*/;\nconst labelValueRegex = /[^\"]*/; // anything except a double quote\nconst labelPairsRegex = new RegExp(`(${labelNameRegex.source})=\"(${labelValueRegex.source})\"`, 'g');\nconst inLabelValueRegex = new RegExp(`(${labelNameRegex.source})=(\"?)${labelValueRegex.source}$`);\nconst inLabelNameRegex = new RegExp(/[{,]\\s*[a-zA-Z0-9_]*$/);\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * As currently Fire handles just a simple {foo=\"bar\", baz=\"zyx\"} kind of values we can do with simple regex to figure\n * out where we are with the cursor.\n * @param text\n * @param offset\n */\nfunction getSituation(text: string, offset: number): Situation {\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  // Get all the labels so far in the query, so we can do some more filtering.\n  const matches = text.matchAll(labelPairsRegex);\n  const existingLabels = Array.from(matches).reduce<Label[]>((acc, match) => {\n    const [_, name, value] = match[1];\n    acc.push({ name, value });\n    return acc;\n  }, []);\n\n  // Check if we are editing a label value right now. If so also get name of the label\n  const matchLabelValue = text.substring(0, offset).match(inLabelValueRegex);\n  if (matchLabelValue) {\n    return {\n      type: 'IN_LABEL_VALUE',\n      labelName: matchLabelValue[1],\n      betweenQuotes: !!matchLabelValue[2],\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Check if we are editing a label name\n  const matchLabelName = text.substring(0, offset).match(inLabelNameRegex);\n  if (matchLabelName) {\n    return {\n      type: 'IN_LABEL_NAME',\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Will happen only if user writes something that isn't really a label selector\n  return {\n    type: 'UNKNOWN',\n  };\n}\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\nimport { useLatest } from 'react-use';\n\nimport { CodeEditor, Monaco, useStyles2, monacoTypes } from '@grafana/ui';\n\nimport { ParcaDataSource } from '../datasource';\nimport { languageDefinition } from '../lang';\n\nimport { CompletionProvider } from './autocomplete';\n\ninterface Props {\n  value: string;\n  datasource: ParcaDataSource;\n  onChange: (val: string) => void;\n  onRunQuery: (value: string) => void;\n}\n\nexport function LabelsEditor(props: Props) {\n  const setupAutocompleteFn = useAutocomplete(props.datasource);\n  const styles = useStyles2(getStyles);\n\n  const onRunQueryRef = useLatest(props.onRunQuery);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={styles.wrapper}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <CodeEditor\n        value={props.value}\n        language={langId}\n        onBlur={props.onChange}\n        containerStyles={styles.queryField}\n        monacoOptions={{\n          folding: false,\n          fontSize: 14,\n          lineNumbers: 'off',\n          overviewRulerLanes: 0,\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            verticalScrollbarSize: 8, // used as \"padding-right\"\n            horizontal: 'hidden',\n            horizontalScrollbarSize: 0,\n          },\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n          padding: {\n            top: 5,\n            bottom: 6,\n          },\n        }}\n        onBeforeEditorMount={ensureParcaQL}\n        onEditorDidMount={(editor, monaco) => {\n          setupAutocompleteFn(editor, monaco);\n\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n        }}\n      />\n    </div>\n  );\n}\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource\n */\nfunction useAutocomplete(datasource: ParcaDataSource) {\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return async (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    const provider = new CompletionProvider(datasource, monaco, editor);\n    await provider.init();\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, provider);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet parcaqlSetupDone = false;\nconst langId = 'parca';\n\nfunction ensureParcaQL(monaco: Monaco) {\n  if (parcaqlSetupDone === false) {\n    parcaqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\nconst getStyles = () => {\n  return {\n    queryField: css`\n      flex: 1;\n      // Not exactly sure but without this the editor doe not shrink after resizing (so you can make it bigger but not\n      // smaller). At the same time this does not actually make the editor 100px because it has flex 1 so I assume\n      // this should sort of act as a flex-basis (but flex-basis does not work for this). So yeah CSS magic.\n      width: 100px;\n    `,\n    wrapper: css`\n      display: flex;\n      flex: 1;\n      border: 1px solid rgba(36, 41, 46, 0.3);\n      border-radius: 2px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2, RadioButtonGroup, Field } from '@grafana/ui';\n\nimport { Query } from '../types';\n\nimport { Stack } from './Stack';\n\nexport interface Props {\n  query: Query;\n  onQueryTypeChange: (val: Query['queryType']) => void;\n  app?: CoreApp;\n}\n\nconst rangeOptions: Array<{ value: Query['queryType']; label: string; description: string }> = [\n  { value: 'metrics', label: 'Metric', description: 'Return aggregated metrics' },\n  { value: 'profile', label: 'Profile', description: 'Return profile' },\n  { value: 'both', label: 'Both', description: 'Return both metric and profile data' },\n];\n\nfunction getOptions(app?: CoreApp) {\n  if (app === CoreApp.Explore) {\n    return rangeOptions;\n  }\n  return rangeOptions.filter((option) => option.value !== 'both');\n}\n\n/**\n * Base on QueryOptionGroup component from grafana/ui but that is not available yet.\n */\nexport function QueryOptions({ query, onQueryTypeChange, app }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n  const options = getOptions(app);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>Options</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            <span>Type: {query.queryType}</span>\n          </div>\n        )}\n      </div>\n      {isOpen && (\n        <div className={styles.body}>\n          <Field label={'Query Type'}>\n            <RadioButtonGroup options={options} value={query.queryType} onChange={onQueryTypeChange} />\n          </Field>\n        </div>\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { Observable, of } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\n\nimport { ParcaDataSourceOptions, Query, ProfileTypeMessage } from './types';\n\nexport class ParcaDataSource extends DataSourceWithBackend<Query, ParcaDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<ParcaDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<Query>): Observable<DataQueryResponse> {\n    if (!request.targets.every((q) => q.profileTypeId)) {\n      // When changing data source in explore, firs query can be sent without filled in profileTypeId\n      return of({ data: [] });\n    }\n\n    return super.query(request);\n  }\n\n  async getProfileTypes(): Promise<ProfileTypeMessage[]> {\n    return await super.getResource('profileTypes');\n  }\n\n  async getLabelNames(): Promise<string[]> {\n    return await super.getResource('labelNames');\n  }\n\n  async getLabelValues(labelName: string): Promise<string[]> {\n    return await super.getResource('labelValues', { label: labelName });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor/QueryEditor';\nimport { ParcaDataSource } from './datasource';\nimport { Query, ParcaDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<ParcaDataSource, Query, ParcaDataSourceOptions>(ParcaDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nimport { ParcaDataSourceOptions } from './types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<ParcaDataSourceOptions> {}\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:7070'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n    </>\n  );\n};\n","import { defaults } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useMount } from 'react-use';\n\nimport { CoreApp, QueryEditorProps } from '@grafana/data';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\n\nimport { ParcaDataSource } from '../datasource';\nimport { defaultQuery, ParcaDataSourceOptions, ProfileTypeMessage, Query } from '../types';\n\nimport { EditorRow } from './EditorRow';\nimport { EditorRows } from './EditorRows';\nimport { LabelsEditor } from './LabelsEditor';\nimport { QueryOptions } from './QueryOptions';\n\nexport type Props = QueryEditorProps<ParcaDataSource, Query, ParcaDataSourceOptions>;\n\nexport function QueryEditor(props: Props) {\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>([]);\n\n  function onProfileTypeChange(value: string[], selectedOptions: CascaderOption[]) {\n    if (selectedOptions.length === 0) {\n      return;\n    }\n    const id = selectedOptions[selectedOptions.length - 1].value;\n    if (typeof id !== 'string') {\n      throw new Error('id is not string');\n    }\n    props.onChange({ ...props.query, profileTypeId: id });\n  }\n\n  function onLabelSelectorChange(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n  }\n\n  function handleRunQuery(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n    props.onRunQuery();\n  }\n\n  useMount(async () => {\n    const profileTypes = await props.datasource.getProfileTypes();\n    setProfileTypes(profileTypes);\n  });\n\n  // Turn profileTypes into cascader options\n  const cascaderOptions = useMemo(() => {\n    let mainTypes = new Map<string, CascaderOption>();\n    // Classify profile types by name then sample type.\n    for (let profileType of profileTypes) {\n      if (!mainTypes.has(profileType.name)) {\n        mainTypes.set(profileType.name, {\n          label: profileType.name,\n          value: profileType.ID,\n          children: [],\n        });\n      }\n      mainTypes.get(profileType.name)?.children?.push({\n        label: profileType.sample_type,\n        value: profileType.ID,\n      });\n    }\n    return Array.from(mainTypes.values());\n  }, [profileTypes]);\n\n  const selectedProfileName = useMemo(() => {\n    if (!profileTypes) {\n      return 'Loading';\n    }\n    const profile = profileTypes.find((type) => type.ID === props.query.profileTypeId);\n    if (!profile) {\n      return 'Select a profile type';\n    }\n\n    return profile.name + ' - ' + profile.sample_type;\n  }, [props.query.profileTypeId, profileTypes]);\n\n  let query = normalizeQuery(props.query, props.app);\n\n  return (\n    <EditorRows>\n      <EditorRow stackProps={{ wrap: false, gap: 1 }}>\n        <ButtonCascader onChange={onProfileTypeChange} options={cascaderOptions} buttonProps={{ variant: 'secondary' }}>\n          {selectedProfileName}\n        </ButtonCascader>\n        <LabelsEditor\n          value={query.labelSelector}\n          onChange={onLabelSelectorChange}\n          datasource={props.datasource}\n          onRunQuery={handleRunQuery}\n        />\n      </EditorRow>\n      <EditorRow>\n        <QueryOptions\n          query={query}\n          onQueryTypeChange={(val) => {\n            props.onChange({ ...query, queryType: val });\n          }}\n          app={props.app}\n        />\n      </EditorRow>\n    </EditorRows>\n  );\n}\n\nfunction normalizeQuery(query: Query, app?: CoreApp) {\n  let normalized = defaults(query, defaultQuery);\n  if (app !== CoreApp.Explore && normalized.queryType === 'both') {\n    // In dashboards and other places, we can't show both types of graphs at the same time.\n    // This will also be a default when having 'both' query and adding it from explore to dashboard\n    normalized.queryType = 'profile';\n  }\n  return normalized;\n}\n","import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["defaultQuery","labelSelector","queryType","Stack","props","styles","useStyles2","useCallback","theme","getStyles","className","root","children","css","display","flexDirection","direction","flexWrap","wrap","undefined","alignItems","gap","spacing","flexGrow","EditorRow","stackProps","padding","backgroundColor","colors","background","secondary","borderRadius","shape","EditorRows","languageDefinition","id","extensions","aliases","mimetypes","def","language","ignoreCase","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","integersuffix","floatsuffix","tokenizer","include","cases","string_double","string_single","clauses","whitespace","languageConfiguration","wordPattern","brackets","autoClosingPairs","open","close","surroundingPairs","folding","CompletionProvider","constructor","datasource","monaco","editor","async","names","this","getLabelNames","labels","reduce","acc","name","provideCompletionItems","model","position","getModel","suggestions","range","offset","word","getWordAtPosition","Range","lift","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","fromPositions","positionClone","column","getOffsetAt","getRangeAndOffset","situation","text","type","matches","matchAll","labelPairsRegex","existingLabels","Array","from","match","_","value","push","matchLabelValue","substring","inLabelValueRegex","labelName","betweenQuotes","otherLabels","inLabelNameRegex","getSituation","getValue","getCompletions","then","completionItems","maxIndexDigits","length","toString","map","item","index","kind","getMonacoCompletionItemKind","label","insertText","sortText","padStart","Object","keys","key","values","getLabelValues","val","Error","languages","CompletionItemKind","Enum","EnumMember","labelNameRegex","labelValueRegex","RegExp","source","LabelsEditor","setupAutocompleteFn","autocompleteDisposeFun","useRef","useEffect","current","provider","init","dispose","registerCompletionItemProvider","langId","useAutocomplete","onRunQueryRef","useLatest","onRunQuery","containerRef","wrapper","ref","CodeEditor","onBlur","onChange","containerStyles","queryField","monacoOptions","fontSize","lineNumbers","overviewRulerLanes","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","scrollBeyondLastLine","wordWrap","top","bottom","onBeforeEditorMount","ensureParcaQL","onEditorDidMount","updateElementHeight","containerDiv","pixelHeight","getContentHeight","style","height","EDITOR_HEIGHT_OFFSET","width","pixelWidth","clientWidth","layout","onDidContentSizeChange","addCommand","KeyMod","Shift","KeyCode","Enter","parcaqlSetupDone","register","setMonarchTokensProvider","setLanguageConfiguration","rangeOptions","description","QueryOptions","query","onQueryTypeChange","app","isOpen","toggleOpen","useToggle","options","CoreApp","filter","option","getOptions","header","onClick","title","toggle","Icon","body","Field","RadioButtonGroup","switchLabel","color","cursor","typography","bodySmall","primary","emphasize","overflow","fontWeight","fontWeightMedium","margin","paddingLeft","paddingTop","marginRight","ParcaDataSource","DataSourceWithBackend","instanceSettings","super","request","targets","every","q","profileTypeId","of","data","getResource","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","setQueryEditor","profileTypes","setProfileTypes","useState","useMount","getProfileTypes","cascaderOptions","useMemo","mainTypes","Map","profileType","has","set","ID","get","sample_type","selectedProfileName","profile","find","normalized","defaults","normalizeQuery","ButtonCascader","selectedOptions","buttonProps","variant","fn"],"sourceRoot":""}