{"version":3,"file":"FolderPermissions.6f96b7eef740305cf912.js","mappings":"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","sources":["webpack://grafana/./public/app/features/folders/AccessControlFolderPermissions.tsx","webpack://grafana/./public/app/features/folders/FolderPermissions.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\ninterface RouteProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: RouteProps) {\n  const uid = props.match.params.uid;\n  return {\n    uid: uid,\n    pageNav: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n  };\n}\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\nexport const AccessControlFolderPermissions = ({ uid, getFolderByUid, pageNav }: Props) => {\n  useEffect(() => {\n    getFolderByUid(uid);\n  }, [getFolderByUid, uid]);\n\n  const canSetPermissions = contextSrv.hasPermission(AccessControlAction.FoldersPermissionsWrite);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n      <Page.Contents>\n        <Permissions resource=\"folders\" resourceId={uid} canSetPermissions={canSetPermissions} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AccessControlFolderPermissions);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Tooltip, Icon, Button } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { Page } from 'app/core/components/Page/Page';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\n\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    pageNav: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { pageNav, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navId=\"browse\" pageNav={pageNav.main}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <Button className=\"pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              Add Permission\n            </Button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderPermissions);\n"],"names":["mapDispatchToProps","getFolderByUid","connector","connect","state","props","uid","match","params","pageNav","getNavModel","navIndex","getLoadingNav","AccessControlFolderPermissions","useEffect","canSetPermissions","contextSrv","AccessControlAction","navId","main","P","resource","resourceId","getFolderPermissions","updateFolderPermission","removeFolderPermission","addFolderPermission","folderUid","folder","FolderPermissions","PureComponent","constructor","super","this","setState","isAdding","item","level","newItem","componentDidMount","render","id","isLoading","folderInfo","title","url","className","placement","content","name","onClick","onOpenAddPermissions","disabled","in","onAddPermission","onCancel","onCancelAddPermission","items","permissions","onRemoveItem","onPermissionChanged","isFetching"],"sourceRoot":""}