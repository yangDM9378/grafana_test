{"version":3,"file":"PlaylistPage.96160ae301b11aa18c1e.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/playlist/EmptyQueryListBanner.tsx","webpack://grafana/./public/app/features/playlist/ShareModal.tsx","webpack://grafana/./public/app/features/playlist/PlaylistPageList.tsx","webpack://grafana/./public/app/features/playlist/StartModal.tsx","webpack://grafana/./public/app/features/playlist/PlaylistPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyQueryListBanner = () => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.noResult}>No playlist found!</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    noResult: css`\n      padding: ${theme.spacing(2)};\n      background: ${theme.colors.secondary.main};\n      font-style: italic;\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import React, { useState } from 'react';\n\nimport { SelectableValue, UrlQueryMap, urlUtil } from '@grafana/data';\nimport { Checkbox, ClipboardButton, Field, FieldSet, Input, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { buildBaseUrl } from 'app/features/dashboard/components/ShareModal/utils';\n\nimport { PlaylistMode } from './types';\n\ninterface Props {\n  playlistUid: string;\n  onDismiss: () => void;\n}\n\nexport const ShareModal = ({ playlistUid, onDismiss }: Props) => {\n  const [mode, setMode] = useState<PlaylistMode>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<PlaylistMode>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const params: UrlQueryMap = {};\n  if (mode) {\n    params.kiosk = mode;\n  }\n  if (autoFit) {\n    params.autofitpanels = true;\n  }\n\n  const shareUrl = urlUtil.renderUrl(`${buildBaseUrl()}/play/${playlistUid}`, params);\n\n  return (\n    <Modal isOpen={true} title=\"Share playlist\" onDismiss={onDismiss}>\n      <FieldSet>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Field>\n          <Checkbox\n            label=\"Autofit\"\n            description=\"Panel heights will be adjusted to fit screen size\"\n            name=\"autofix\"\n            value={autoFit}\n            onChange={(e) => setAutofit(e.currentTarget.checked)}\n          />\n        </Field>\n\n        <Field label=\"Link URL\">\n          <Input\n            id=\"link-url-input\"\n            value={shareUrl}\n            readOnly\n            addonAfter={\n              <ClipboardButton icon=\"copy\" variant=\"primary\" getText={() => shareUrl}>\n                Copy\n              </ClipboardButton>\n            }\n          />\n        </Field>\n      </FieldSet>\n    </Modal>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, LinkButton, ModalsController, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { DashNavButton } from 'app/features/dashboard/components/DashNav/DashNavButton';\n\nimport { ShareModal } from './ShareModal';\nimport { Playlist } from './types';\n\ninterface Props {\n  setStartPlaylist: (playlistItem: Playlist) => void;\n  setPlaylistToDelete: (playlistItem: Playlist) => void;\n  playlists: Playlist[] | undefined;\n}\n\nexport const PlaylistPageList = ({ playlists, setStartPlaylist, setPlaylistToDelete }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <ul className={styles.list}>\n      {playlists!.map((playlist: Playlist) => (\n        <li className={styles.listItem} key={playlist.uid}>\n          <Card>\n            <Card.Heading>\n              {playlist.name}\n              <ModalsController key=\"button-share\">\n                {({ showModal, hideModal }) => (\n                  <DashNavButton\n                    tooltip=\"Share playlist\"\n                    icon=\"share-alt\"\n                    iconSize=\"lg\"\n                    onClick={() => {\n                      showModal(ShareModal, {\n                        playlistUid: playlist.uid,\n                        onDismiss: hideModal,\n                      });\n                    }}\n                  />\n                )}\n              </ModalsController>\n            </Card.Heading>\n            <Card.Actions>\n              <Button variant=\"secondary\" icon=\"play\" onClick={() => setStartPlaylist(playlist)}>\n                Start playlist\n              </Button>\n              {contextSrv.isEditor && (\n                <>\n                  <LinkButton key=\"edit\" variant=\"secondary\" href={`/playlists/edit/${playlist.uid}`} icon=\"cog\">\n                    Edit playlist\n                  </LinkButton>\n                  <Button\n                    disabled={false}\n                    onClick={() => setPlaylistToDelete(playlist)}\n                    icon=\"trash-alt\"\n                    variant=\"destructive\"\n                  >\n                    Delete playlist\n                  </Button>\n                </>\n              )}\n            </Card.Actions>\n          </Card>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      display: 'grid',\n    }),\n    listItem: css({\n      listStyle: 'none',\n    }),\n  };\n}\n","import React, { useState } from 'react';\n\nimport { SelectableValue, UrlQueryMap, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Button, Checkbox, Field, FieldSet, Modal, RadioButtonGroup } from '@grafana/ui';\n\nimport { Playlist, PlaylistMode } from './types';\n\nexport interface Props {\n  playlist: Playlist;\n  onDismiss: () => void;\n}\n\nexport const StartModal = ({ playlist, onDismiss }: Props) => {\n  const [mode, setMode] = useState<PlaylistMode>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<PlaylistMode>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const onStart = () => {\n    const params: UrlQueryMap = {};\n    if (mode) {\n      params.kiosk = mode;\n    }\n    if (autoFit) {\n      params.autofitpanels = true;\n    }\n    locationService.push(urlUtil.renderUrl(`/playlists/play/${playlist.uid}`, params));\n  };\n\n  return (\n    <Modal isOpen={true} icon=\"play\" title=\"Start playlist\" onDismiss={onDismiss}>\n      <FieldSet>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Checkbox\n          label=\"Autofit\"\n          description=\"Panel heights will be adjusted to fit screen size\"\n          name=\"autofix\"\n          value={autoFit}\n          onChange={(e) => setAutofit(e.currentTarget.checked)}\n        />\n      </FieldSet>\n      <Modal.ButtonRow>\n        <Button variant=\"primary\" onClick={onStart}>\n          Start {playlist.name}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { ConfirmModal } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { EmptyQueryListBanner } from './EmptyQueryListBanner';\nimport { PlaylistPageList } from './PlaylistPageList';\nimport { StartModal } from './StartModal';\nimport { deletePlaylist, getAllPlaylist, searchPlaylists } from './api';\nimport { Playlist } from './types';\n\nexport const PlaylistPage = () => {\n  const [forcePlaylistsFetch, setForcePlaylistsFetch] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const allPlaylists = useAsync(() => getAllPlaylist(), [forcePlaylistsFetch]);\n  const playlists = useMemo(() => searchPlaylists(allPlaylists.value ?? [], searchQuery), [searchQuery, allPlaylists]);\n\n  const [startPlaylist, setStartPlaylist] = useState<Playlist | undefined>();\n  const [playlistToDelete, setPlaylistToDelete] = useState<Playlist | undefined>();\n\n  const hasPlaylists = playlists && playlists.length > 0;\n  const onDismissDelete = () => setPlaylistToDelete(undefined);\n  const onDeletePlaylist = () => {\n    if (!playlistToDelete) {\n      return;\n    }\n    deletePlaylist(playlistToDelete.uid).finally(() => {\n      setForcePlaylistsFetch(forcePlaylistsFetch + 1);\n      setPlaylistToDelete(undefined);\n    });\n  };\n\n  const emptyListBanner = (\n    <EmptyListCTA\n      title=\"There are no playlists created yet\"\n      buttonIcon=\"plus\"\n      buttonLink=\"playlists/new\"\n      buttonTitle=\"Create Playlist\"\n      buttonDisabled={!contextSrv.isEditor}\n      proTip=\"You can use playlists to cycle dashboards on TVs without user control\"\n      proTipLink=\"http://docs.grafana.org/reference/playlist/\"\n      proTipLinkTitle=\"Learn more\"\n      proTipTarget=\"_blank\"\n    />\n  );\n\n  const showSearch = playlists.length > 0 || searchQuery.length > 0;\n\n  return (\n    <Page navId=\"dashboards/playlists\">\n      <Page.Contents isLoading={allPlaylists.loading}>\n        {showSearch && (\n          <PageActionBar\n            searchQuery={searchQuery}\n            linkButton={contextSrv.isEditor ? { title: 'New playlist', href: '/playlists/new' } : undefined}\n            setSearchQuery={setSearchQuery}\n          />\n        )}\n\n        {!hasPlaylists && searchQuery ? (\n          <EmptyQueryListBanner />\n        ) : (\n          <PlaylistPageList\n            playlists={playlists}\n            setStartPlaylist={setStartPlaylist}\n            setPlaylistToDelete={setPlaylistToDelete}\n          />\n        )}\n        {!showSearch && emptyListBanner}\n        {playlistToDelete && (\n          <ConfirmModal\n            title={playlistToDelete.name}\n            confirmText=\"Delete\"\n            body={`Are you sure you want to delete '${playlistToDelete.name}' playlist?`}\n            onConfirm={onDeletePlaylist}\n            isOpen={Boolean(playlistToDelete)}\n            onDismiss={onDismissDelete}\n          />\n        )}\n        {startPlaylist && <StartModal playlist={startPlaylist} onDismiss={() => setStartPlaylist(undefined)} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default PlaylistPage;\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","value","onChange","title","EmptyQueryListBanner","styles","useStyles2","getStyles","noResult","theme","css","spacing","colors","secondary","main","ShareModal","playlistUid","onDismiss","mode","setMode","useState","autoFit","setAutofit","params","kiosk","autofitpanels","shareUrl","urlUtil","buildBaseUrl","Modal","isOpen","FieldSet","Field","label","RadioButtonGroup","options","Checkbox","description","name","e","currentTarget","checked","Input","I","id","readOnly","addonAfter","ClipboardButton","icon","variant","getText","PlaylistPageList","playlists","setStartPlaylist","setPlaylistToDelete","list","map","playlist","listItem","Card","showModal","hideModal","DashNavButton","tooltip","iconSize","onClick","uid","Button","contextSrv","display","listStyle","StartModal","locationService","PlaylistPage","forcePlaylistsFetch","setForcePlaylistsFetch","allPlaylists","useAsync","getAllPlaylist","useMemo","searchPlaylists","startPlaylist","playlistToDelete","hasPlaylists","length","emptyListBanner","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","buttonDisabled","proTip","proTipLink","proTipLinkTitle","proTipTarget","showSearch","Page","navId","isLoading","loading","undefined","ConfirmModal","confirmText","body","onConfirm","deletePlaylist","finally","Boolean"],"sourceRoot":""}