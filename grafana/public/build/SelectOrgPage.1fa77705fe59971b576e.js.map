{"version":3,"file":"SelectOrgPage.1fa77705fe59971b576e.js","mappings":"0PAWA,MAAMA,EAAW,CACfC,KAAM,CACJC,KAAM,UACNC,SAAU,cACVC,KAAM,8BAERC,KAAM,CACJD,KAAM,+BAUJE,EAAqB,CACzBC,oBAAmB,KACnBC,qBAAoBA,EAAAA,IAGhBC,GAAYC,EAAAA,EAAAA,UAXOC,IAChB,CACLC,SAAUD,EAAME,aAAaD,YASUN,GAI9BQ,EAA2B,IAA6D,IAA5D,oBAAEP,EAAmB,qBAAEC,EAAoB,SAAEI,GAAU,EAU9F,OAJAG,EAAAA,EAAAA,IAAc,KACZP,GAAsB,KAItB,SAAC,IAAI,CAACR,SAAUA,EAAS,UACvB,SAAC,aAAa,WACZ,kCACE,oLAIA,SAAC,KAAe,CAACgB,MAAI,WAClBJ,GACCA,EAASK,KAAKC,IACZ,SAAC,KAAM,CAAiBhB,KAAK,SAASiB,QAAS,IApB1CC,iBACXb,EAAoBW,EAAIG,OAC9BC,OAAOC,SAASC,KAAOC,EAAAA,EAAAA,UAAmB,GAAG,EAkBoBC,CAAWR,GAAK,SAClEA,EAAIS,MADMT,EAAIG,iBAOtB,EAIX,EAAeZ,EAAUK,E","sources":["webpack://grafana/./public/app/features/org/SelectOrgPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useEffectOnce } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { Button, HorizontalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState, UserOrg } from 'app/types';\n\nimport { getUserOrganizations, setUserOrganization } from './state/actions';\n\nconst navModel = {\n  main: {\n    icon: 'grafana' as const,\n    subTitle: 'Preferences',\n    text: 'Select active organization',\n  },\n  node: {\n    text: 'Select active organization',\n  },\n};\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    userOrgs: state.organization.userOrgs,\n  };\n};\n\nconst mapDispatchToProps = {\n  setUserOrganization,\n  getUserOrganizations,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\nexport const SelectOrgPage: FC<Props> = ({ setUserOrganization, getUserOrganizations, userOrgs }) => {\n  const setUserOrg = async (org: UserOrg) => {\n    await setUserOrganization(org.orgId);\n    window.location.href = config.appSubUrl + '/';\n  };\n\n  useEffectOnce(() => {\n    getUserOrganizations();\n  });\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div>\n          <p>\n            You have been invited to another organization! Please select which organization that you want to use right\n            now. You can change this later at any time.\n          </p>\n          <HorizontalGroup wrap>\n            {userOrgs &&\n              userOrgs.map((org) => (\n                <Button key={org.orgId} icon=\"signin\" onClick={() => setUserOrg(org)}>\n                  {org.name}\n                </Button>\n              ))}\n          </HorizontalGroup>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(SelectOrgPage);\n"],"names":["navModel","main","icon","subTitle","text","node","mapDispatchToProps","setUserOrganization","getUserOrganizations","connector","connect","state","userOrgs","organization","SelectOrgPage","useEffectOnce","wrap","map","org","onClick","async","orgId","window","location","href","config","setUserOrg","name"],"sourceRoot":""}