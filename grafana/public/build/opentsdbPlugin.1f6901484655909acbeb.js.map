{"version":3,"file":"opentsdbPlugin.1f6901484655909acbeb.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbDetails.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/styles.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/DownSample.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/FilterSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/MetricSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/RateSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/TagSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/module.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/ConfigEditor.tsx"],"sourcesContent":["import React, { SyntheticEvent } from 'react';\n\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\n\nimport { useUniqueId } from '../../influxdb/components/useUniqueId';\nimport { OpenTsdbOptions } from '../types';\n\nconst { Select, Input } = LegacyForms;\n\nconst tsdbVersions = [\n  { label: '<=2.1', value: 1 },\n  { label: '==2.2', value: 2 },\n  { label: '==2.3', value: 3 },\n];\n\nconst tsdbResolutions = [\n  { label: 'second', value: 1 },\n  { label: 'millisecond', value: 2 },\n];\n\ninterface Props {\n  value: DataSourceSettings<OpenTsdbOptions>;\n  onChange: (value: DataSourceSettings<OpenTsdbOptions>) => void;\n}\n\nexport const OpenTsdbDetails = (props: Props) => {\n  const { onChange, value } = props;\n\n  const idSuffix = useUniqueId();\n\n  return (\n    <>\n      <h5>OpenTSDB settings</h5>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`select-version-${idSuffix}`}>\n          Version\n        </InlineFormLabel>\n        <Select\n          inputId={`select-version-${idSuffix}`}\n          options={tsdbVersions}\n          value={tsdbVersions.find((version) => version.value === value.jsonData.tsdbVersion) ?? tsdbVersions[0]}\n          onChange={onSelectChangeHandler('tsdbVersion', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`select-resolution-${idSuffix}`}>\n          Resolution\n        </InlineFormLabel>\n        <Select\n          inputId={`select-resolution-${idSuffix}`}\n          options={tsdbResolutions}\n          value={\n            tsdbResolutions.find((resolution) => resolution.value === value.jsonData.tsdbResolution) ??\n            tsdbResolutions[0]\n          }\n          onChange={onSelectChangeHandler('tsdbResolution', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7} htmlFor={`lookup-input-${idSuffix}`}>\n          Lookup limit\n        </InlineFormLabel>\n        <Input\n          id={`lookup-input-${idSuffix}`}\n          type=\"number\"\n          value={value.jsonData.lookupLimit ?? 1000}\n          onChange={onInputChangeHandler('lookupLimit', value, onChange)}\n        />\n      </div>\n    </>\n  );\n};\n\nconst onSelectChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) => (newValue: SelectableValue) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: newValue.value,\n      },\n    });\n  };\n\nconst onInputChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.value,\n      },\n    });\n  };\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","import React from 'react';\n\nimport { toOption } from '@grafana/data';\nimport { InlineLabel, Select, Input, InlineFormLabel, InlineSwitch } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nimport { paddingRightClass } from './styles';\n\nexport interface DownSampleProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  aggregators: string[];\n  fillPolicies: string[];\n  tsdbVersion: number;\n}\n\nexport function DownSample({ query, onChange, onRunQuery, aggregators, fillPolicies, tsdbVersion }: DownSampleProps) {\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n  const fillPolicyOptions = fillPolicies.map((value: string) => toOption(value));\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={\n            <div>\n              Leave interval blank for auto or for example use <code>1m</code>\n            </div>\n          }\n        >\n          Down sample\n        </InlineFormLabel>\n        <Input\n          width={25}\n          className={paddingRightClass}\n          data-testid={testIds.interval}\n          placeholder=\"interval\"\n          value={query.downsampleInterval ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, downsampleInterval: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          className=\"gf-form-input\"\n          value={query.downsampleAggregator ? toOption(query.downsampleAggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, downsampleAggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      {tsdbVersion >= 2 && (\n        <div className=\"gf-form\">\n          <InlineLabel className=\"width-6 query-keyword\">Fill</InlineLabel>\n          <Select\n            inputId=\"opentsdb-fillpolicy-select\"\n            value={query.downsampleFillPolicy ? toOption(query.downsampleFillPolicy) : undefined}\n            options={fillPolicyOptions}\n            onChange={({ value }) => {\n              if (value) {\n                onChange({ ...query, downsampleFillPolicy: value });\n                onRunQuery();\n              }\n            }}\n          />\n        </div>\n      )}\n      <div className=\"gf-form\">\n        <InlineFormLabel className=\"query-keyword\">Disable downsampling</InlineFormLabel>\n        <InlineSwitch\n          value={query.disableDownsampling ?? false}\n          onChange={() => {\n            const disableDownsampling = query.disableDownsampling ?? false;\n            onChange({ ...query, disableDownsampling: !disableDownsampling });\n            onRunQuery();\n          }}\n        />\n      </div>\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-downsample',\n  interval: 'downsample-interval',\n};\n","import { size } from 'lodash';\nimport React, { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { InlineLabel, Select, InlineFormLabel, InlineSwitch, Icon, clearButtonStyles, useStyles2 } from '@grafana/ui';\n\nimport { OpenTsdbFilter, OpenTsdbQuery } from '../types';\n\nexport interface FilterSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  filterTypes: string[];\n  suggestTagValues: () => Promise<SelectableValue[]>;\n}\n\nexport function FilterSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  filterTypes,\n  suggestTagValues,\n}: FilterSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [tagValues, updTagValues] = useState<Array<SelectableValue<string>>>();\n  const [valueIsLoading, updValueIsLoading] = useState<boolean>();\n\n  const [addFilterMode, updAddFilterMode] = useState<boolean>(false);\n\n  const [curFilterType, updCurFilterType] = useState<string>('iliteral_or');\n  const [curFilterKey, updCurFilterKey] = useState<string>('');\n  const [curFilterValue, updCurFilterValue] = useState<string>('');\n  const [curFilterGroupBy, updCurFilterGroupBy] = useState<boolean>(false);\n\n  const [errors, setErrors] = useState<string>('');\n\n  const filterTypesOptions = filterTypes.map((value: string) => toOption(value));\n\n  function changeAddFilterMode() {\n    updAddFilterMode(!addFilterMode);\n  }\n\n  function addFilter() {\n    if (query.tags && size(query.tags) > 0) {\n      const err = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addFilterMode) {\n      updAddFilterMode(true);\n      return;\n    }\n\n    // Add the filter to the query\n    const currentFilter = {\n      type: curFilterType,\n      tagk: curFilterKey,\n      filter: curFilterValue,\n      groupBy: curFilterGroupBy,\n    };\n\n    // filters may be undefined\n    query.filters = query.filters ? query.filters.concat([currentFilter]) : [currentFilter];\n\n    // reset the inputs\n    updCurFilterType('literal_or');\n    updCurFilterKey('');\n    updCurFilterValue('');\n    updCurFilterGroupBy(false);\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the filter ditor\n    changeAddFilterMode();\n  }\n\n  function removeFilter(index: number) {\n    query.filters?.splice(index, 1);\n    // fire the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editFilter(fil: OpenTsdbFilter, idx: number) {\n    removeFilter(idx);\n    updCurFilterKey(fil.tagk);\n    updCurFilterValue(fil.filter);\n    updCurFilterType(fil.type);\n    updCurFilterGroupBy(fil.groupBy);\n    addFilter();\n  }\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customFilterOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={<div>Filters does not work with tags, either of the two will work but not both.</div>}\n        >\n          Filters\n        </InlineFormLabel>\n        {query.filters &&\n          query.filters.map((fil: OpenTsdbFilter, idx: number) => {\n            return (\n              <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n                {fil.tagk} = {fil.type}({fil.filter}), groupBy = {'' + fil.groupBy}\n                <button type=\"button\" className={buttonStyles} onClick={() => editFilter(fil, idx)}>\n                  <Icon name={'pen'} />\n                </button>\n                <button\n                  type=\"button\"\n                  className={buttonStyles}\n                  onClick={() => removeFilter(idx)}\n                  data-testid={testIds.remove}\n                >\n                  <Icon name={'times'} />\n                </button>\n              </InlineFormLabel>\n            );\n          })}\n        {!addFilterMode && (\n          <button className=\"gf-form-label\" type=\"button\" onClick={changeAddFilterMode} aria-label=\"Add filter\">\n            <Icon name={'plus'} />\n          </button>\n        )}\n      </div>\n      {addFilterMode && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              className=\"gf-form-input\"\n              value={curFilterKey ? toOption(curFilterKey) : undefined}\n              placeholder=\"key\"\n              allowCustomValue\n              filterOption={customFilterOption}\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterKey(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <InlineLabel className=\"width-4 query-keyword\">Type</InlineLabel>\n            <Select\n              inputId=\"opentsdb-aggregator-select\"\n              value={curFilterType ? toOption(curFilterType) : undefined}\n              options={filterTypesOptions}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterType(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagv-select\"\n              className=\"gf-form-input\"\n              value={curFilterValue ? toOption(curFilterValue) : undefined}\n              placeholder=\"filter\"\n              allowCustomValue\n              filterOption={customFilterOption}\n              onOpenMenu={async () => {\n                if (!tagValues) {\n                  updValueIsLoading(true);\n                  const tVs = await suggestTagValues();\n                  updTagValues(tVs);\n                  updValueIsLoading(false);\n                }\n              }}\n              isLoading={valueIsLoading}\n              options={tagValues}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterValue(value);\n                }\n              }}\n            />\n          </div>\n\n          <InlineFormLabel width={5} className=\"query-keyword\">\n            Group by\n          </InlineFormLabel>\n          <InlineSwitch\n            value={curFilterGroupBy}\n            onChange={() => {\n              // DO NOT RUN THE QUERY HERE\n              // OLD FUNCTIONALITY RAN THE QUERY\n              updCurFilterGroupBy(!curFilterGroupBy);\n            }}\n          />\n          <div className=\"gf-form\">\n            {errors && (\n              <div className=\"gf-form-label\" title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </div>\n            )}\n            <div className=\"gf-form-label\">\n              <button type=\"button\" className={buttonStyles} onClick={addFilter}>\n                add filter\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddFilterMode}>\n                <Icon name={'times'} />\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-filter',\n  list: 'opentsdb-filter-list',\n  error: 'opentsdb-filter-error',\n  remove: 'opentsdb-filter-remove',\n};\n","import React, { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Select, Input, InlineFormLabel } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface MetricSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestMetrics: () => Promise<SelectableValue[]>;\n  aggregators: string[];\n}\n\nexport function MetricSection({ query, onChange, onRunQuery, suggestMetrics, aggregators }: MetricSectionProps) {\n  const [state, setState] = useState<{\n    metrics?: Array<SelectableValue<string>>;\n    isLoading?: boolean;\n  }>({});\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customFilterOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={8} className=\"query-keyword\">\n          Metric\n        </InlineFormLabel>\n        <Select\n          width={25}\n          inputId=\"opentsdb-metric-select\"\n          className=\"gf-form-input\"\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder=\"Metric name\"\n          allowCustomValue\n          filterOption={customFilterOption}\n          onOpenMenu={async () => {\n            if (!state.metrics) {\n              setState({ isLoading: true });\n              const metrics = await suggestMetrics();\n              setState({ metrics, isLoading: undefined });\n            }\n          }}\n          isLoading={state.isLoading}\n          options={state.metrics}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          inputId=\"opentsdb-aggregator-select\"\n          className=\"gf-form-input\"\n          value={query.aggregator ? toOption(query.aggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, aggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      <div className=\"gf-form max-width-20\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={6}\n          tooltip={<div>Use patterns like $tag_tagname to replace part of the alias for a tag value</div>}\n        >\n          Alias\n        </InlineFormLabel>\n        <Input\n          data-testid={testIds.alias}\n          placeholder=\"series alias\"\n          value={query.alias ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, alias: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </div>\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-metricsection',\n  alias: 'metric-alias',\n};\n","import React from 'react';\n\nimport { InlineLabel, Input, InlineFormLabel, InlineSwitch } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface RateSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  tsdbVersion: number;\n}\n\nexport function RateSection({ query, onChange, onRunQuery, tsdbVersion }: RateSectionProps) {\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel className=\"query-keyword\" width={8}>\n          Rate\n        </InlineFormLabel>\n        <InlineSwitch\n          data-testid={testIds.shouldComputeRate}\n          value={query.shouldComputeRate ?? false}\n          onChange={() => {\n            const shouldComputeRate = query.shouldComputeRate ?? false;\n            onChange({ ...query, shouldComputeRate: !shouldComputeRate });\n            onRunQuery();\n          }}\n        />\n      </div>\n      {query.shouldComputeRate && (\n        <div className=\"gf-form\">\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Counter\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.isCounter}\n            value={query.isCounter ?? false}\n            onChange={() => {\n              const isCounter = query.isCounter ?? false;\n              onChange({ ...query, isCounter: !isCounter });\n              onRunQuery();\n            }}\n          />\n        </div>\n      )}\n      {query.shouldComputeRate && query.isCounter && (\n        <div className=\"gf-form\">\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Counter max\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterMax}\n            placeholder=\"max value\"\n            value={query.counterMax ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterMax: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Reset value\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterResetValue}\n            placeholder=\"reset value\"\n            value={query.counterResetValue ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterResetValue: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n        </div>\n      )}\n      {tsdbVersion > 2 && (\n        <div className=\"gf-form\">\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Explicit tags\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.explicitTags}\n            value={query.explicitTags ?? false}\n            onChange={() => {\n              const explicitTags = query.explicitTags ?? false;\n              onChange({ ...query, explicitTags: !explicitTags });\n              onRunQuery();\n            }}\n          />\n        </div>\n      )}\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-rate',\n  shouldComputeRate: 'opentsdb-shouldComputeRate',\n  isCounter: 'opentsdb-is-counter',\n  counterMax: 'opentsdb-counter-max',\n  counterResetValue: 'opentsdb-counter-reset-value',\n  explicitTags: 'opentsdb-explicit-tags',\n};\n","import { has, size } from 'lodash';\nimport React, { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Select, InlineFormLabel, Icon, clearButtonStyles, useStyles2 } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface TagSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  suggestTagValues: () => Promise<SelectableValue[]>;\n  tsdbVersion: number;\n}\n\nexport function TagSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  suggestTagValues,\n  tsdbVersion,\n}: TagSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [tagValues, updTagValues] = useState<Array<SelectableValue<string>>>();\n  const [valueIsLoading, updValueIsLoading] = useState<boolean>();\n\n  const [addTagMode, updAddTagMode] = useState<boolean>(false);\n\n  const [curTagKey, updCurTagKey] = useState<string | number>('');\n  const [curTagValue, updCurTagValue] = useState<string>('');\n\n  const [errors, setErrors] = useState<string>('');\n\n  function changeAddTagMode() {\n    updAddTagMode(!addTagMode);\n  }\n\n  function addTag() {\n    if (query.filters && size(query.filters) > 0) {\n      const err = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addTagMode) {\n      updAddTagMode(true);\n      return;\n    }\n\n    // check for duplicate tags\n    if (query.tags && has(query.tags, curTagKey)) {\n      const err = \"Duplicate tag key '\" + curTagKey + \"'.\";\n      setErrors(err);\n      return;\n    }\n\n    // tags may be undefined\n    if (!query.tags) {\n      query.tags = {};\n    }\n\n    // add tag to query\n    query.tags[curTagKey] = curTagValue;\n\n    // reset the inputs\n    updCurTagKey('');\n    updCurTagValue('');\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the tag ditor\n    changeAddTagMode();\n  }\n\n  function removeTag(key: string | number) {\n    delete query.tags[key];\n\n    // fire off the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editTag(key: string | number, value: string) {\n    removeTag(key);\n    updCurTagKey(key);\n    updCurTagValue(value);\n    addTag();\n  }\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customTagOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  return (\n    <div className=\"gf-form-inline\" data-testid={testIds.section}>\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={tsdbVersion >= 2 ? <div>Please use filters, tags are deprecated in opentsdb 2.2</div> : undefined}\n        >\n          Tags\n        </InlineFormLabel>\n        {query.tags &&\n          Object.keys(query.tags).map((tagKey: string | number, idx: number) => {\n            const tagValue = query.tags[tagKey];\n            return (\n              <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n                {tagKey}={tagValue}\n                <button type=\"button\" className={buttonStyles} onClick={() => editTag(tagKey, tagValue)}>\n                  <Icon name={'pen'} />\n                </button>\n                <button\n                  type=\"button\"\n                  className={buttonStyles}\n                  onClick={() => removeTag(tagKey)}\n                  data-testid={testIds.remove}\n                >\n                  <Icon name={'times'} />\n                </button>\n              </InlineFormLabel>\n            );\n          })}\n        {!addTagMode && (\n          <button className=\"gf-form-label\" type=\"button\" onClick={changeAddTagMode} aria-label=\"Add tag\">\n            <Icon name={'plus'} />\n          </button>\n        )}\n      </div>\n      {addTagMode && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              className=\"gf-form-input\"\n              value={curTagKey ? toOption('' + curTagKey) : undefined}\n              placeholder=\"key\"\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagKey(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            <Select\n              inputId=\"opentsdb-suggested-tagv-select\"\n              className=\"gf-form-input\"\n              value={curTagValue ? toOption(curTagValue) : undefined}\n              placeholder=\"value\"\n              allowCustomValue\n              filterOption={customTagOption}\n              onOpenMenu={async () => {\n                if (!tagValues) {\n                  updValueIsLoading(true);\n                  const tVs = await suggestTagValues();\n                  updTagValues(tVs);\n                  updValueIsLoading(false);\n                }\n              }}\n              isLoading={valueIsLoading}\n              options={tagValues}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagValue(value);\n                }\n              }}\n            />\n          </div>\n\n          <div className=\"gf-form\">\n            {errors && (\n              <div className=\"gf-form-label\" title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </div>\n            )}\n\n            <div className=\"gf-form-label\">\n              <button type=\"button\" className={buttonStyles} onClick={addTag}>\n                add tag\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddTagMode}>\n                <Icon name={'times'} />\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-tag',\n  list: 'opentsdb-tag-list',\n  error: 'opentsdb-tag-error',\n  remove: 'opentsdb-tag-remove',\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, QueryEditorProps, textUtil } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbOptions, OpenTsdbQuery } from '../types';\n\nimport { DownSample } from './DownSample';\nimport { FilterSection } from './FilterSection';\nimport { MetricSection } from './MetricSection';\nimport { RateSection } from './RateSection';\nimport { TagSection } from './TagSection';\n\nexport type OpenTsdbQueryEditorProps = QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>;\n\nexport function OpenTsdbQueryEditor({\n  datasource,\n  onRunQuery,\n  onChange,\n  query,\n  range,\n  queries,\n}: OpenTsdbQueryEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  const [aggregators, setAggregators] = useState<string[]>([\n    'avg',\n    'sum',\n    'min',\n    'max',\n    'dev',\n    'zimsum',\n    'mimmin',\n    'mimmax',\n  ]);\n\n  const fillPolicies: string[] = ['none', 'nan', 'null', 'zero'];\n\n  const [filterTypes, setFilterTypes] = useState<string[]>([\n    'wildcard',\n    'iliteral_or',\n    'not_iliteral_or',\n    'not_literal_or',\n    'iwildcard',\n    'literal_or',\n    'regexp',\n  ]);\n\n  const tsdbVersion: number = datasource.tsdbVersion;\n\n  if (!query.aggregator) {\n    query.aggregator = 'sum';\n  }\n\n  if (!query.downsampleAggregator) {\n    query.downsampleAggregator = 'avg';\n  }\n\n  if (!query.downsampleFillPolicy) {\n    query.downsampleFillPolicy = 'none';\n  }\n\n  datasource.getAggregators().then((aggs: string[]) => {\n    if (aggs.length !== 0) {\n      setAggregators(aggs);\n    }\n  });\n\n  datasource.getFilterTypes().then((filterTypes: string[]) => {\n    if (filterTypes.length !== 0) {\n      setFilterTypes(filterTypes);\n    }\n  });\n\n  // previously called as an autocomplete on every input,\n  // in this we call it once on init and filter in the MetricSection component\n  async function suggestMetrics(): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery('metrics()').then(getTextValues);\n  }\n\n  // previously called as an autocomplete on every input,\n  // in this we call it once on init and filter in the MetricSection component\n  async function suggestTagValues(): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery('suggest_tagv()').then(getTextValues);\n  }\n\n  async function suggestTagKeys(query: OpenTsdbQuery): Promise<string[]> {\n    return datasource.suggestTagKeys(query);\n  }\n\n  function getTextValues(metrics: Array<{ text: string }>) {\n    return metrics.map((value: { text: string }) => {\n      return {\n        value: textUtil.escapeHtml(value.text),\n        description: value.text,\n      };\n    });\n  }\n\n  return (\n    <div className={styles.container} data-testid={testIds.editor}>\n      <div className={styles.visualEditor}>\n        <MetricSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestMetrics={suggestMetrics}\n          aggregators={aggregators}\n        />\n        <DownSample\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          aggregators={aggregators}\n          fillPolicies={fillPolicies}\n          tsdbVersion={tsdbVersion}\n        />\n        {tsdbVersion >= 2 && (\n          <FilterSection\n            query={query}\n            onChange={onChange}\n            onRunQuery={onRunQuery}\n            filterTypes={filterTypes}\n            suggestTagValues={suggestTagValues}\n            suggestTagKeys={suggestTagKeys}\n          />\n        )}\n        <TagSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestTagValues={suggestTagValues}\n          suggestTagKeys={suggestTagKeys}\n          tsdbVersion={tsdbVersion}\n        />\n        <RateSection query={query} onChange={onChange} onRunQuery={onRunQuery} tsdbVersion={tsdbVersion} />\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n    `,\n    visualEditor: css`\n      flex-grow: 1;\n    `,\n    toggleButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n}\n\nexport const testIds = {\n  editor: 'opentsdb-editor',\n};\n","import React, { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel, Input, InlineSwitch } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbQuery, OpenTsdbOptions } from '../types';\n\nexport const AnnotationEditor = (props: QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>) => {\n  const { query, onChange } = props;\n  const [target, setTarget] = useState<string>(query.target ?? '');\n  const [isGlobal, setIsGlobal] = useState<boolean>(query.isGlobal ?? false);\n\n  const updateValue = <K extends keyof OpenTsdbQuery, V extends OpenTsdbQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      fromAnnotations: true,\n    });\n  };\n\n  const updateIsGlobal = (isGlobal: boolean) => {\n    isGlobal = !isGlobal;\n    setIsGlobal(isGlobal);\n    updateValue('isGlobal', isGlobal);\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>OpenTSDB metrics query</InlineFormLabel>\n        <Input\n          value={target}\n          onChange={(e) => setTarget(e.currentTarget.value ?? '')}\n          onBlur={() => updateValue('target', target)}\n          placeholder=\"events.eventname\"\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>Show Global Annotations?</InlineFormLabel>\n        <InlineSwitch value={isGlobal} onChange={(e) => updateIsGlobal(isGlobal)} />\n      </div>\n    </div>\n  );\n};\n","import { LegacyAnnotation } from './types';\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  // return the target annotation\n  const annotation: LegacyAnnotation = {\n    fromAnnotations: true,\n    target: json.target ?? '',\n    name: json.name ?? '',\n    isGlobal: json.isGlobal ?? false,\n  };\n\n  return annotation;\n};\n\n// eslint-ignore-next-line\nexport const prepareAnnotation = (json: any) => {\n  const resultingTarget = json.target && typeof json.target !== 'string' ? json.target : migrateLegacyAnnotation(json);\n\n  json.target = resultingTarget;\n\n  return json;\n};\n","import {\n  clone,\n  cloneDeep,\n  compact,\n  each,\n  every,\n  filter,\n  findIndex,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map as _map,\n  toPairs,\n} from 'lodash';\nimport { lastValueFrom, merge, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  dateMath,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { AnnotationEditor } from './components/AnnotationEditor';\nimport { prepareAnnotation } from './migrations';\nimport { OpenTsdbFilter, OpenTsdbOptions, OpenTsdbQuery } from './types';\n\nexport default class OpenTsDatasource extends DataSourceApi<OpenTsdbQuery, OpenTsdbOptions> {\n  type: any;\n  url: any;\n  name: any;\n  withCredentials: any;\n  basicAuth: any;\n  tsdbVersion: any;\n  tsdbResolution: any;\n  lookupLimit: any;\n  tagKeys: any;\n\n  aggregatorsPromise: any;\n  filterTypesPromise: any;\n\n  constructor(instanceSettings: any, private readonly templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.lookupLimit = instanceSettings.jsonData.lookupLimit || 1000;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n    this.annotations = {\n      QueryEditor: AnnotationEditor,\n      prepareAnnotation,\n    };\n  }\n\n  // Called once per panel (graph)\n  query(options: DataQueryRequest<OpenTsdbQuery>): Observable<DataQueryResponse> {\n    // migrate annotations\n    if (options.targets.some((target: OpenTsdbQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const annotation of options.targets) {\n        if (annotation.target) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvent(options, annotation)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => {\n                  // grafana fetch throws the error so for annotation consistency among datasources\n                  // we return an empty array which displays as 'no events found'\n                  // in the annnotation editor\n                  return subscriber.next({ data: [toDataFrame([])] });\n                })\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs: any[] = [];\n\n    each(options.targets, (target) => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(queries)) {\n      return of({ data: [] });\n    }\n\n    const groupByTags: any = {};\n    each(queries, (query) => {\n      if (query.filters && query.filters.length > 0) {\n        each(query.filters, (val) => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = filter(options.targets, (query) => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).pipe(\n      catchError((err) => {\n        // Throw the error message here instead of the whole object to workaround the error parsing error.\n        throw err?.data?.error?.message || 'Error performing time series query.';\n      }),\n      map((response) => {\n        const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n        const result = _map(response.data, (metricData: any, index: number) => {\n          index = metricToTargetMapping[index];\n          if (index === -1) {\n            index = 0;\n          }\n          this._saveTagKeys(metricData);\n\n          return this.transformMetricData(\n            metricData,\n            groupByTags,\n            options.targets[index],\n            options,\n            this.tsdbResolution\n          );\n        });\n        return { data: result };\n      })\n    );\n  }\n\n  annotationEvent(options: DataQueryRequest, annotation: OpenTsdbQuery): Promise<AnnotationEvent[]> {\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs = [];\n    const eventList: any[] = [];\n\n    qs.push({ aggregator: 'sum', metric: annotation.target });\n\n    const queries = compact(qs);\n\n    return lastValueFrom(\n      this.performTimeSeriesQuery(queries, start, end).pipe(\n        map((results) => {\n          if (results.data[0]) {\n            let annotationObject = results.data[0].annotations;\n            if (annotation.isGlobal) {\n              annotationObject = results.data[0].globalAnnotations;\n            }\n            if (annotationObject) {\n              each(annotationObject, (ann) => {\n                const event = {\n                  text: ann.description,\n                  time: Math.floor(ann.startTime) * 1000,\n                  annotation: annotation,\n                };\n\n                eventList.push(event);\n              });\n            }\n          }\n          return eventList;\n        })\n      )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.containsTemplate(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.containsTemplate(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries: any[], start: any, end: any): Observable<FetchResponse> {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return getBackendSrv().fetch(options);\n  }\n\n  suggestTagKeys(query: OpenTsdbQuery) {\n    const metric = query.metric ?? '';\n    return Promise.resolve(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData: { tags: {}; aggregateTags: any; metric: string | number }) {\n    const tagKeys = Object.keys(metricData.tags);\n    each(metricData.aggregateTags, (tag) => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query: string, type: string): Observable<any> {\n    return this._get('/api/suggest', { type, q: query, max: this.lookupLimit }).pipe(\n      map((result: any) => {\n        return result.data;\n      })\n    );\n  }\n\n  _performMetricKeyValueLookup(metric: string, keys: any): Observable<any[]> {\n    if (!metric || !keys) {\n      return of([]);\n    }\n\n    const keysArray = keys.split(',').map((key: any) => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: this.lookupLimit }).pipe(\n      map((result: any) => {\n        result = result.data.results;\n        const tagvs: any[] = [];\n        each(result, (r) => {\n          if (tagvs.indexOf(r.tags[key]) === -1) {\n            tagvs.push(r.tags[key]);\n          }\n        });\n        return tagvs;\n      })\n    );\n  }\n\n  _performMetricKeyLookup(metric: any): Observable<any[]> {\n    if (!metric) {\n      return of([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).pipe(\n      map((result: any) => {\n        result = result.data.results;\n        const tagks: any[] = [];\n        each(result, (r) => {\n          each(r.tags, (tagv, tagk) => {\n            if (tagks.indexOf(tagk) === -1) {\n              tagks.push(tagk);\n            }\n          });\n        });\n        return tagks;\n      })\n    );\n  }\n\n  _get(\n    relativeUrl: string,\n    params?: { type?: string; q?: string; max?: number; m?: any; limit?: number }\n  ): Observable<FetchResponse> {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return getBackendSrv().fetch(options);\n  }\n\n  _addCredentialOptions(options: any) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    const responseTransform = (result: any) => {\n      return _map(result, (value) => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return lastValueFrom(this._performSuggestQuery(metricsQuery[1], 'metrics').pipe(map(responseTransform)));\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return lastValueFrom(this._performMetricKeyLookup(tagNamesQuery[1]).pipe(map(responseTransform)));\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return lastValueFrom(\n        this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).pipe(map(responseTransform))\n      );\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').pipe(map(responseTransform)));\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').pipe(map(responseTransform)));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    return lastValueFrom(\n      this._performSuggestQuery('cpu', 'metrics').pipe(\n        map(() => {\n          return { status: 'success', message: 'Data source is working' };\n        })\n      )\n    );\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = lastValueFrom(\n      this._get('/api/aggregators').pipe(\n        map((result: any) => {\n          if (result.data && isArray(result.data)) {\n            return result.data.sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = lastValueFrom(\n      this._get('/api/config/filters').pipe(\n        map((result: any) => {\n          if (result.data) {\n            return Object.keys(result.data).sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(md: { dps: any }, groupByTags: any, target: any, options: any, tsdbResolution: number) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps: any[] = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use pairs(invert()) because it stringifies keys/values\n    each(md.dps, (v: any, k: number) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(\n    md: { dps?: any; tags?: any; metric?: any },\n    target: { alias: string },\n    groupByTags: any,\n    options: { scopedVars: any }\n  ) {\n    if (target.alias) {\n      const scopedVars = clone(options.scopedVars || {});\n      each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData: any[] = [];\n\n    if (!isEmpty(md.tags)) {\n      each(toPairs(md.tags), (tag) => {\n        if (has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target: OpenTsdbQuery, options: DataQueryRequest<OpenTsdbQuery>, tsdbVersion: number) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query: any = {\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\n      aggregator: 'avg',\n    };\n\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.filters && target.filters.length > 0) {\n      query.filters = cloneDeep(target.filters);\n\n      if (query.filters) {\n        this.interpolateVariablesInFilters(query, options);\n      }\n    } else {\n      query.tags = cloneDeep(target.tags);\n\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');\n        }\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  interpolateVariablesInFilters(query: OpenTsdbQuery, options: DataQueryRequest<OpenTsdbQuery>) {\n    query.filters = query.filters?.map((filter: OpenTsdbFilter): OpenTsdbFilter => {\n      filter.tagk = this.templateSrv.replace(filter.tagk, options.scopedVars, 'pipe');\n\n      filter.filter = this.templateSrv.replace(filter.filter, options.scopedVars, 'pipe');\n\n      return filter;\n    });\n  }\n\n  mapMetricsToTargets(metrics: any, options: any, tsdbVersion: number) {\n    let interpolatedTagValue, arrTagV;\n    return _map(metrics, (metricData) => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return findIndex(options.targets as any[], (target) => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  interpolateVariablesInQueries(queries: OpenTsdbQuery[], scopedVars: ScopedVars): OpenTsdbQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      metric: this.templateSrv.replace(query.metric, scopedVars),\n    }));\n  }\n\n  convertToTSDBTime(date: any, roundUp: any, timezone: any) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp, timezone);\n    return date.valueOf();\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { OpenTsdbQueryEditor } from './components/OpenTsdbQueryEditor';\nimport OpenTsDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(OpenTsDatasource)\n  .setQueryEditor(OpenTsdbQueryEditor)\n  .setConfigEditor(ConfigEditor);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nimport { OpenTsdbOptions } from '../types';\n\nimport { OpenTsdbDetails } from './OpenTsdbDetails';\n\nexport const ConfigEditor = (props: DataSourcePluginOptionsEditorProps<OpenTsdbOptions>) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:4242\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n      />\n      <OpenTsdbDetails value={options} onChange={onOptionsChange} />\n    </>\n  );\n};\n"],"names":["Select","Input","LegacyForms","tsdbVersions","label","value","tsdbResolutions","OpenTsdbDetails","props","onChange","idSuffix","useUniqueId","className","width","htmlFor","inputId","options","find","version","jsonData","tsdbVersion","onSelectChangeHandler","resolution","tsdbResolution","id","type","lookupLimit","onInputChangeHandler","key","newValue","event","currentTarget","paddingRightClass","css","paddingRight","DownSample","query","onRunQuery","aggregators","fillPolicies","aggregatorOptions","map","toOption","fillPolicyOptions","testIds","section","tooltip","I","interval","placeholder","downsampleInterval","e","onBlur","downsampleAggregator","undefined","InlineLabel","downsampleFillPolicy","disableDownsampling","FilterSection","suggestTagKeys","filterTypes","suggestTagValues","buttonStyles","useStyles2","clearButtonStyles","tagKeys","updTagKeys","useState","keyIsLoading","updKeyIsLoading","tagValues","updTagValues","valueIsLoading","updValueIsLoading","addFilterMode","updAddFilterMode","curFilterType","updCurFilterType","curFilterKey","updCurFilterKey","curFilterValue","updCurFilterValue","curFilterGroupBy","updCurFilterGroupBy","errors","setErrors","filterTypesOptions","changeAddFilterMode","addFilter","tags","size","currentFilter","tagk","filter","groupBy","filters","concat","removeFilter","index","splice","customFilterOption","useCallback","option","searchQuery","split","reduce","acc","cur","toLowerCase","includes","fil","idx","list","onClick","editFilter","Icon","name","remove","allowCustomValue","filterOption","onOpenMenu","async","tKsOptions","isLoading","tVs","title","error","color","MetricSection","suggestMetrics","state","setState","metric","metrics","aggregator","alias","RateSection","shouldComputeRate","isCounter","counterMax","counterResetValue","explicitTags","TagSection","addTagMode","updAddTagMode","curTagKey","updCurTagKey","curTagValue","updCurTagValue","changeAddTagMode","addTag","has","removeTag","customTagOption","Object","keys","tagKey","tagValue","editTag","getStyles","theme","container","visualEditor","toggleButton","spacing","editor","AnnotationEditor","target","setTarget","isGlobal","setIsGlobal","updateValue","val","fromAnnotations","updateIsGlobal","prepareAnnotation","json","resultingTarget","migrateLegacyAnnotation","OpenTsDatasource","DataSourceApi","constructor","instanceSettings","templateSrv","getTemplateSrv","super","this","url","withCredentials","basicAuth","aggregatorsPromise","filterTypesPromise","annotations","QueryEditor","targets","some","streams","annotation","push","Observable","subscriber","annotationEvent","then","events","next","data","toDataFrame","catch","ex","finally","complete","merge","start","convertToTSDBTime","range","raw","from","timezone","end","to","qs","each","convertTargetToQuery","queries","compact","isEmpty","of","groupByTags","length","hide","performTimeSeriesQuery","pipe","catchError","err","message","response","metricToTargetMapping","mapMetricsToTargets","_map","metricData","_saveTagKeys","transformMetricData","eventList","lastValueFrom","results","annotationObject","globalAnnotations","ann","text","description","time","Math","floor","startTime","targetContainsTemplate","i","containsTemplate","msResolution","reqBody","showQuery","method","_addCredentialOptions","getBackendSrv","fetch","Promise","resolve","aggregateTags","tag","_performSuggestQuery","_get","q","max","result","_performMetricKeyValueLookup","keysArray","trim","keysQuery","join","m","limit","tagvs","r","indexOf","_performMetricKeyLookup","tagks","tagv","relativeUrl","params","headers","Authorization","metricFindQuery","interpolated","replace","reject","responseTransform","metricsQuery","match","tagNamesQuery","tagValuesQuery","tagNamesSuggestQuery","tagValuesSuggestQuery","testDatasource","status","getAggregators","isArray","sort","getFilterTypes","md","metricLabel","createMetricLabel","dps","v","k","datapoints","scopedVars","clone","tagData","toPairs","rate","rateOptions","counter","parseInt","resetValue","dropResets","ResetValue","parseFloat","downsample","cloneDeep","interpolateVariablesInFilters","interpolatedTagValue","arrTagV","findIndex","every","tagV","tagK","interpolateVariablesInQueries","date","roundUp","dateMath","valueOf","plugin","DataSourcePlugin","setQueryEditor","datasource","styles","setAggregators","setFilterTypes","getTextValues","textUtil","aggs","setConfigEditor","onOptionsChange","DataSourceHttpSettings","defaultUrl","dataSourceConfig"],"sourceRoot":""}