{"version":3,"file":"mssqlPlugin.5108dc0adcb9f97d0d93.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/mssql/types.ts","webpack://grafana/./public/app/plugins/datasource/mssql/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/mssql/MSSqlQueryModel.ts","webpack://grafana/./public/app/plugins/datasource/mssql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/mssql/sqlUtil.ts","webpack://grafana/./public/app/plugins/datasource/mssql/datasource.ts","webpack://grafana/./public/app/plugins/datasource/mssql/MSSqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/mssql/module.ts"],"sourcesContent":["import { SQLOptions } from 'app/features/plugins/sql/types';\n\nexport enum MSSQLAuthenticationType {\n  sqlAuth = 'SQL Server Authentication',\n  windowsAuth = 'Windows Authentication',\n}\n\nexport enum MSSQLEncryptOptions {\n  disable = 'disable',\n  false = 'false',\n  true = 'true',\n}\nexport interface MssqlOptions extends SQLOptions {\n  authenticationType?: MSSQLAuthenticationType;\n  encrypt?: MSSQLEncryptOptions;\n  sslRootCertFile?: string;\n  serverName?: string;\n  connectionTimeout?: number;\n}\n","import { css } from '@emotion/css';\nimport React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport {\n  Alert,\n  FieldSet,\n  InlineField,\n  InlineFieldRow,\n  InlineSwitch,\n  Input,\n  Link,\n  SecretInput,\n  Select,\n  useStyles2,\n} from '@grafana/ui';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\n\nimport { MSSQLAuthenticationType, MSSQLEncryptOptions, MssqlOptions } from '../types';\n\nexport const ConfigurationEditor = (props: DataSourcePluginOptionsEditorProps<MssqlOptions>) => {\n  const { options, onOptionsChange } = props;\n  const styles = useStyles2(getStyles);\n  const jsonData = options.jsonData;\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const onDSOptionChanged = (property: keyof MssqlOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const onSkipTLSVerifyChanged = (event: SyntheticEvent<HTMLInputElement>) => {\n    updateDatasourcePluginJsonDataOption(props, 'tlsSkipVerify', event.currentTarget.checked);\n  };\n\n  const onEncryptChanged = (value: SelectableValue) => {\n    updateDatasourcePluginJsonDataOption(props, 'encrypt', value.value);\n  };\n\n  const onAuthenticationMethodChanged = (value: SelectableValue) => {\n    onOptionsChange({\n      ...options,\n      ...{\n        jsonData: { ...jsonData, ...{ authenticationType: value.value } },\n        secureJsonData: { ...options.secureJsonData, ...{ password: '' } },\n        secureJsonFields: { ...options.secureJsonFields, ...{ password: false } },\n        user: '',\n      },\n    });\n  };\n\n  const onConnectionTimeoutChanged = (connectionTimeout?: number) => {\n    updateDatasourcePluginJsonDataOption(props, 'connectionTimeout', connectionTimeout ?? 0);\n  };\n\n  const authenticationOptions: Array<SelectableValue<MSSQLAuthenticationType>> = [\n    { value: MSSQLAuthenticationType.sqlAuth, label: 'SQL Server Authentication' },\n    { value: MSSQLAuthenticationType.windowsAuth, label: 'Windows Authentication' },\n  ];\n\n  const encryptOptions: Array<SelectableValue<string>> = [\n    { value: MSSQLEncryptOptions.disable, label: 'disable' },\n    { value: MSSQLEncryptOptions.false, label: 'false' },\n    { value: MSSQLEncryptOptions.true, label: 'true' },\n  ];\n\n  const shortWidth = 15;\n  const longWidth = 46;\n  const labelWidthSSL = 25;\n  const labelWidthDetails = 20;\n\n  return (\n    <>\n      <FieldSet label=\"MS SQL Connection\" width={400}>\n        <InlineField labelWidth={shortWidth} label=\"Host\">\n          <Input\n            width={longWidth}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:1433\"\n            onChange={onDSOptionChanged('url')}\n          ></Input>\n        </InlineField>\n        <InlineField labelWidth={shortWidth} label=\"Database\">\n          <Input\n            width={longWidth}\n            name=\"database\"\n            value={options.database || ''}\n            placeholder=\"database name\"\n            onChange={onDSOptionChanged('database')}\n          ></Input>\n        </InlineField>\n        <InlineField\n          label=\"Authentication\"\n          labelWidth={shortWidth}\n          htmlFor=\"authenticationType\"\n          tooltip={\n            <ul className={styles.ulPadding}>\n              <li>\n                <i>SQL Server Authentication</i> This is the default mechanism to connect to MS SQL Server. Enter the\n                SQL Server Authentication login or the Windows Authentication login in the DOMAIN\\User format.\n              </li>\n              <li>\n                <i>Windows Authentication</i> Windows Integrated Security - single sign on for users who are already\n                logged onto Windows and have enabled this option for MS SQL Server.\n              </li>\n            </ul>\n          }\n        >\n          <Select\n            value={jsonData.authenticationType || MSSQLAuthenticationType.sqlAuth}\n            inputId=\"authenticationType\"\n            options={authenticationOptions}\n            onChange={onAuthenticationMethodChanged}\n          ></Select>\n        </InlineField>\n        {jsonData.authenticationType === MSSQLAuthenticationType.windowsAuth ? null : (\n          <InlineFieldRow>\n            <InlineField labelWidth={shortWidth} label=\"User\">\n              <Input\n                width={shortWidth}\n                value={options.user || ''}\n                placeholder=\"user\"\n                onChange={onDSOptionChanged('user')}\n              ></Input>\n            </InlineField>\n            <InlineField label=\"Password\" labelWidth={shortWidth}>\n              <SecretInput\n                width={shortWidth}\n                placeholder=\"Password\"\n                isConfigured={options.secureJsonFields && options.secureJsonFields.password}\n                onReset={onResetPassword}\n                onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n              ></SecretInput>\n            </InlineField>\n          </InlineFieldRow>\n        )}\n      </FieldSet>\n\n      <FieldSet label=\"TLS/SSL Auth\">\n        <InlineField\n          labelWidth={labelWidthSSL}\n          htmlFor=\"encrypt\"\n          tooltip={\n            <>\n              Determines whether or to which extent a secure SSL TCP/IP connection will be negotiated with the server.\n              <ul className={styles.ulPadding}>\n                <li>\n                  <i>disable</i> - Data sent between client and server is not encrypted.\n                </li>\n                <li>\n                  <i>false</i> - Data sent between client and server is not encrypted beyond the login packet. (default)\n                </li>\n                <li>\n                  <i>true</i> - Data sent between client and server is encrypted.\n                </li>\n              </ul>\n              If you&apos;re using an older version of Microsoft SQL Server like 2008 and 2008R2 you may need to disable\n              encryption to be able to connect.\n            </>\n          }\n          label=\"Encrypt\"\n        >\n          <Select\n            options={encryptOptions}\n            value={jsonData.encrypt || MSSQLEncryptOptions.disable}\n            inputId=\"encrypt\"\n            onChange={onEncryptChanged}\n          ></Select>\n        </InlineField>\n\n        {jsonData.encrypt === MSSQLEncryptOptions.true ? (\n          <>\n            <InlineField labelWidth={labelWidthSSL} htmlFor=\"skipTlsVerify\" label=\"Skip TLS Verify\">\n              <InlineSwitch\n                id=\"skipTlsVerify\"\n                onChange={onSkipTLSVerifyChanged}\n                value={jsonData.tlsSkipVerify || false}\n              ></InlineSwitch>\n            </InlineField>\n            {jsonData.tlsSkipVerify ? null : (\n              <>\n                <InlineField\n                  labelWidth={labelWidthSSL}\n                  tooltip={\n                    <span>\n                      Path to file containing the public key certificate of the CA that signed the SQL Server\n                      certificate. Needed when the server certificate is self signed.\n                    </span>\n                  }\n                  label=\"TLS/SSL Root Certificate\"\n                >\n                  <Input\n                    value={jsonData.sslRootCertFile || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(props, 'sslRootCertFile')}\n                    placeholder=\"TLS/SSL root certificate file path\"\n                  ></Input>\n                </InlineField>\n                <InlineField labelWidth={labelWidthSSL} label=\"Hostname in server certificate\">\n                  <Input\n                    placeholder=\"Common Name (CN) in server certificate\"\n                    value={jsonData.serverName || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(props, 'serverName')}\n                  ></Input>\n                </InlineField>\n              </>\n            )}\n          </>\n        ) : null}\n      </FieldSet>\n\n      <ConnectionLimits\n        labelWidth={shortWidth}\n        jsonData={jsonData}\n        onPropertyChanged={(property, value) => {\n          updateDatasourcePluginJsonDataOption(props, property, value);\n        }}\n      ></ConnectionLimits>\n\n      <FieldSet label=\"MS SQL details\">\n        <InlineField\n          tooltip={\n            <span>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\n              <code>1m</code> if your data is written every minute.\n            </span>\n          }\n          label=\"Min time interval\"\n          labelWidth={labelWidthDetails}\n        >\n          <Input\n            placeholder=\"1m\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          ></Input>\n        </InlineField>\n        <InlineField\n          tooltip={\n            <span>\n              The number of seconds to wait before canceling the request when connecting to the database. The default is{' '}\n              <code>0</code>, meaning no timeout.\n            </span>\n          }\n          label=\"Connection timeout\"\n          labelWidth={labelWidthDetails}\n        >\n          <NumberInput\n            placeholder=\"60\"\n            min={0}\n            value={jsonData.connectionTimeout}\n            onChange={onConnectionTimeoutChanged}\n          ></NumberInput>\n        </InlineField>\n      </FieldSet>\n\n      <Alert title=\"User Permission\" severity=\"info\">\n        The database user should only be granted SELECT permissions on the specified database and tables you want to\n        query. Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect\n        against this we <em>highly</em> recommend you create a specific MS SQL user with restricted permissions. Check\n        out the{' '}\n        <Link rel=\"noreferrer\" target=\"_blank\" href=\"http://docs.grafana.org/features/datasources/mssql/\">\n          Microsoft SQL Server Data Source Docs\n        </Link>{' '}\n        for more information.\n      </Alert>\n    </>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    ulPadding: css({\n      margin: theme.spacing(1, 0),\n      paddingLeft: theme.spacing(5),\n    }),\n  };\n}\n","import { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { applyQueryDefaults } from 'app/features/plugins/sql/defaults';\nimport { SQLQuery, SqlQueryModel } from 'app/features/plugins/sql/types';\n\nexport class MSSqlQueryModel implements SqlQueryModel {\n  target: SQLQuery;\n  templateSrv?: TemplateSrv;\n  scopedVars?: ScopedVars;\n\n  constructor(target?: SQLQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = applyQueryDefaults(target || { refId: 'A' });\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n}\n","import {\n  ColumnDefinition,\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  LinkedToken,\n  TableDefinition,\n  TableIdentifier,\n  TokenType,\n} from '@grafana/experimental';\nimport { DB, SQLQuery } from 'app/features/plugins/sql/types';\n\ninterface CompletionProviderGetterArgs {\n  getColumns: React.MutableRefObject<(t: SQLQuery) => Promise<ColumnDefinition[]>>;\n  getTables: React.MutableRefObject<(d?: string) => Promise<TableDefinition[]>>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getColumns, getTables }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    tables: {\n      resolve: async (identifier) => {\n        return await getTables.current(identifier.table);\n      },\n      parseName: (token: LinkedToken) => {\n        if (!token) {\n          return { table: '' };\n        }\n\n        let processedToken = token;\n        let tablePath = processedToken.value;\n\n        while (processedToken.next && processedToken.next.type !== TokenType.Whitespace) {\n          tablePath += processedToken.next.value;\n          processedToken = processedToken.next;\n        }\n\n        if (processedToken.value.endsWith('.')) {\n          tablePath = processedToken.value.slice(0, processedToken.value.length - 1);\n        }\n\n        return { table: tablePath };\n      },\n    },\n\n    columns: {\n      resolve: async (t: TableIdentifier | undefined) => {\n        if (!t?.table) {\n          return [];\n        }\n        // TODO: Use schema instead of table\n        const [database, schema, tableName] = t.table.split('.');\n        return await getColumns.current({ table: `${schema}.${tableName}`, dataset: database, refId: 'A' });\n      },\n    },\n  });\n\nexport async function fetchColumns(db: DB, q: SQLQuery) {\n  const cols = await db.fields(q);\n  if (cols.length > 0) {\n    return cols.map((c) => {\n      return { name: c.value, type: c.value, description: c.value };\n    });\n  } else {\n    return [];\n  }\n}\n\nexport async function fetchTables(db: DB, dataset?: string) {\n  const tables = await db.lookup?.(dataset);\n  return tables || [];\n}\n","import { isEmpty } from 'lodash';\n\nimport { RAQBFieldTypes, SQLExpression, SQLQuery } from 'app/features/plugins/sql/types';\nimport { haveColumns } from 'app/features/plugins/sql/utils/sql.utils';\n\nexport function getIcon(type: string): string | undefined {\n  switch (type) {\n    case 'datetimeoffset':\n    case 'date':\n    case 'datetime2':\n    case 'smalldatetime':\n    case 'datetime':\n    case 'time':\n      return 'clock-nine';\n    case 'bit':\n      return 'toggle-off';\n    case 'tinyint':\n    case 'smallint':\n    case 'int':\n    case 'bigint':\n    case 'decimal':\n    case 'numeric':\n    case 'real':\n    case 'float':\n    case 'money':\n    case 'smallmoney':\n      return 'calculator-alt';\n    case 'char':\n    case 'varchar':\n    case 'text':\n    case 'nchar':\n    case 'nvarchar':\n    case 'ntext':\n    case 'binary':\n    case 'varbinary':\n    case 'image':\n      return 'text';\n    default:\n      return undefined;\n  }\n}\n\nexport function getRAQBType(type: string): RAQBFieldTypes {\n  switch (type) {\n    case 'datetimeoffset':\n    case 'datetime2':\n    case 'smalldatetime':\n    case 'datetime':\n      return 'datetime';\n    case 'time':\n      return 'time';\n    case 'date':\n      return 'date';\n    case 'bit':\n      return 'boolean';\n    case 'tinyint':\n    case 'smallint':\n    case 'int':\n    case 'bigint':\n    case 'decimal':\n    case 'numeric':\n    case 'real':\n    case 'float':\n    case 'money':\n    case 'smallmoney':\n      return 'number';\n    case 'char':\n    case 'varchar':\n    case 'text':\n    case 'nchar':\n    case 'nvarchar':\n    case 'ntext':\n    case 'binary':\n    case 'varbinary':\n    case 'image':\n      return 'text';\n    default:\n      return 'text';\n  }\n}\n\nexport function toRawSql({ sql, dataset, table }: SQLQuery): string {\n  let rawQuery = '';\n\n  // Return early with empty string if there is no sql column\n  if (!sql || !haveColumns(sql.columns)) {\n    return rawQuery;\n  }\n\n  rawQuery += createSelectClause(sql.columns, sql.limit);\n\n  if (dataset && table) {\n    rawQuery += `FROM ${dataset}.${table} `;\n  }\n\n  if (sql.whereString) {\n    rawQuery += `WHERE ${sql.whereString} `;\n  }\n\n  if (sql.groupBy?.[0]?.property.name) {\n    const groupBy = sql.groupBy.map((g) => g.property.name).filter((g) => !isEmpty(g));\n    rawQuery += `GROUP BY ${groupBy.join(', ')} `;\n  }\n\n  if (sql.orderBy?.property.name) {\n    rawQuery += `ORDER BY ${sql.orderBy.property.name} `;\n  }\n\n  if (sql.orderBy?.property.name && sql.orderByDirection) {\n    rawQuery += `${sql.orderByDirection} `;\n  }\n\n  return rawQuery;\n}\n\nfunction createSelectClause(sqlColumns: NonNullable<SQLExpression['columns']>, limit?: number): string {\n  const columns = sqlColumns.map((c) => {\n    let rawColumn = '';\n    if (c.name && c.alias) {\n      rawColumn += `${c.name}(${c.parameters?.map((p) => `${p.name}`)}) AS ${c.alias}`;\n    } else if (c.name) {\n      rawColumn += `${c.name}(${c.parameters?.map((p) => `${p.name}`)})`;\n    } else if (c.alias) {\n      rawColumn += `${c.parameters?.map((p) => `${p.name}`)} AS ${c.alias}`;\n    } else {\n      rawColumn += `${c.parameters?.map((p) => `${p.name}`)}`;\n    }\n    return rawColumn;\n  });\n  return `SELECT ${isLimit(limit) ? 'TOP(' + limit + ')' : ''} ${columns.join(', ')} `;\n}\n\nconst isLimit = (limit: number | undefined): boolean => limit !== undefined && limit >= 0;\n","import { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { LanguageDefinition } from '@grafana/experimental';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlDatasource } from 'app/features/plugins/sql/datasource/SqlDatasource';\nimport { DB, SQLQuery, SQLSelectableValue } from 'app/features/plugins/sql/types';\nimport { formatSQL } from 'app/features/plugins/sql/utils/formatSQL';\n\nimport { getSchema, showDatabases, getSchemaAndName } from './MSSqlMetaQuery';\nimport { MSSqlQueryModel } from './MSSqlQueryModel';\nimport { fetchColumns, fetchTables, getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { getIcon, getRAQBType, toRawSql } from './sqlUtil';\nimport { MssqlOptions } from './types';\n\nexport class MssqlDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined = undefined;\n  constructor(instanceSettings: DataSourceInstanceSettings<MssqlOptions>) {\n    super(instanceSettings);\n  }\n\n  getQueryModel(target?: SQLQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): MSSqlQueryModel {\n    return new MSSqlQueryModel(target, templateSrv, scopedVars);\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    const datasets = await this.runSql<{ name: string[] }>(showDatabases(), { refId: 'datasets' });\n    return datasets.fields.name.values.toArray().flat();\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    // We get back the table name with the schema as well. like dbo.table\n    const tables = await this.runSql<{ schemaAndName: string[] }>(getSchemaAndName(dataset), { refId: 'tables' });\n    return tables.fields.schemaAndName.values.toArray().flat();\n  }\n\n  async fetchFields(query: SQLQuery): Promise<SQLSelectableValue[]> {\n    if (!query.table) {\n      return [];\n    }\n    const [_, table] = query.table.split('.');\n    const schema = await this.runSql<{ column: string; type: string }>(getSchema(query.dataset, table), {\n      refId: 'columns',\n    });\n    const result: SQLSelectableValue[] = [];\n    for (let i = 0; i < schema.length; i++) {\n      const column = schema.fields.column.values.get(i);\n      const type = schema.fields.type.values.get(i);\n      result.push({ label: column, value: column, type, icon: getIcon(type), raqbFieldType: getRAQBType(type) });\n    }\n    return result;\n  }\n\n  getSqlLanguageDefinition(db: DB): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n    const args = {\n      getColumns: { current: (query: SQLQuery) => fetchColumns(db, query) },\n      getTables: { current: (dataset?: string) => fetchTables(db, dataset) },\n    };\n    this.sqlLanguageDefinition = {\n      id: 'sql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      init: () => Promise.resolve(true),\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(this.db),\n      fields: async (query: SQLQuery) => {\n        if (!query?.dataset || !query?.table) {\n          return [];\n        }\n        return this.fetchFields(query);\n      },\n      validateQuery: (query) =>\n        Promise.resolve({ isError: false, isValid: true, query, error: '', rawSql: query.rawSql }),\n      dsID: () => this.id,\n      dispose: (dsID?: string) => {},\n      toRawSql,\n      lookup: async (path?: string) => {\n        if (!path) {\n          const datasets = await this.fetchDatasets();\n          return datasets.map((d) => ({ name: d, completion: `${d}.` }));\n        } else {\n          const parts = path.split('.').filter((s: string) => s);\n          if (parts.length > 2) {\n            return [];\n          }\n          if (parts.length === 1) {\n            const tables = await this.fetchTables(parts[0]);\n            return tables.map((t) => ({ name: t, completion: t }));\n          } else {\n            return [];\n          }\n        }\n      },\n    };\n  }\n}\n","export function showDatabases() {\n  // Return only user defined databases\n  return `SELECT name FROM sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb');`;\n}\n\nexport function getSchemaAndName(database?: string) {\n  return `SELECT TABLE_SCHEMA + '.' + TABLE_NAME as schemaAndName\n    FROM [${database}].INFORMATION_SCHEMA.TABLES\n    WHERE TABLE_TYPE = 'BASE TABLE'`;\n}\n\nexport function getSchema(database?: string, table?: string) {\n  return `\n   USE ${database}\n   SELECT COLUMN_NAME as 'column',DATA_TYPE as 'type'\n   FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='${table}';`;\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SqlQueryEditor } from 'app/features/plugins/sql/components/QueryEditor';\nimport { SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { ConfigurationEditor } from './configuration/ConfigurationEditor';\nimport { MssqlDatasource } from './datasource';\nimport { MssqlOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<MssqlDatasource, SQLQuery, MssqlOptions>(MssqlDatasource)\n  .setQueryEditor(SqlQueryEditor)\n  .setConfigEditor(ConfigurationEditor);\n"],"names":["MSSQLAuthenticationType","MSSQLEncryptOptions","getStyles","theme","ulPadding","css","margin","spacing","paddingLeft","MSSqlQueryModel","constructor","target","templateSrv","scopedVars","this","applyQueryDefaults","refId","quoteLiteral","value","replace","getSqlCompletionProvider","getColumns","getTables","monaco","language","getStandardSQLCompletionProvider","tables","resolve","async","current","identifier","table","parseName","token","processedToken","tablePath","next","type","TokenType","endsWith","slice","length","columns","t","database","schema","tableName","split","dataset","getIcon","getRAQBType","toRawSql","sql","rawQuery","haveColumns","sqlColumns","limit","map","c","rawColumn","name","alias","parameters","p","isLimit","join","createSelectClause","whereString","groupBy","property","g","filter","isEmpty","orderBy","orderByDirection","undefined","MssqlDatasource","SqlDatasource","instanceSettings","super","getQueryModel","runSql","fields","values","toArray","flat","schemaAndName","query","_","getSchema","result","i","column","get","push","label","icon","raqbFieldType","getSqlLanguageDefinition","db","sqlLanguageDefinition","args","q","cols","description","fetchColumns","lookup","fetchTables","id","completionProvider","formatter","formatSQL","getDB","init","Promise","datasets","fetchDatasets","getEditorLanguageDefinition","fetchFields","validateQuery","isError","isValid","error","rawSql","dsID","dispose","path","parts","s","completion","d","plugin","DataSourcePlugin","setQueryEditor","SqlQueryEditor","setConfigEditor","props","options","onOptionsChange","styles","useStyles2","jsonData","onDSOptionChanged","event","currentTarget","authenticationOptions","sqlAuth","windowsAuth","encryptOptions","disable","shortWidth","FieldSet","width","InlineField","labelWidth","Input","I","url","placeholder","onChange","htmlFor","tooltip","className","Select","authenticationType","inputId","secureJsonData","password","secureJsonFields","user","InlineFieldRow","SecretInput","isConfigured","onReset","updateDatasourcePluginResetOption","onBlur","onUpdateDatasourceSecureJsonDataOption","encrypt","updateDatasourcePluginJsonDataOption","checked","tlsSkipVerify","sslRootCertFile","onUpdateDatasourceJsonDataOption","serverName","ConnectionLimits","onPropertyChanged","timeInterval","NumberInput","min","connectionTimeout","Alert","title","severity","Link","rel","href"],"sourceRoot":""}