{"version":3,"file":"FolderSettingsPage.fc393c24484bdaef755c.js","mappings":"0ZAIA,MAAM,MAAEA,GAAUC,EAAAA,IAwBZC,EAAqB,CACzBC,eAAc,KACdC,WAAU,KACVC,eAAc,KACdC,aAAYA,EAAAA,IAGRC,GAAYC,EAAAA,EAAAA,UAhBM,CAACC,EAAmBC,KAC1C,MAAMC,EAAMD,EAAME,MAAMC,OAAOF,IAC/B,MAAO,CACLG,SAASC,EAAAA,EAAAA,IAAYN,EAAMO,SAAW,mBAAkBL,KAAOM,EAAAA,EAAAA,GAAc,IAC7EC,UAAWP,EACXQ,OAAQV,EAAMU,OACf,GAUwCjB,GAQpC,MAAMkB,UAA2BC,EAAAA,cACtCC,YAAYZ,GACVa,MAAMb,GAAO,wBAUEc,IACfC,KAAKf,MAAML,eAAemB,EAAIE,OAAOC,MAAM,IAC5C,iBAEQC,UACPJ,EAAIK,iBACJL,EAAIM,kBACJL,KAAKM,SAAS,CAAEC,WAAW,UACrBP,KAAKf,MAAMN,WAAWqB,KAAKf,MAAMS,QACvCM,KAAKM,SAAS,CAAEC,WAAW,GAAQ,IACpC,mBAEWR,IACVA,EAAIM,kBACJN,EAAIK,iBAGJI,EAAAA,EAAAA,QACE,IAAIC,EAAAA,GAAsB,CACxBC,MAAO,SACPC,KAJsB,uEAKtBC,KAAM,YACNC,QAAS,SACTC,UAAW,KACTd,KAAKf,MAAMJ,aAAamB,KAAKf,MAAMS,OAAOR,IAAI,IAGnD,IApCDc,KAAKhB,MAAQ,CACXuB,WAAW,EAEf,CAEAQ,oBACEf,KAAKf,MAAMP,eAAesB,KAAKf,MAAMQ,UACvC,CAgCAuB,SACE,MAAM,QAAE3B,EAAO,OAAEK,GAAWM,KAAKf,MAEjC,OACE,SAAC,IAAI,CAACgC,MAAM,oBAAoB5B,QAASA,EAAQ6B,KAAK,UACpD,UAAC,aAAa,CAACX,UAAWP,KAAKhB,MAAMuB,UAAU,iBAC7C,eAAIY,UAAU,mBAAkB,+BAEhC,gBAAKA,UAAU,wBAAuB,UACpC,kBAAMC,KAAK,qBAAqBC,SAAUrB,KAAKsB,OAAO,WACpD,iBAAKH,UAAU,UAAS,iBACtB,kBAAOI,QAAQ,eAAeJ,UAAU,wBAAuB,oBAG/D,SAAC5C,EAAK,CACJiD,KAAK,OACLL,UAAU,yBACVM,GAAG,eACHvB,MAAOR,EAAOgB,MACdgB,SAAU1B,KAAK2B,oBAGnB,iBAAKR,UAAU,qBAAoB,WACjC,SAAC,KAAM,CAACK,KAAK,SAASI,UAAWlC,EAAOmC,UAAYnC,EAAOoC,WAAW,mBAGtE,SAAC,KAAM,CAACC,QAAQ,cAAcC,QAAShC,KAAKiC,SAAUL,UAAWlC,EAAOwC,UAAU,gCAShG,EAGF,QAAepD,EAAUa,E","sources":["webpack://grafana/./public/app/features/folders/FolderSettingsPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, LegacyForms } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\nimport { ShowConfirmModalEvent } from '../../types/events';\n\nimport { deleteFolder, getFolderByUid, saveFolder } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport { setFolderTitle } from './state/reducers';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    pageNav: getNavModel(state.navIndex, `folder-settings-${uid}`, getLoadingNav(2)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  saveFolder,\n  setFolderTitle,\n  deleteFolder,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isLoading: boolean;\n}\n\nexport class FolderSettingsPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n  }\n\n  onTitleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.setFolderTitle(evt.target.value);\n  };\n\n  onSave = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.setState({ isLoading: true });\n    await this.props.saveFolder(this.props.folder);\n    this.setState({ isLoading: false });\n  };\n\n  onDelete = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const confirmationText = `Do you want to delete this folder and all its dashboards and alerts?`;\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: confirmationText,\n        icon: 'trash-alt',\n        yesText: 'Delete',\n        onConfirm: () => {\n          this.props.deleteFolder(this.props.folder.uid);\n        },\n      })\n    );\n  };\n\n  render() {\n    const { pageNav, folder } = this.props;\n\n    return (\n      <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          <h3 className=\"page-sub-heading\">Folder settings</h3>\n\n          <div className=\"section gf-form-group\">\n            <form name=\"folderSettingsForm\" onSubmit={this.onSave}>\n              <div className=\"gf-form\">\n                <label htmlFor=\"folder-title\" className=\"gf-form-label width-7\">\n                  Name\n                </label>\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  id=\"folder-title\"\n                  value={folder.title}\n                  onChange={this.onTitleChange}\n                />\n              </div>\n              <div className=\"gf-form-button-row\">\n                <Button type=\"submit\" disabled={!folder.canSave || !folder.hasChanged}>\n                  Save\n                </Button>\n                <Button variant=\"destructive\" onClick={this.onDelete} disabled={!folder.canDelete}>\n                  Delete\n                </Button>\n              </div>\n            </form>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderSettingsPage);\n"],"names":["Input","LegacyForms","mapDispatchToProps","getFolderByUid","saveFolder","setFolderTitle","deleteFolder","connector","connect","state","props","uid","match","params","pageNav","getNavModel","navIndex","getLoadingNav","folderUid","folder","FolderSettingsPage","PureComponent","constructor","super","evt","this","target","value","async","preventDefault","stopPropagation","setState","isLoading","appEvents","ShowConfirmModalEvent","title","text","icon","yesText","onConfirm","componentDidMount","render","navId","main","className","name","onSubmit","onSave","htmlFor","type","id","onChange","onTitleChange","disabled","canSave","hasChanged","variant","onClick","onDelete","canDelete"],"sourceRoot":""}