{"version":3,"file":"8057.ef076e6227c4ddb3be3a.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/StateHistory.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useManagedAlertStateHistory.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsActionButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useStateHistoryModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsAnnotations.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsDataSources.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Expression.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsExpression.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/AlertInstanceStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsMatchingInstances.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleHealth.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleState.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRuleNamespaces.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useFolder.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useIsRuleEditable.ts"],"sourcesContent":["import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n  numExternalAlertmanagers: number;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoiceStatus: build.query<AlertmanagersChoiceResponse, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { FormEvent, useEffect, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\n\nimport { LogMessages } from '../../Analytics';\n\ninterface Props {\n  className?: string;\n  defaultQueryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, defaultQueryString }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const onSearchInputChanged = useMemo(\n    () =>\n      debounce((e: FormEvent<HTMLInputElement>) => {\n        logInfo(LogMessages.filterByLabel);\n\n        const target = e.target as HTMLInputElement;\n        onFilterChange(target.value);\n      }, 600),\n    [onFilterChange]\n  );\n\n  useEffect(() => onSearchInputChanged.cancel(), [onSearchInputChanged]);\n\n  const searchIcon = <Icon name={'search'} />;\n\n  return (\n    <div className={className}>\n      <Label>\n        <Stack gap={0.5}>\n          <span>Search by label</span>\n          <Tooltip\n            content={\n              <div>\n                Filter alerts using label querying, ex:\n                <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </Tooltip>\n        </Stack>\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={defaultQueryString}\n        onChange={onSearchInputChanged}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { groupBy } from 'lodash';\nimport React, { FC, FormEvent, useCallback, useState } from 'react';\n\nimport { AlertState, dateTimeFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Alert, Field, Icon, Input, Label, LoadingPlaceholder, Tooltip, useStyles2 } from '@grafana/ui';\nimport { StateHistoryItem, StateHistoryItemData } from 'app/types/unified-alerting';\nimport { GrafanaAlertStateWithReason, PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { useManagedAlertStateHistory } from '../../hooks/useManagedAlertStateHistory';\nimport { AlertLabel } from '../AlertLabel';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ntype StateHistoryRowItem = {\n  id: string;\n  state: PromAlertingRuleState | GrafanaAlertStateWithReason | AlertState;\n  text?: string;\n  data?: StateHistoryItemData;\n  timestamp?: number;\n  stringifiedLabels: string;\n};\n\ntype StateHistoryMap = Record<string, StateHistoryRowItem[]>;\n\ntype StateHistoryRow = DynamicTableItemProps<StateHistoryRowItem>;\n\ninterface RuleStateHistoryProps {\n  alertId: string;\n}\n\nconst StateHistory: FC<RuleStateHistoryProps> = ({ alertId }) => {\n  const [textFilter, setTextFilter] = useState<string>('');\n  const handleTextFilter = useCallback((event: FormEvent<HTMLInputElement>) => {\n    setTextFilter(event.currentTarget.value);\n  }, []);\n\n  const { loading, error, result = [] } = useManagedAlertStateHistory(alertId);\n\n  const styles = useStyles2(getStyles);\n\n  if (loading && !error) {\n    return <LoadingPlaceholder text={'Loading history...'} />;\n  }\n\n  if (error && !loading) {\n    return <Alert title={'Failed to fetch alert state history'}>{error.message}</Alert>;\n  }\n\n  const columns: Array<DynamicTableColumnProps<StateHistoryRowItem>> = [\n    { id: 'state', label: 'State', size: 'max-content', renderCell: renderStateCell },\n    { id: 'value', label: '', size: 'auto', renderCell: renderValueCell },\n    { id: 'timestamp', label: 'Time', size: 'max-content', renderCell: renderTimestampCell },\n  ];\n\n  // group the state history list by unique set of labels\n  const tables = Object.entries(groupStateByLabels(result))\n    // sort and filter each table\n    .sort()\n    .filter(([groupKey]) => matchKey(groupKey, textFilter))\n    .map(([groupKey, items]) => {\n      const tableItems: StateHistoryRow[] = items.map((historyItem) => ({\n        id: historyItem.id,\n        data: historyItem,\n      }));\n\n      return (\n        <div key={groupKey}>\n          <header className={styles.tableGroupKey}>\n            <code>{groupKey}</code>\n          </header>\n          <DynamicTable cols={columns} items={tableItems} />\n        </div>\n      );\n    });\n\n  return (\n    <div>\n      <nav>\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>Filter group</span>\n                <Tooltip\n                  content={\n                    <div>\n                      Filter each state history group either by exact match or a regular expression, ex:{' '}\n                      <code>{`region=eu-west-1`}</code> or <code>{`/region=us-.+/`}</code>\n                    </div>\n                  }\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <Input prefix={<Icon name={'search'} />} onChange={handleTextFilter} placeholder=\"Search\" />\n        </Field>\n      </nav>\n      {tables}\n    </div>\n  );\n};\n\n// group state history by labels\nexport function groupStateByLabels(\n  history: Array<Pick<StateHistoryItem, 'id' | 'newState' | 'text' | 'data' | 'updated'>>\n): StateHistoryMap {\n  const items: StateHistoryRowItem[] = history.map((item) => {\n    // let's grab the last matching set of `{<string>}` since the alert name could also contain { or }\n    const LABELS_REGEX = /{.*?}/g;\n    const stringifiedLabels = item.text.match(LABELS_REGEX)?.at(-1) ?? '';\n\n    return {\n      id: String(item.id),\n      state: item.newState,\n      // let's omit the labels for each entry since it's just added noise to each state history item\n      text: item.text.replace(stringifiedLabels, ''),\n      data: item.data,\n      timestamp: item.updated,\n      stringifiedLabels,\n    };\n  });\n\n  // we have to group our state history items by their unique combination of tags since we want to display a DynamicTable for each alert instance\n  // (effectively unique combination of labels)\n  return groupBy(items, (item) => item.stringifiedLabels);\n}\n\n// match a string either by exact text match or with regular expression when in the form of \"/<regex>/\"\nexport function matchKey(groupKey: string, textFilter: string) {\n  // if the text filter is empty we show all matches\n  if (textFilter === '') {\n    return true;\n  }\n\n  const isRegExp = textFilter.startsWith('/') && textFilter.endsWith('/');\n\n  // not a regular expression, use normal text matching\n  if (!isRegExp) {\n    return groupKey.includes(textFilter);\n  }\n\n  // regular expression, try parsing and applying\n  // when we fail to parse the text as a regular expression, we return no match\n  try {\n    return new RegExp(textFilter.slice(1, -1)).test(groupKey);\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction renderValueCell(item: StateHistoryRow) {\n  const matches = item.data.data?.evalMatches ?? [];\n\n  return (\n    <>\n      {item.data.text}\n      <LabelsWrapper>\n        {matches.map((match) => (\n          <AlertLabel key={match.metric} labelKey={match.metric} value={String(match.value)} />\n        ))}\n      </LabelsWrapper>\n    </>\n  );\n}\n\nfunction renderStateCell(item: StateHistoryRow) {\n  return <AlertStateTag state={item.data.state} />;\n}\n\nfunction renderTimestampCell(item: StateHistoryRow) {\n  return (\n    <div className={TimestampStyle}>{item.data.timestamp && <span>{dateTimeFormat(item.data.timestamp)}</span>}</div>\n  );\n}\n\nconst LabelsWrapper = ({ children }: React.PropsWithChildren<{}>) => {\n  const { wrapper } = useStyles2(getStyles);\n  return <div className={wrapper}>{children}</div>;\n};\n\nconst TimestampStyle = css`\n  display: flex;\n  align-items: flex-end;\n  flex-direction: column;\n`;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & > * {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n  tableGroupKey: css`\n    margin-top: ${theme.spacing(2)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n\nexport { StateHistory };\n","import { useEffect } from 'react';\n\nimport { useDispatch } from 'app/types';\nimport { StateHistoryItem } from 'app/types/unified-alerting';\n\nimport { fetchGrafanaAnnotationsAction } from '../state/actions';\nimport { AsyncRequestState } from '../utils/redux';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useManagedAlertStateHistory(alertId: string) {\n  const dispatch = useDispatch();\n  const history = useUnifiedAlertingSelector<AsyncRequestState<StateHistoryItem[]>>(\n    (state) => state.managedAlertStateHistory\n  );\n\n  useEffect(() => {\n    dispatch(fetchGrafanaAnnotationsAction(alertId));\n  }, [dispatch, alertId]);\n\n  return history;\n}\n","import { css } from '@emotion/css';\nimport React, { FC, Fragment, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2, textUtil, urlUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, ClipboardButton, ConfirmModal, HorizontalGroup, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction, useDispatch } from 'app/types';\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { useIsRuleEditable } from '../../hooks/useIsRuleEditable';\nimport { useStateHistoryModal } from '../../hooks/useStateHistoryModal';\nimport { deleteRuleAction } from '../../state/actions';\nimport { getAlertmanagerByUid } from '../../utils/alertmanager';\nimport { Annotation } from '../../utils/constants';\nimport { getRulesSourceName, isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { createExploreLink, makeRuleBasedSilenceLink } from '../../utils/misc';\nimport * as ruleId from '../../utils/rule-id';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\n\ninterface Props {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n  isViewMode: boolean;\n}\n\nexport const RuleDetailsActionButtons: FC<Props> = ({ rule, rulesSource, isViewMode }) => {\n  const style = useStyles2(getStyles);\n  const { namespace, group, rulerRule } = rule;\n  const alertId = isGrafanaRulerRule(rule.rulerRule) ? rule.rulerRule.grafana_alert.id ?? '' : '';\n  const { StateHistoryModal, showStateHistoryModal } = useStateHistoryModal(alertId);\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const notifyApp = useAppNotification();\n\n  const [ruleToDelete, setRuleToDelete] = useState<CombinedRule>();\n\n  const alertmanagerSourceName = isGrafanaRulesSource(rulesSource)\n    ? rulesSource\n    : getAlertmanagerByUid(rulesSource.jsonData.alertmanagerUid)?.name;\n\n  const hasExplorePermission = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  const buttons: JSX.Element[] = [];\n  const rightButtons: JSX.Element[] = [];\n\n  const deleteRule = () => {\n    if (ruleToDelete && ruleToDelete.rulerRule) {\n      const identifier = ruleId.fromRulerRule(\n        getRulesSourceName(ruleToDelete.namespace.rulesSource),\n        ruleToDelete.namespace.name,\n        ruleToDelete.group.name,\n        ruleToDelete.rulerRule\n      );\n\n      dispatch(deleteRuleAction(identifier, { navigateTo: isViewMode ? '/alerting/list' : undefined }));\n      setRuleToDelete(undefined);\n    }\n  };\n  const buildShareUrl = () => {\n    if (isCloudRulesSource(rulesSource)) {\n      const { appUrl, appSubUrl } = config;\n      const baseUrl = appSubUrl !== '' ? `${appUrl}${appSubUrl}/` : config.appUrl;\n      const ruleUrl = `${encodeURIComponent(rulesSource.name)}/${encodeURIComponent(rule.name)}`;\n      return `${baseUrl}alerting/${ruleUrl}/find`;\n    }\n\n    return window.location.href.split('?')[0];\n  };\n\n  const isFederated = isFederatedRuleGroup(group);\n  const rulesSourceName = getRulesSourceName(rulesSource);\n  const isProvisioned = isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance);\n\n  const { isEditable, isRemovable } = useIsRuleEditable(rulesSourceName, rulerRule);\n  const canSilence = useCanSilence(rule);\n\n  const returnTo = location.pathname + location.search;\n  // explore does not support grafana rule queries atm\n  // neither do \"federated rules\"\n  if (isCloudRulesSource(rulesSource) && hasExplorePermission && !isFederated) {\n    buttons.push(\n      <LinkButton\n        className={style.button}\n        size=\"xs\"\n        key=\"explore\"\n        variant=\"primary\"\n        icon=\"chart-line\"\n        target=\"__blank\"\n        href={createExploreLink(rulesSource.name, rule.query)}\n      >\n        See graph\n      </LinkButton>\n    );\n  }\n  if (rule.annotations[Annotation.runbookURL]) {\n    buttons.push(\n      <LinkButton\n        className={style.button}\n        size=\"xs\"\n        key=\"runbook\"\n        variant=\"primary\"\n        icon=\"book\"\n        target=\"__blank\"\n        href={textUtil.sanitizeUrl(rule.annotations[Annotation.runbookURL])}\n      >\n        View runbook\n      </LinkButton>\n    );\n  }\n  if (rule.annotations[Annotation.dashboardUID]) {\n    const dashboardUID = rule.annotations[Annotation.dashboardUID];\n    if (dashboardUID) {\n      buttons.push(\n        <LinkButton\n          className={style.button}\n          size=\"xs\"\n          key=\"dashboard\"\n          variant=\"primary\"\n          icon=\"apps\"\n          target=\"__blank\"\n          href={`d/${encodeURIComponent(dashboardUID)}`}\n        >\n          Go to dashboard\n        </LinkButton>\n      );\n      const panelId = rule.annotations[Annotation.panelID];\n      if (panelId) {\n        buttons.push(\n          <LinkButton\n            className={style.button}\n            size=\"xs\"\n            key=\"panel\"\n            variant=\"primary\"\n            icon=\"apps\"\n            target=\"__blank\"\n            href={`d/${encodeURIComponent(dashboardUID)}?viewPanel=${encodeURIComponent(panelId)}`}\n          >\n            Go to panel\n          </LinkButton>\n        );\n      }\n    }\n  }\n\n  if (canSilence && alertmanagerSourceName) {\n    buttons.push(\n      <LinkButton\n        className={style.button}\n        size=\"xs\"\n        key=\"silence\"\n        icon=\"bell-slash\"\n        target=\"__blank\"\n        href={makeRuleBasedSilenceLink(alertmanagerSourceName, rule)}\n      >\n        Silence\n      </LinkButton>\n    );\n  }\n\n  if (alertId) {\n    buttons.push(\n      <Fragment key=\"history\">\n        <Button className={style.button} size=\"xs\" icon=\"history\" onClick={() => showStateHistoryModal()}>\n          Show state history\n        </Button>\n        {StateHistoryModal}\n      </Fragment>\n    );\n  }\n\n  if (isViewMode) {\n    if (isEditable && rulerRule && !isFederated && !isProvisioned) {\n      const sourceName = getRulesSourceName(rulesSource);\n      const identifier = ruleId.fromRulerRule(sourceName, namespace.name, group.name, rulerRule);\n\n      const editURL = urlUtil.renderUrl(\n        `${config.appSubUrl}/alerting/${encodeURIComponent(ruleId.stringifyIdentifier(identifier))}/edit`,\n        {\n          returnTo,\n        }\n      );\n      rightButtons.push(\n        <ClipboardButton\n          key=\"copy\"\n          icon=\"copy\"\n          onClipboardError={(copiedText) => {\n            notifyApp.error('Error while copying URL', copiedText);\n          }}\n          className={style.button}\n          size=\"sm\"\n          getText={buildShareUrl}\n        >\n          Copy link to rule\n        </ClipboardButton>\n      );\n\n      rightButtons.push(\n        <LinkButton className={style.button} size=\"xs\" key=\"edit\" variant=\"secondary\" icon=\"pen\" href={editURL}>\n          Edit\n        </LinkButton>\n      );\n    }\n\n    if (isRemovable && rulerRule && !isFederated && !isProvisioned) {\n      rightButtons.push(\n        <Button\n          className={style.button}\n          size=\"xs\"\n          type=\"button\"\n          key=\"delete\"\n          variant=\"secondary\"\n          icon=\"trash-alt\"\n          onClick={() => setRuleToDelete(rule)}\n        >\n          Delete\n        </Button>\n      );\n    }\n  }\n\n  if (buttons.length || rightButtons.length) {\n    return (\n      <>\n        <div className={style.wrapper}>\n          <HorizontalGroup width=\"auto\">{buttons.length ? buttons : <div />}</HorizontalGroup>\n          <HorizontalGroup width=\"auto\">{rightButtons.length ? rightButtons : <div />}</HorizontalGroup>\n        </div>\n        {!!ruleToDelete && (\n          <ConfirmModal\n            isOpen={true}\n            title=\"Delete rule\"\n            body=\"Deleting this rule will permanently remove it from your alert rule list. Are you sure you want to delete this rule?\"\n            confirmText=\"Yes, delete\"\n            icon=\"exclamation-triangle\"\n            onConfirm={deleteRule}\n            onDismiss={() => setRuleToDelete(undefined)}\n          />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\n/**\n * We don't want to show the silence button if either\n * 1. the user has no permissions to create silences\n * 2. the admin has configured to only send instances to external AMs\n */\nfunction useCanSilence(rule: CombinedRule) {\n  const isGrafanaManagedRule = isGrafanaRulerRule(rule.rulerRule);\n\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n  const { currentData: amConfigStatus, isLoading } = useGetAlertmanagerChoiceStatusQuery(undefined, {\n    skip: !isGrafanaManagedRule,\n  });\n\n  if (!isGrafanaManagedRule || isLoading) {\n    return false;\n  }\n\n  const hasPermissions = contextSrv.hasAccess(AccessControlAction.AlertingInstanceCreate, contextSrv.isEditor);\n\n  const interactsOnlyWithExternalAMs = amConfigStatus?.alertmanagersChoice === AlertmanagerChoice.External;\n  const interactsWithAll = amConfigStatus?.alertmanagersChoice === AlertmanagerChoice.All;\n\n  return hasPermissions && (!interactsOnlyWithExternalAMs || interactsWithAll);\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    padding: ${theme.spacing(2)} 0;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  button: css`\n    height: 24px;\n    font-size: ${theme.typography.size.sm};\n  `,\n});\n","import React, { useMemo, useState } from 'react';\n\nimport { Modal } from '@grafana/ui';\n\nimport { StateHistory } from '../components/rules/StateHistory';\n\nfunction useStateHistoryModal(alertId: string) {\n  const [showModal, setShowModal] = useState<boolean>(false);\n\n  const StateHistoryModal = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={() => setShowModal(false)}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title=\"State history\"\n      >\n        <StateHistory alertId={alertId} />\n      </Modal>\n    ),\n    [alertId, showModal]\n  );\n\n  return {\n    StateHistoryModal,\n    showStateHistoryModal: () => setShowModal(true),\n    hideStateHistoryModal: () => setShowModal(false),\n  };\n}\n\nexport { useStateHistoryModal };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\n\ntype Props = {\n  annotations: Array<[string, string]>;\n};\n\nexport function RuleDetailsAnnotations(props: Props): JSX.Element | null {\n  const { annotations } = props;\n  const styles = useStyles2(getStyles);\n\n  if (annotations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.annotations}>\n      {annotations.map(([key, value]) => (\n        <AnnotationDetailsField key={key} annotationKey={key} value={value} />\n      ))}\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  annotations: css`\n    margin-top: 46px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\n\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { DetailsField } from '../DetailsField';\n\ntype Props = {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n};\n\nexport function RuleDetailsDataSources(props: Props): JSX.Element | null {\n  const { rulesSource, rule } = props;\n  const styles = useStyles2(getStyles);\n\n  const dataSources: Array<{ name: string; icon?: string }> = useMemo(() => {\n    if (isCloudRulesSource(rulesSource)) {\n      return [{ name: rulesSource.name, icon: rulesSource.meta.info.logos.small }];\n    }\n\n    if (isGrafanaRulerRule(rule.rulerRule)) {\n      const { data } = rule.rulerRule.grafana_alert;\n      const unique = data.reduce((dataSources, query) => {\n        const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n\n        if (!ds || ds.uid === ExpressionDatasourceUID) {\n          return dataSources;\n        }\n\n        dataSources[ds.name] = { name: ds.name, icon: ds.meta.info.logos.small };\n        return dataSources;\n      }, {} as Record<string, { name: string; icon?: string }>);\n\n      return Object.values(unique);\n    }\n\n    return [];\n  }, [rule, rulesSource]);\n\n  if (dataSources.length === 0) {\n    return null;\n  }\n\n  return (\n    <DetailsField label=\"Data source\">\n      {dataSources.map(({ name, icon }, index) => (\n        <div key={name}>\n          {icon && (\n            <>\n              <img alt={`${name} datasource logo`} className={styles.dataSourceIcon} src={icon} />{' '}\n            </>\n          )}\n          {name}\n        </div>\n      ))}\n    </DetailsField>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  const size = theme.spacing(2);\n\n  return {\n    dataSourceIcon: css`\n      width: ${size};\n      height: ${size};\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { FC, useMemo } from 'react';\nimport { Editor } from 'slate-react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { makeValue, SlatePrism, useStyles2 } from '@grafana/ui';\nimport LogqlSyntax from 'app/plugins/datasource/loki/syntax';\nimport PromqlSyntax from 'app/plugins/datasource/prometheus/promql';\nimport { RulesSource } from 'app/types/unified-alerting';\n\nimport { DataSourceType, isCloudRulesSource } from '../utils/datasource';\n\nimport { Well } from './Well';\n\ninterface Props {\n  expression: string;\n  rulesSource: RulesSource;\n}\n\nexport const HighlightedQuery: FC<{ language: 'promql' | 'logql'; expr: string }> = ({ language, expr }) => {\n  const plugins = useMemo(\n    () => [\n      SlatePrism(\n        {\n          onlyIn: (node: any) => node.type === 'code_block',\n          getSyntax: () => language,\n        },\n        { ...(prismLanguages as LanguageMap), [language]: language === 'logql' ? LogqlSyntax : PromqlSyntax }\n      ),\n    ],\n    [language]\n  );\n\n  const slateValue = useMemo(() => makeValue(expr), [expr]);\n\n  //We don't want to set readOnly={true} to the Editor to prevent unwanted charaters in the copied text. See https://github.com/grafana/grafana/pull/57839\n  return <Editor data-testid={'expression-editor'} plugins={plugins} value={slateValue} />;\n};\n\nexport const Expression: FC<Props> = ({ expression: query, rulesSource }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Well className={cx(styles.well, 'slate-query-field')}>\n      {isCloudRulesSource(rulesSource) ? (\n        <HighlightedQuery expr={query} language={rulesSource.type === DataSourceType.Loki ? 'logql' : 'promql'} />\n      ) : (\n        query\n      )}\n    </Well>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  well: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\n\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { DetailsField } from '../DetailsField';\nimport { Expression } from '../Expression';\n\ntype Props = {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n  annotations: Array<[string, string]>;\n};\n\nexport function RuleDetailsExpression(props: Props): JSX.Element | null {\n  const { annotations, rulesSource, rule } = props;\n  const styles = getStyles();\n\n  if (!isCloudRulesSource(rulesSource)) {\n    return null;\n  }\n\n  return (\n    <DetailsField label=\"Expression\" horizontal={true} className={cx({ [styles.exprRow]: !!annotations.length })}>\n      <Expression expression={rule.query} rulesSource={rulesSource} />\n    </DetailsField>\n  );\n}\n\nconst getStyles = () => ({\n  exprRow: css`\n    margin-bottom: 46px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Label, RadioButtonGroup, Tag, useStyles2 } from '@grafana/ui';\nimport { GrafanaAlertState, PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nexport type InstanceStateFilter = GrafanaAlertState | PromAlertingRuleState.Pending | PromAlertingRuleState.Firing;\n\ninterface Props {\n  className?: string;\n  filterType: 'grafana' | 'prometheus';\n  stateFilter?: InstanceStateFilter;\n  onStateFilterChange: (value?: InstanceStateFilter) => void;\n  itemPerStateStats?: Record<string, number>;\n}\n\nexport const AlertInstanceStateFilter = ({\n  className,\n  onStateFilterChange,\n  stateFilter,\n  filterType,\n  itemPerStateStats,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const getOptionComponent = (state: InstanceStateFilter) => {\n    return function InstanceStateCounter() {\n      return itemPerStateStats && itemPerStateStats[state] ? (\n        <Tag name={itemPerStateStats[state].toFixed(0)} colorIndex={9} className={styles.tag} />\n      ) : null;\n    };\n  };\n\n  const grafanaOptions = Object.values(GrafanaAlertState).map((state) => ({\n    label: state,\n    value: state,\n    component: getOptionComponent(state),\n  }));\n\n  const promOptionValues = [PromAlertingRuleState.Firing, PromAlertingRuleState.Pending] as const;\n  const promOptions = promOptionValues.map((state) => ({\n    label: capitalize(state),\n    value: state,\n    component: getOptionComponent(state),\n  }));\n\n  const stateOptions = filterType === 'grafana' ? grafanaOptions : promOptions;\n\n  return (\n    <div className={className} data-testid=\"alert-instance-state-filter\">\n      <Label>State</Label>\n      <RadioButtonGroup\n        options={stateOptions}\n        value={stateFilter}\n        onChange={onStateFilterChange}\n        onClick={(v) => {\n          if (v === stateFilter) {\n            onStateFilterChange(undefined);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    tag: css`\n      font-size: 11px;\n      font-weight: normal;\n      padding: ${theme.spacing(0.25, 0.5)};\n      vertical-align: middle;\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { countBy } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { MatcherFilter } from 'app/features/alerting/unified/components/alert-groups/MatcherFilter';\nimport {\n  AlertInstanceStateFilter,\n  InstanceStateFilter,\n} from 'app/features/alerting/unified/components/rules/AlertInstanceStateFilter';\nimport { labelsMatchMatchers, parseMatchers } from 'app/features/alerting/unified/utils/alertmanager';\nimport { createViewLink, sortAlerts } from 'app/features/alerting/unified/utils/misc';\nimport { SortOrder } from 'app/plugins/panel/alertlist/types';\nimport { Alert, CombinedRule, PaginationProps } from 'app/types/unified-alerting';\nimport { mapStateWithReasonToBaseState } from 'app/types/unified-alerting-dto';\n\nimport { GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from '../../utils/datasource';\nimport { isAlertingRule } from '../../utils/rules';\nimport { DetailsField } from '../DetailsField';\n\nimport { AlertInstancesTable } from './AlertInstancesTable';\n\ninterface Props {\n  rule: CombinedRule;\n  pagination?: PaginationProps;\n  itemsDisplayLimit?: number;\n}\n\ninterface ShowMoreStats {\n  totalItemsCount: number;\n  visibleItemsCount: number;\n}\n\nfunction ShowMoreInstances(props: { ruleViewPageLink: string; stats: ShowMoreStats }) {\n  const styles = useStyles2(getStyles);\n  const { ruleViewPageLink, stats } = props;\n\n  return (\n    <div className={styles.footerRow}>\n      <div>\n        Showing {stats.visibleItemsCount} out of {stats.totalItemsCount} instances\n      </div>\n      {ruleViewPageLink && (\n        <LinkButton href={ruleViewPageLink} size=\"sm\" variant=\"secondary\">\n          Show all {stats.totalItemsCount} alert instances\n        </LinkButton>\n      )}\n    </div>\n  );\n}\n\nexport function RuleDetailsMatchingInstances(props: Props): JSX.Element | null {\n  const {\n    rule: { promRule, namespace },\n    itemsDisplayLimit = Number.POSITIVE_INFINITY,\n    pagination,\n  } = props;\n\n  const [queryString, setQueryString] = useState<string>();\n  const [alertState, setAlertState] = useState<InstanceStateFilter>();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const styles = useStyles2(getStyles);\n\n  const stateFilterType = isGrafanaRulesSource(namespace.rulesSource) ? GRAFANA_RULES_SOURCE_NAME : 'prometheus';\n\n  const alerts = useMemo(\n    (): Alert[] =>\n      isAlertingRule(promRule) && promRule.alerts?.length\n        ? filterAlerts(queryString, alertState, sortAlerts(SortOrder.Importance, promRule.alerts))\n        : [],\n    [promRule, alertState, queryString]\n  );\n\n  if (!isAlertingRule(promRule)) {\n    return null;\n  }\n\n  const visibleInstances = alerts.slice(0, itemsDisplayLimit);\n\n  const countAllByState = countBy(promRule.alerts, (alert) => mapStateWithReasonToBaseState(alert.state));\n  const hiddenItemsCount = alerts.length - visibleInstances.length;\n\n  const stats: ShowMoreStats = {\n    totalItemsCount: alerts.length,\n    visibleItemsCount: visibleInstances.length,\n  };\n\n  const ruleViewPageLink = createViewLink(namespace.rulesSource, props.rule, location.pathname + location.search);\n\n  const footerRow = hiddenItemsCount ? (\n    <ShowMoreInstances stats={stats} ruleViewPageLink={ruleViewPageLink} />\n  ) : undefined;\n\n  return (\n    <DetailsField label=\"Matching instances\" horizontal={true}>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <MatcherFilter\n            className={styles.rowChild}\n            key={queryStringKey}\n            defaultQueryString={queryString}\n            onFilterChange={(value) => setQueryString(value)}\n          />\n          <AlertInstanceStateFilter\n            className={styles.rowChild}\n            filterType={stateFilterType}\n            stateFilter={alertState}\n            onStateFilterChange={setAlertState}\n            itemPerStateStats={countAllByState}\n          />\n        </div>\n      </div>\n\n      <AlertInstancesTable instances={visibleInstances} pagination={pagination} footerRow={footerRow} />\n    </DetailsField>\n  );\n}\n\nfunction filterAlerts(\n  alertInstanceLabel: string | undefined,\n  alertInstanceState: InstanceStateFilter | undefined,\n  alerts: Alert[]\n): Alert[] {\n  let filteredAlerts = [...alerts];\n  if (alertInstanceLabel) {\n    const matchers = parseMatchers(alertInstanceLabel || '');\n    filteredAlerts = filteredAlerts.filter(({ labels }) => labelsMatchMatchers(labels, matchers));\n  }\n  if (alertInstanceState) {\n    filteredAlerts = filteredAlerts.filter((alert) => {\n      return mapStateWithReasonToBaseState(alert.state) === alertInstanceState;\n    });\n  }\n\n  return filteredAlerts;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n    footerRow: css`\n      display: flex;\n      flex-direction: column;\n      gap: ${theme.spacing(1)};\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Rule } from 'app/types/unified-alerting';\n\ninterface Prom {\n  rule: Rule;\n}\n\nexport const RuleHealth: FC<Prom> = ({ rule }) => {\n  const style = useStyles2(getStyle);\n\n  if (rule.health === 'err' || rule.health === 'error') {\n    return (\n      <Tooltip theme=\"error\" content={rule.lastError || 'No error message provided.'}>\n        <div className={style.warn}>\n          <Icon name=\"exclamation-triangle\" />\n          <span>error</span>\n        </div>\n      </Tooltip>\n    );\n  }\n\n  return <>{rule.health}</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  warn: css`\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n\n    color: ${theme.colors.warning.text};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { HorizontalGroup, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, getFirstActiveAt } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface Props {\n  rule: CombinedRule;\n  isDeleting: boolean;\n  isCreating: boolean;\n}\n\nexport const RuleState: FC<Props> = ({ rule, isDeleting, isCreating }) => {\n  const style = useStyles2(getStyle);\n  const { promRule } = rule;\n\n  // return how long the rule has been in its firing state, if any\n  const forTime = useMemo(() => {\n    if (\n      promRule &&\n      isAlertingRule(promRule) &&\n      promRule.alerts?.length &&\n      promRule.state !== PromAlertingRuleState.Inactive\n    ) {\n      // find earliest alert\n      const firstActiveAt = getFirstActiveAt(promRule);\n\n      // calculate time elapsed from earliest alert\n      if (firstActiveAt) {\n        return (\n          <span title={String(firstActiveAt)} className={style.for}>\n            for{' '}\n            {intervalToAbbreviatedDurationString(\n              {\n                start: firstActiveAt,\n                end: new Date(),\n              },\n              false\n            )}\n          </span>\n        );\n      }\n    }\n    return null;\n  }, [promRule, style]);\n\n  if (isDeleting) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (isCreating) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        {' '}\n        <Spinner />\n        creating\n      </HorizontalGroup>\n    );\n  } else if (promRule && isAlertingRule(promRule)) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <AlertStateTag state={promRule.state} />\n        {forTime}\n      </HorizontalGroup>\n    );\n  } else if (promRule && isRecordingRule(promRule)) {\n    return <>Recording rule</>;\n  }\n  return <>n/a</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  for: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    padding-top: 2px;\n  `,\n});\n","import { isEqual } from 'lodash';\nimport { useMemo, useRef } from 'react';\n\nimport {\n  CombinedRule,\n  CombinedRuleGroup,\n  CombinedRuleNamespace,\n  Rule,\n  RuleGroup,\n  RuleNamespace,\n  RulesSource,\n} from 'app/types/unified-alerting';\nimport { RulerRuleDTO, RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport {\n  getAllRulesSources,\n  getRulesSourceByName,\n  isCloudRulesSource,\n  isGrafanaRulesSource,\n} from '../utils/datasource';\nimport { isAlertingRule, isAlertingRulerRule, isRecordingRulerRule } from '../utils/rules';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface CacheValue {\n  promRules?: RuleNamespace[];\n  rulerRules?: RulerRulesConfigDTO | null;\n  result: CombinedRuleNamespace[];\n}\n\n// this little monster combines prometheus rules and ruler rules to produce a unified data structure\n// can limit to a single rules source\nexport function useCombinedRuleNamespaces(rulesSourceName?: string): CombinedRuleNamespace[] {\n  const promRulesResponses = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRulesResponses = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  // cache results per rules source, so we only recalculate those for which results have actually changed\n  const cache = useRef<Record<string, CacheValue>>({});\n\n  const rulesSources = useMemo((): RulesSource[] => {\n    if (rulesSourceName) {\n      const rulesSource = getRulesSourceByName(rulesSourceName);\n      if (!rulesSource) {\n        throw new Error(`Unknown rules source: ${rulesSourceName}`);\n      }\n      return [rulesSource];\n    }\n    return getAllRulesSources();\n  }, [rulesSourceName]);\n\n  return useMemo(\n    () =>\n      rulesSources\n        .map((rulesSource): CombinedRuleNamespace[] => {\n          const rulesSourceName = isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n          const promRules = promRulesResponses[rulesSourceName]?.result;\n          const rulerRules = rulerRulesResponses[rulesSourceName]?.result;\n\n          const cached = cache.current[rulesSourceName];\n          if (cached && cached.promRules === promRules && cached.rulerRules === rulerRules) {\n            return cached.result;\n          }\n          const namespaces: Record<string, CombinedRuleNamespace> = {};\n\n          // first get all the ruler rules in\n          Object.entries(rulerRules || {}).forEach(([namespaceName, groups]) => {\n            const namespace: CombinedRuleNamespace = {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            };\n            namespaces[namespaceName] = namespace;\n            addRulerGroupsToCombinedNamespace(namespace, groups);\n          });\n\n          // then correlate with prometheus rules\n          promRules?.forEach(({ name: namespaceName, groups }) => {\n            const ns = (namespaces[namespaceName] = namespaces[namespaceName] || {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            });\n\n            addPromGroupsToCombinedNamespace(ns, groups);\n          });\n\n          const result = Object.values(namespaces);\n\n          cache.current[rulesSourceName] = { promRules, rulerRules, result };\n          return result;\n        })\n        .flat(),\n    [promRulesResponses, rulerRulesResponses, rulesSources]\n  );\n}\n\n// merge all groups in case of grafana managed, essentially treating namespaces (folders) as groups\nexport function flattenGrafanaManagedRules(namespaces: CombinedRuleNamespace[]) {\n  return namespaces.map((namespace) => {\n    const newNamespace: CombinedRuleNamespace = {\n      ...namespace,\n      groups: [],\n    };\n\n    // add default group with ungrouped rules\n    newNamespace.groups.push({\n      name: 'default',\n      rules: sortRulesByName(namespace.groups.flatMap((group) => group.rules)),\n    });\n\n    return newNamespace;\n  });\n}\n\nexport function sortRulesByName(rules: CombinedRule[]) {\n  return rules.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nfunction addRulerGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RulerRuleGroupDTO[] = []): void {\n  namespace.groups = groups.map((group) => {\n    const combinedGroup: CombinedRuleGroup = {\n      name: group.name,\n      interval: group.interval,\n      source_tenants: group.source_tenants,\n      rules: [],\n    };\n    combinedGroup.rules = group.rules.map((rule) => rulerRuleToCombinedRule(rule, namespace, combinedGroup));\n    return combinedGroup;\n  });\n}\n\nfunction addPromGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RuleGroup[]): void {\n  const existingGroupsByName = new Map<string, CombinedRuleGroup>();\n  namespace.groups.forEach((group) => existingGroupsByName.set(group.name, group));\n\n  groups.forEach((group) => {\n    let combinedGroup = existingGroupsByName.get(group.name);\n    if (!combinedGroup) {\n      combinedGroup = {\n        name: group.name,\n        rules: [],\n      };\n      namespace.groups.push(combinedGroup);\n      existingGroupsByName.set(group.name, combinedGroup);\n    }\n\n    const combinedRulesByName = new Map<string, CombinedRule[]>();\n    combinedGroup!.rules.forEach((r) => {\n      // Prometheus rules do not have to be unique by name\n      const existingRule = combinedRulesByName.get(r.name);\n      existingRule ? existingRule.push(r) : combinedRulesByName.set(r.name, [r]);\n    });\n\n    (group.rules ?? []).forEach((rule) => {\n      const existingRule = getExistingRuleInGroup(rule, combinedRulesByName, namespace.rulesSource);\n      if (existingRule) {\n        existingRule.promRule = rule;\n      } else {\n        combinedGroup!.rules.push(promRuleToCombinedRule(rule, namespace, combinedGroup!));\n      }\n    });\n  });\n}\n\nfunction promRuleToCombinedRule(rule: Rule, namespace: CombinedRuleNamespace, group: CombinedRuleGroup): CombinedRule {\n  return {\n    name: rule.name,\n    query: rule.query,\n    labels: rule.labels || {},\n    annotations: isAlertingRule(rule) ? rule.annotations || {} : {},\n    promRule: rule,\n    namespace: namespace,\n    group,\n  };\n}\n\nfunction rulerRuleToCombinedRule(\n  rule: RulerRuleDTO,\n  namespace: CombinedRuleNamespace,\n  group: CombinedRuleGroup\n): CombinedRule {\n  return isAlertingRulerRule(rule)\n    ? {\n        name: rule.alert,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : isRecordingRulerRule(rule)\n    ? {\n        name: rule.record,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : {\n        name: rule.grafana_alert.title,\n        query: '',\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      };\n}\n\n// find existing rule in group that matches the given prom rule\nfunction getExistingRuleInGroup(\n  rule: Rule,\n  existingCombinedRulesMap: Map<string, CombinedRule[]>,\n  rulesSource: RulesSource\n): CombinedRule | undefined {\n  // Using Map of name-based rules is important performance optimization for the code below\n  // Otherwise we would perform find method multiple times on (possibly) thousands of rules\n\n  const nameMatchingRules = existingCombinedRulesMap.get(rule.name);\n  if (!nameMatchingRules) {\n    return undefined;\n  }\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    // assume grafana groups have only the one rule. check name anyway because paranoid\n    return nameMatchingRules[0];\n  }\n\n  // try finding a rule that matches name, labels, annotations and query\n  const strictlyMatchingRule = nameMatchingRules.find(\n    (combinedRule) => !combinedRule.promRule && isCombinedRuleEqualToPromRule(combinedRule, rule, true)\n  );\n  if (strictlyMatchingRule) {\n    return strictlyMatchingRule;\n  }\n\n  // if that fails, try finding a rule that only matches name, labels and annotations.\n  // loki & prom can sometimes modify the query so it doesnt match, eg `2 > 1` becomes `1`\n  const looselyMatchingRule = nameMatchingRules.find(\n    (combinedRule) => !combinedRule.promRule && isCombinedRuleEqualToPromRule(combinedRule, rule, false)\n  );\n  if (looselyMatchingRule) {\n    return looselyMatchingRule;\n  }\n\n  return undefined;\n}\n\nfunction isCombinedRuleEqualToPromRule(combinedRule: CombinedRule, rule: Rule, checkQuery = true): boolean {\n  if (combinedRule.name === rule.name) {\n    return isEqual(\n      [checkQuery ? hashQuery(combinedRule.query) : '', combinedRule.labels, combinedRule.annotations],\n      [checkQuery ? hashQuery(rule.query) : '', rule.labels || {}, isAlertingRule(rule) ? rule.annotations || {} : {}]\n    );\n  }\n  return false;\n}\n\n// there can be slight differences in how prom & ruler render a query, this will hash them accounting for the differences\nfunction hashQuery(query: string) {\n  // one of them might be wrapped in parens\n  if (query.length > 1 && query[0] === '(' && query[query.length - 1] === ')') {\n    query = query.slice(1, -1);\n  }\n  // whitespace could be added or removed\n  query = query.replace(/\\s|\\n/g, '');\n  // labels matchers can be reordered, so sort the enitre string, esentially comparing just the character counts\n  return query.split('').sort().join('');\n}\n","import { useEffect } from 'react';\n\nimport { FolderDTO, useDispatch } from 'app/types';\n\nimport { fetchFolderIfNotFetchedAction } from '../state/actions';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface ReturnBag {\n  folder?: FolderDTO;\n  loading: boolean;\n}\n\nexport function useFolder(uid?: string): ReturnBag {\n  const dispatch = useDispatch();\n  const folderRequests = useUnifiedAlertingSelector((state) => state.folders);\n  useEffect(() => {\n    if (uid) {\n      dispatch(fetchFolderIfNotFetchedAction(uid));\n    }\n  }, [dispatch, uid]);\n\n  if (uid) {\n    const request = folderRequests[uid] || initialAsyncRequestState;\n    return {\n      folder: request.result,\n      loading: request.loading,\n    };\n  }\n  return {\n    loading: false,\n  };\n}\n","import { contextSrv } from 'app/core/services/context_srv';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { getRulesPermissions } from '../utils/access-control';\nimport { isGrafanaRulerRule } from '../utils/rules';\n\nimport { useFolder } from './useFolder';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface ResultBag {\n  isEditable?: boolean;\n  isRemovable?: boolean;\n  loading: boolean;\n}\n\nexport function useIsRuleEditable(rulesSourceName: string, rule?: RulerRuleDTO): ResultBag {\n  const dataSources = useUnifiedAlertingSelector((state) => state.dataSources);\n  const folderUID = rule && isGrafanaRulerRule(rule) ? rule.grafana_alert.namespace_uid : undefined;\n\n  const rulePermission = getRulesPermissions(rulesSourceName);\n  const { folder, loading } = useFolder(folderUID);\n\n  if (!rule) {\n    return { isEditable: false, isRemovable: false, loading: false };\n  }\n\n  // Grafana rules can be edited if user can edit the folder they're in\n  // When RBAC is disabled access to a folder is the only requirement for managing rules\n  // When RBAC is enabled the appropriate alerting permissions need to be met\n  if (isGrafanaRulerRule(rule)) {\n    if (!folderUID) {\n      throw new Error(\n        `Rule ${rule.grafana_alert.title} does not have a folder uid, cannot determine if it is editable.`\n      );\n    }\n\n    if (!folder) {\n      // Loading or invalid folder UID\n      return {\n        isEditable: false,\n        isRemovable: false,\n        loading,\n      };\n    }\n    const rbacDisabledFallback = folder.canSave;\n\n    const canEditGrafanaRules = contextSrv.hasAccessInMetadata(rulePermission.update, folder, rbacDisabledFallback);\n    const canRemoveGrafanaRules = contextSrv.hasAccessInMetadata(rulePermission.delete, folder, rbacDisabledFallback);\n\n    return {\n      isEditable: canEditGrafanaRules,\n      isRemovable: canRemoveGrafanaRules,\n      loading,\n    };\n  }\n\n  // prom rules are only editable by users with Editor role and only if rules source supports editing\n  const isRulerAvailable = Boolean(dataSources[rulesSourceName]?.result?.rulerConfig);\n  const canEditCloudRules = contextSrv.hasAccess(rulePermission.update, contextSrv.isEditor);\n  const canRemoveCloudRules = contextSrv.hasAccess(rulePermission.delete, contextSrv.isEditor);\n\n  return {\n    isEditable: canEditCloudRules && isRulerAvailable,\n    isRemovable: canRemoveCloudRules && isRulerAvailable,\n    loading: dataSources[rulesSourceName]?.loading,\n  };\n}\n"],"names":["alertmanagerApi","alertingApi","endpoints","build","getAlertmanagerChoiceStatus","query","url","providesTags","getExternalAlertmanagerConfig","getExternalAlertmanagers","transformResponse","response","data","saveExternalAlertmanagersConfig","mutation","config","method","invalidatesTags","ProvisionedResource","ProvisioningAlert","resource","title","severity","ProvisioningBadge","text","color","MatcherFilter","className","onFilterChange","defaultQueryString","styles","useStyles2","getStyles","onSearchInputChanged","useMemo","debounce","e","logInfo","LogMessages","target","value","useEffect","cancel","searchIcon","name","Stack","gap","content","icon","size","I","placeholder","defaultValue","onChange","prefix","inputWidth","theme","css","spacing","StateHistory","alertId","textFilter","setTextFilter","useState","handleTextFilter","useCallback","event","currentTarget","loading","error","result","dispatch","useDispatch","history","useUnifiedAlertingSelector","state","managedAlertStateHistory","fetchGrafanaAnnotationsAction","useManagedAlertStateHistory","LoadingPlaceholder","Alert","message","columns","id","label","renderCell","renderStateCell","renderValueCell","renderTimestampCell","tables","Object","entries","items","map","item","LABELS_REGEX","stringifiedLabels","match","at","String","newState","replace","timestamp","updated","groupBy","groupStateByLabels","sort","filter","groupKey","startsWith","endsWith","includes","RegExp","slice","test","err","matchKey","tableItems","historyItem","tableGroupKey","DynamicTable","cols","Field","Label","Tooltip","Icon","Input","matches","evalMatches","LabelsWrapper","AlertLabel","labelKey","metric","AlertStateTag","TimestampStyle","dateTimeFormat","children","wrapper","RuleDetailsActionButtons","rule","rulesSource","isViewMode","style","namespace","group","rulerRule","isGrafanaRulerRule","grafana_alert","StateHistoryModal","showStateHistoryModal","showModal","setShowModal","Modal","isOpen","onDismiss","closeOnBackdropClick","closeOnEscape","hideStateHistoryModal","useStateHistoryModal","location","useLocation","notifyApp","useAppNotification","ruleToDelete","setRuleToDelete","alertmanagerSourceName","isGrafanaRulesSource","getAlertmanagerByUid","jsonData","alertmanagerUid","hasExplorePermission","contextSrv","AccessControlAction","buttons","rightButtons","deleteRule","identifier","ruleId","getRulesSourceName","deleteRuleAction","navigateTo","undefined","buildShareUrl","isCloudRulesSource","appUrl","appSubUrl","encodeURIComponent","window","href","split","isFederated","isFederatedRuleGroup","rulesSourceName","isProvisioned","Boolean","provenance","isEditable","isRemovable","useIsRuleEditable","canSilence","isGrafanaManagedRule","useGetAlertmanagerChoiceStatusQuery","currentData","amConfigStatus","isLoading","skip","hasPermissions","interactsOnlyWithExternalAMs","alertmanagersChoice","AlertmanagerChoice","interactsWithAll","useCanSilence","returnTo","pathname","search","push","button","variant","createExploreLink","annotations","Annotation","textUtil","dashboardUID","panelId","makeRuleBasedSilenceLink","Fragment","Button","onClick","sourceName","editURL","urlUtil","ClipboardButton","onClipboardError","copiedText","getText","type","length","width","ConfirmModal","body","confirmText","onConfirm","colors","border","medium","typography","sm","RuleDetailsAnnotations","props","key","annotationKey","RuleDetailsDataSources","dataSources","meta","info","logos","small","unique","reduce","ds","getDataSourceSrv","getInstanceSettings","datasourceUid","uid","ExpressionDatasourceUID","values","index","alt","dataSourceIcon","src","HighlightedQuery","language","expr","plugins","SlatePrism","onlyIn","node","getSyntax","prismLanguages","LogqlSyntax","PromqlSyntax","slateValue","makeValue","Expression","expression","Well","cx","well","DataSourceType","fontFamilyMonospace","RuleDetailsExpression","DetailsField","horizontal","exprRow","AlertInstanceStateFilter","onStateFilterChange","stateFilter","filterType","itemPerStateStats","getOptionComponent","Tag","toFixed","colorIndex","tag","grafanaOptions","GrafanaAlertState","component","promOptions","PromAlertingRuleState","capitalize","stateOptions","RadioButtonGroup","options","v","ShowMoreInstances","ruleViewPageLink","stats","footerRow","visibleItemsCount","totalItemsCount","RuleDetailsMatchingInstances","promRule","itemsDisplayLimit","Number","POSITIVE_INFINITY","pagination","queryString","setQueryString","alertState","setAlertState","filterKey","Math","floor","random","queryStringKey","stateFilterType","GRAFANA_RULES_SOURCE_NAME","alerts","isAlertingRule","alertInstanceLabel","alertInstanceState","filteredAlerts","matchers","parseMatchers","labels","labelsMatchMatchers","alert","mapStateWithReasonToBaseState","filterAlerts","sortAlerts","SortOrder","visibleInstances","countAllByState","countBy","hiddenItemsCount","createViewLink","flexRow","spaceBetween","rowChild","AlertInstancesTable","instances","RuleHealth","getStyle","health","lastError","warn","warning","RuleState","isDeleting","isCreating","forTime","firstActiveAt","getFirstActiveAt","for","intervalToAbbreviatedDurationString","start","end","Date","align","isRecordingRule","bodySmall","fontSize","secondary","useCombinedRuleNamespaces","promRulesResponses","promRules","rulerRulesResponses","rulerRules","cache","useRef","rulesSources","getRulesSourceByName","Error","getAllRulesSources","cached","current","namespaces","forEach","namespaceName","groups","combinedGroup","interval","source_tenants","rules","rulerRuleToCombinedRule","addRulerGroupsToCombinedNamespace","existingGroupsByName","Map","set","get","combinedRulesByName","r","existingRule","existingCombinedRulesMap","nameMatchingRules","strictlyMatchingRule","find","combinedRule","isCombinedRuleEqualToPromRule","looselyMatchingRule","getExistingRuleInGroup","promRuleToCombinedRule","addPromGroupsToCombinedNamespace","flat","flattenGrafanaManagedRules","newNamespace","flatMap","a","b","localeCompare","isAlertingRulerRule","isRecordingRulerRule","record","checkQuery","isEqual","hashQuery","join","useFolder","folderRequests","folders","fetchFolderIfNotFetchedAction","request","initialAsyncRequestState","folder","folderUID","namespace_uid","rulePermission","getRulesPermissions","rbacDisabledFallback","canSave","update","delete","isRulerAvailable","rulerConfig"],"sourceRoot":""}