{"version":3,"file":"ServiceAccountCreatePage.3de7a8ecd9ccc1fb960a.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountCreatePage.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Form, Button, Input, Field, FieldSet } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountCreateApiResponse, ServiceAccountDTO } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {}\n\nconst createServiceAccount = async (sa: ServiceAccountDTO) => {\n  const result = await getBackendSrv().post('/api/serviceaccounts/', sa);\n  await contextSrv.fetchUserPermissions();\n  return result;\n};\n\nconst updateServiceAccount = async (id: number, sa: ServiceAccountDTO) =>\n  getBackendSrv().patch(`/api/serviceaccounts/${id}`, sa);\n\nexport const ServiceAccountCreatePage = ({}: Props): JSX.Element => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const currentOrgId = contextSrv.user.orgId;\n  const [serviceAccount, setServiceAccount] = useState<ServiceAccountDTO>({\n    id: 0,\n    orgId: contextSrv.user.orgId,\n    role: OrgRole.Viewer,\n    tokens: 0,\n    name: '',\n    login: '',\n    isDisabled: false,\n    createdAt: '',\n    teams: [],\n  });\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(currentOrgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options', e);\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [currentOrgId]);\n\n  const onSubmit = useCallback(\n    async (data: ServiceAccountDTO) => {\n      data.role = serviceAccount.role;\n      const response = await createServiceAccount(data);\n      try {\n        const newAccount: ServiceAccountCreateApiResponse = {\n          avatarUrl: response.avatarUrl,\n          id: response.id,\n          isDisabled: response.isDisabled,\n          login: response.login,\n          name: response.name,\n          orgId: response.orgId,\n          role: response.role,\n          tokens: response.tokens,\n        };\n        await updateServiceAccount(response.id, data);\n        if (\n          contextSrv.licensedAccessControlEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove)\n        ) {\n          await updateUserRoles(pendingRoles, newAccount.id, newAccount.orgId);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      locationService.push(`/org/serviceaccounts/${response.id}`);\n    },\n    [serviceAccount.role, pendingRoles]\n  );\n\n  const onRoleChange = (role: OrgRole) => {\n    setServiceAccount({\n      ...serviceAccount,\n      role: role,\n    });\n  };\n\n  const onPendingRolesUpdate = (roles: Role[], userId: number, orgId: number | undefined) => {\n    // keep the new role assignments for user\n    setPendingRoles(roles);\n  };\n\n  return (\n    <Page navId=\"serviceaccounts\" pageNav={{ text: 'Create service account' }}>\n      <Page.Contents>\n        <Page.OldNavOnly>\n          <h3 className=\"page-sub-heading\">Create service account</h3>\n        </Page.OldNavOnly>\n        <Form onSubmit={onSubmit} validateOn=\"onSubmit\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <FieldSet>\n                  <Field\n                    label=\"Display name\"\n                    required\n                    invalid={!!errors.name}\n                    error={errors.name ? 'Display name is required' : undefined}\n                  >\n                    <Input id=\"display-name-input\" {...register('name', { required: true })} autoFocus />\n                  </Field>\n                  <Field label=\"Role\">\n                    {contextSrv.licensedAccessControlEnabled() ? (\n                      <UserRolePicker\n                        apply\n                        userId={serviceAccount.id || 0}\n                        orgId={serviceAccount.orgId}\n                        basicRole={serviceAccount.role}\n                        onBasicRoleChange={onRoleChange}\n                        roleOptions={roleOptions}\n                        onApplyRoles={onPendingRolesUpdate}\n                        pendingRoles={pendingRoles}\n                        maxWidth=\"100%\"\n                      />\n                    ) : (\n                      <OrgRolePicker aria-label=\"Role\" value={serviceAccount.role} onChange={onRoleChange} />\n                    )}\n                  </Field>\n                </FieldSet>\n                <Button type=\"submit\">Create</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default ServiceAccountCreatePage;\n"],"names":["ServiceAccountCreatePage","roleOptions","setRoleOptions","useState","pendingRoles","setPendingRoles","currentOrgId","contextSrv","serviceAccount","setServiceAccount","id","orgId","role","OrgRole","tokens","name","login","isDisabled","createdAt","teams","useEffect","async","AccessControlAction","options","fetchRoleOptions","e","console","error","fetchOptions","onSubmit","useCallback","data","response","result","getBackendSrv","post","sa","createServiceAccount","newAccount","avatarUrl","patch","updateServiceAccount","updateUserRoles","locationService","onRoleChange","onPendingRolesUpdate","roles","userId","navId","pageNav","text","className","validateOn","register","errors","label","required","invalid","undefined","I","autoFocus","apply","basicRole","onBasicRoleChange","onApplyRoles","maxWidth","value","onChange","type"],"sourceRoot":""}