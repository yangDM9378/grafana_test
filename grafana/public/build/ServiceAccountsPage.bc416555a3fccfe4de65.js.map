{"version":3,"file":"ServiceAccountsPage.bc416555a3fccfe4de65.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountsListItem.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountsListPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/CreateTokenModal.tsx","webpack://grafana/./public/app/features/serviceaccounts/constants.ts","webpack://grafana/./public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { memo } from 'react';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Button, HorizontalGroup, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\ntype ServiceAccountListItemProps = {\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole, serviceAccount: ServiceAccountDTO) => void;\n  roleOptions: Role[];\n  onRemoveButtonClick: (serviceAccount: ServiceAccountDTO) => void;\n  onDisable: (serviceAccount: ServiceAccountDTO) => void;\n  onEnable: (serviceAccount: ServiceAccountDTO) => void;\n  onAddTokenClick: (serviceAccount: ServiceAccountDTO) => void;\n};\n\nconst getServiceAccountsAriaLabel = (name: string) => {\n  return `Edit service account's ${name} details`;\n};\n\nconst ServiceAccountListItem = memo(\n  ({\n    serviceAccount,\n    onRoleChange,\n    roleOptions,\n    onRemoveButtonClick,\n    onDisable,\n    onEnable,\n    onAddTokenClick,\n  }: ServiceAccountListItemProps) => {\n    const editUrl = `org/serviceaccounts/${serviceAccount.id}`;\n    const styles = useStyles2(getStyles);\n    const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n    const displayRolePicker =\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionUserRolesList);\n\n    return (\n      <tr key={serviceAccount.id} className={cx({ [styles.disabled]: serviceAccount.isDisabled })}>\n        <td className=\"width-4 text-center link-td\">\n          <a href={editUrl} aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}>\n            <img\n              className=\"filter-table__avatar\"\n              src={serviceAccount.avatarUrl}\n              alt={`Avatar for user ${serviceAccount.name}`}\n            />\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title={serviceAccount.name}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.name}\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className={styles.accountId}\n            href={editUrl}\n            title={serviceAccount.login}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.login}\n          </a>\n        </td>\n        {contextSrv.licensedAccessControlEnabled() ? (\n          <td>\n            {displayRolePicker && (\n              <UserRolePicker\n                userId={serviceAccount.id}\n                orgId={serviceAccount.orgId}\n                basicRole={serviceAccount.role}\n                onBasicRoleChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n                roleOptions={roleOptions}\n                basicRoleDisabled={!canUpdateRole}\n                disabled={serviceAccount.isDisabled}\n              />\n            )}\n          </td>\n        ) : (\n          <td>\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={!canUpdateRole || serviceAccount.isDisabled}\n              onChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n            />\n          </td>\n        )}\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title=\"Tokens\"\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            <div className={cx(styles.tokensInfo, { [styles.tokensInfoSecondary]: !serviceAccount.tokens })}>\n              <span>\n                <Icon name=\"key-skeleton-alt\"></Icon>\n              </span>\n              {serviceAccount.tokens || 'No tokens'}\n            </div>\n          </a>\n        </td>\n        <td>\n          <HorizontalGroup justify=\"flex-end\">\n            {contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) && !serviceAccount.tokens && (\n              <Button onClick={() => onAddTokenClick(serviceAccount)} disabled={serviceAccount.isDisabled}>\n                Add token\n              </Button>\n            )}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount) &&\n              (serviceAccount.isDisabled ? (\n                <Button variant=\"primary\" onClick={() => onEnable(serviceAccount)}>\n                  Enable\n                </Button>\n              ) : (\n                <Button variant=\"secondary\" onClick={() => onDisable(serviceAccount)}>\n                  Disable\n                </Button>\n              ))}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsDelete, serviceAccount) && (\n              <IconButton\n                className={styles.deleteButton}\n                name=\"trash-alt\"\n                size=\"md\"\n                onClick={() => onRemoveButtonClick(serviceAccount)}\n                aria-label={`Delete service account ${serviceAccount.name}`}\n              />\n            )}\n          </HorizontalGroup>\n        </td>\n      </tr>\n    );\n  }\n);\nServiceAccountListItem.displayName = 'ServiceAccountListItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    accountId: cx(\n      'ellipsis',\n      css`\n        color: ${theme.colors.text.secondary};\n      `\n    ),\n    deleteButton: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    tokensInfo: css`\n      span {\n        margin-right: ${theme.spacing(1)};\n      }\n    `,\n    tokensInfoSecondary: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    disabled: css`\n      td a {\n        color: ${theme.colors.text.secondary};\n      }\n    `,\n  };\n};\n\nexport default ServiceAccountListItem;\n","import { css, cx } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Alert, ConfirmModal, FilterInput, Icon, LinkButton, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, ServiceAccountDTO, AccessControlAction, ServiceAccountStateFilter } from 'app/types';\n\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport ServiceAccountListItem from './components/ServiceAccountsListItem';\nimport {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n} from './state/actions';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    ...state.serviceAccounts,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const ServiceAccountsListPageUnconnected = ({\n  serviceAccounts,\n  isLoading,\n  roleOptions,\n  query,\n  serviceAccountStateFilter,\n  apiKeysMigrated,\n  showApiKeysMigrationInfo,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n}: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const [newToken, setNewToken] = useState('');\n  const [currentServiceAccount, setCurrentServiceAccount] = useState<ServiceAccountDTO | null>(null);\n\n  useEffect(() => {\n    fetchServiceAccounts({ withLoadingIndicator: true });\n    getApiKeysMigrationStatus();\n    getApiKeysMigrationInfo();\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [fetchACOptions, fetchServiceAccounts, getApiKeysMigrationStatus, getApiKeysMigrationInfo]);\n\n  const noServiceAccountsCreated =\n    serviceAccounts.length === 0 && serviceAccountStateFilter === ServiceAccountStateFilter.All && !query;\n\n  const onRoleChange = async (role: OrgRole, serviceAccount: ServiceAccountDTO) => {\n    const updatedServiceAccount = { ...serviceAccount, role: role };\n    updateServiceAccount(updatedServiceAccount);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  };\n\n  const onQueryChange = (value: string) => {\n    changeQuery(value);\n  };\n\n  const onStateFilterChange = (value: ServiceAccountStateFilter) => {\n    changeStateFilter(value);\n  };\n\n  const onRemoveButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsRemoveModalOpen(true);\n  };\n\n  const onServiceAccountRemove = async () => {\n    if (currentServiceAccount) {\n      deleteServiceAccount(currentServiceAccount.id);\n    }\n    onRemoveModalClose();\n  };\n\n  const onDisableButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsDisableModalOpen(true);\n  };\n\n  const onDisable = () => {\n    if (currentServiceAccount) {\n      updateServiceAccount({ ...currentServiceAccount, isDisabled: true });\n    }\n    onDisableModalClose();\n  };\n\n  const onEnable = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onTokenAdd = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsAddModalOpen(true);\n  };\n\n  const onTokenCreate = async (token: ServiceAccountToken) => {\n    if (currentServiceAccount) {\n      createServiceAccountToken(currentServiceAccount.id, token, setNewToken);\n    }\n  };\n\n  const onAddModalClose = () => {\n    setIsAddModalOpen(false);\n    setCurrentServiceAccount(null);\n    setNewToken('');\n  };\n\n  const onRemoveModalClose = () => {\n    setIsRemoveModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onDisableModalClose = () => {\n    setIsDisableModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onMigrationInfoClose = () => {\n    closeApiKeysMigrationInfo();\n  };\n\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/latest/administration/service-accounts/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      here.\n    </a>\n  );\n  const subTitle = (\n    <span>\n      Service accounts and their tokens can be used to authenticate against the Grafana API. Find out more {docsLink}\n    </span>\n  );\n\n  return (\n    <Page navId=\"serviceaccounts\" subTitle={subTitle}>\n      <Page.Contents>\n        {apiKeysMigrated && showApiKeysMigrationInfo && (\n          <Alert\n            title=\"API keys migrated to Service accounts. Your keys are now called tokens and live inside respective service\n          accounts. Learn more.\"\n            severity=\"success\"\n            onRemove={onMigrationInfoClose}\n          ></Alert>\n        )}\n        <Page.OldNavOnly>\n          <div className={styles.pageHeader}>\n            <h2>Service accounts</h2>\n            <div className={styles.apiKeyInfoLabel}>\n              <Tooltip\n                placement=\"bottom\"\n                interactive\n                content={<>API keys are now service accounts with tokens. Find out more {docsLink}</>}\n              >\n                <Icon name=\"question-circle\" />\n              </Tooltip>\n              <span>Looking for API keys?</span>\n            </div>\n          </div>\n        </Page.OldNavOnly>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              placeholder=\"Search service account by name\"\n              value={query}\n              onChange={onQueryChange}\n              width={50}\n            />\n          </div>\n          <RadioButtonGroup\n            options={[\n              { label: 'All', value: ServiceAccountStateFilter.All },\n              { label: 'With expired tokens', value: ServiceAccountStateFilter.WithExpiredTokens },\n              { label: 'Disabled', value: ServiceAccountStateFilter.Disabled },\n            ]}\n            onChange={onStateFilterChange}\n            value={serviceAccountStateFilter}\n            className={styles.filter}\n          />\n          {!noServiceAccountsCreated && contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate) && (\n            <LinkButton href=\"org/serviceaccounts/create\" variant=\"primary\">\n              Add service account\n            </LinkButton>\n          )}\n        </div>\n        {isLoading && <PageLoader />}\n        {!isLoading && noServiceAccountsCreated && (\n          <>\n            <EmptyListCTA\n              title=\"You haven't created any service accounts yet.\"\n              buttonIcon=\"key-skeleton-alt\"\n              buttonLink=\"org/serviceaccounts/create\"\n              buttonTitle=\"Add service account\"\n              buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate)}\n              proTip=\"Remember, you can provide specific permissions for API access to other applications.\"\n              proTipLink=\"\"\n              proTipLinkTitle=\"\"\n              proTipTarget=\"_blank\"\n            />\n          </>\n        )}\n\n        {!isLoading && serviceAccounts.length !== 0 && (\n          <>\n            <div className={cx(styles.table, 'admin-list-table')}>\n              <table className=\"filter-table filter-table--hover\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th>Account</th>\n                    <th>ID</th>\n                    <th>Roles</th>\n                    <th>Tokens</th>\n                    <th style={{ width: '34px' }} />\n                  </tr>\n                </thead>\n                <tbody>\n                  {serviceAccounts.map((serviceAccount: ServiceAccountDTO) => (\n                    <ServiceAccountListItem\n                      serviceAccount={serviceAccount}\n                      key={serviceAccount.id}\n                      roleOptions={roleOptions}\n                      onRoleChange={onRoleChange}\n                      onRemoveButtonClick={onRemoveButtonClick}\n                      onDisable={onDisableButtonClick}\n                      onEnable={onEnable}\n                      onAddTokenClick={onTokenAdd}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n        {currentServiceAccount && (\n          <>\n            <ConfirmModal\n              isOpen={isRemoveModalOpen}\n              body={`Are you sure you want to delete '${currentServiceAccount.name}'${\n                !!currentServiceAccount.tokens\n                  ? ` and ${currentServiceAccount.tokens} accompanying ${pluralize(\n                      'token',\n                      currentServiceAccount.tokens\n                    )}`\n                  : ''\n              }?`}\n              confirmText=\"Delete\"\n              title=\"Delete service account\"\n              onConfirm={onServiceAccountRemove}\n              onDismiss={onRemoveModalClose}\n            />\n            <ConfirmModal\n              isOpen={isDisableModalOpen}\n              title=\"Disable service account\"\n              body={`Are you sure you want to disable '${currentServiceAccount.name}'?`}\n              confirmText=\"Disable service account\"\n              onConfirm={onDisable}\n              onDismiss={onDisableModalClose}\n            />\n            <CreateTokenModal\n              isOpen={isAddModalOpen}\n              token={newToken}\n              serviceAccountLogin={currentServiceAccount.login}\n              onCreateToken={onTokenCreate}\n              onClose={onAddModalClose}\n            />\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n    pageHeader: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    apiKeyInfoLabel: css`\n      margin-left: ${theme.spacing(1)};\n      line-height: 2.2;\n      flex-grow: 1;\n      color: ${theme.colors.text.secondary};\n\n      span {\n        padding: ${theme.spacing(0.5)};\n      }\n    `,\n    filterDelimiter: css`\n      flex-grow: 1;\n    `,\n  };\n};\n\nconst ServiceAccountsListPage = connector(ServiceAccountsListPageUnconnected);\nexport default ServiceAccountsListPage;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  Input,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  let tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(false);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(false);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = !token ? 'Add service account token' : 'Service account token created';\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={modalTitle}\n      onDismiss={onCloseInternal}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n    >\n      {!token ? (\n        <div>\n          <Field\n            label=\"Display name\"\n            description=\"Name to easily identify the token\"\n            // for now this is required\n            // need to make this optional in backend as well\n            required={true}\n          >\n            <Input\n              name=\"tokenName\"\n              value={newTokenName}\n              placeholder={defaultTokenName}\n              onChange={(e) => {\n                setNewTokenName(e.currentTarget.value);\n              }}\n            />\n          </Field>\n          <Field label=\"Expiration\">\n            <RadioButtonGroup\n              options={EXPIRATION_OPTIONS}\n              value={isWithExpirationDate}\n              onChange={setIsWithExpirationDate}\n              size=\"md\"\n            />\n          </Field>\n          {isWithExpirationDate && (\n            <Field label=\"Expiration date\">\n              <DatePickerWithInput\n                onChange={onExpirationDateChange}\n                value={newTokenExpirationDate}\n                placeholder=\"\"\n                minDate={tomorrow}\n              />\n            </Field>\n          )}\n          <Modal.ButtonRow>\n            <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n              Generate token\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : (\n        <>\n          <Field\n            label=\"Token\"\n            description=\"Copy the token now as you will not be able to see it again. Loosing a token requires creating a new one.\"\n          >\n            <div className={styles.modalTokenRow}>\n              <Input name=\"tokenValue\" value={token} readOnly />\n              <ClipboardButton\n                className={styles.modalCopyToClipboardButton}\n                variant=\"primary\"\n                size=\"md\"\n                icon=\"copy\"\n                getText={() => token}\n              >\n                Copy clipboard\n              </ClipboardButton>\n            </div>\n          </Field>\n          <Modal.ButtonRow>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 550px;\n    `,\n    modalContent: css`\n      overflow: visible;\n    `,\n    modalTokenRow: css`\n      display: flex;\n    `,\n    modalCopyToClipboardButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","export const API_KEYS_MIGRATION_INFO_STORAGE_KEY = 'grafana.serviceaccounts.showApiKeysMigrationInfo';\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport store from 'app/core/store';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from '../constants';\n\nimport {\n  acOptionsLoaded,\n  pageChanged,\n  queryChanged,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  apiKeysMigrationStatusLoaded,\n  stateFilterChanged,\n  showApiKeysMigrationInfoLoaded,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nexport function getApiKeysMigrationStatus(): ThunkResult<void> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n      const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n      dispatch(apiKeysMigrationStatusLoaded(!!result?.migrated));\n    }\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n        if (withLoadingIndicator) {\n          dispatch(serviceAccountsFetchBegin());\n        }\n        const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n        const result = await getBackendSrv().get(\n          `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n            serviceAccountStateFilter\n          )}&accesscontrol=true`\n        );\n        dispatch(serviceAccountsFetched(result));\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountsFetchEnd());\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function getApiKeysMigrationInfo(): ThunkResult<void> {\n  return async (dispatch) => {\n    const showApiKeysMigrationInfo = store.getBool(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(showApiKeysMigrationInfoLoaded(showApiKeysMigrationInfo));\n  };\n}\n\nexport function closeApiKeysMigrationInfo(): ThunkResult<void> {\n  return async (dispatch) => {\n    store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(getApiKeysMigrationInfo());\n  };\n}\n"],"names":["getServiceAccountsAriaLabel","name","ServiceAccountListItem","memo","serviceAccount","onRoleChange","roleOptions","onRemoveButtonClick","onDisable","onEnable","onAddTokenClick","editUrl","id","styles","useStyles2","getStyles","canUpdateRole","contextSrv","AccessControlAction","displayRolePicker","className","cx","disabled","isDisabled","href","src","avatarUrl","alt","title","accountId","login","UserRolePicker","userId","orgId","basicRole","role","onBasicRoleChange","newRole","basicRoleDisabled","OrgRolePicker","value","onChange","tokensInfo","tokensInfoSecondary","tokens","Icon","justify","Button","onClick","variant","IconButton","deleteButton","size","displayName","theme","iconRow","css","spacing","colors","text","secondary","mapDispatchToProps","changeQuery","fetchACOptions","fetchServiceAccounts","deleteServiceAccount","updateServiceAccount","changeStateFilter","createServiceAccountToken","getApiKeysMigrationStatus","getApiKeysMigrationInfo","closeApiKeysMigrationInfo","connector","connect","state","serviceAccounts","ServiceAccountsListPageUnconnected","isLoading","query","serviceAccountStateFilter","apiKeysMigrated","showApiKeysMigrationInfo","isAddModalOpen","setIsAddModalOpen","useState","isRemoveModalOpen","setIsRemoveModalOpen","isDisableModalOpen","setIsDisableModalOpen","newToken","setNewToken","currentServiceAccount","setCurrentServiceAccount","useEffect","withLoadingIndicator","noServiceAccountsCreated","length","ServiceAccountStateFilter","async","updatedServiceAccount","onDisableButtonClick","onTokenAdd","onRemoveModalClose","onDisableModalClose","docsLink","target","rel","subTitle","Page","navId","Alert","severity","onRemove","pageHeader","apiKeyInfoLabel","Tooltip","placement","interactive","content","FilterInput","placeholder","width","RadioButtonGroup","options","label","filter","PageLoader","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","buttonDisabled","proTip","proTipLink","proTipLinkTitle","proTipTarget","table","style","map","ConfirmModal","isOpen","body","pluralize","confirmText","onConfirm","onDismiss","CreateTokenModal","token","serviceAccountLogin","onCreateToken","onClose","row","unitTooltip","unitItem","link","filterDelimiter","EXPIRATION_OPTIONS","tomorrow","Date","setDate","getDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","uuidv4","onCloseInternal","modalTitle","modal","contentClassName","modalContent","description","modalTokenRow","I","readOnly","modalCopyToClipboardButton","icon","getText","onClipboardCopy","required","e","currentTarget","minDate","secondsToLive","getSecondsToLive","undefined","date","dateAsDate","now","Math","ceil","getTime","API_KEYS_MIGRATION_INFO_STORAGE_KEY","BASE_URL","fetchRoleOptions","dispatch","acOptionsLoaded","error","console","result","getBackendSrv","get","apiKeysMigrationStatusLoaded","migrated","getState","serviceAccountsFetchBegin","perPage","page","getStateFilter","serviceAccountsFetched","serviceAccountsFetchEnd","fetchServiceAccountsWithDebounce","debounce","leading","patch","serviceAccountId","delete","saID","onTokenCreated","post","key","queryChanged","stateFilterChanged","store","showApiKeysMigrationInfoLoaded"],"sourceRoot":""}