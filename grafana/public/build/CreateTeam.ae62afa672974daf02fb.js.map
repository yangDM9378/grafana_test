{"version":3,"file":"CreateTeam.ae62afa672974daf02fb.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePicker/hooks.ts","webpack://grafana/./public/app/features/teams/CreateTeam.tsx"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n}\n\nexport const TeamRolePicker: FC<Props> = ({\n  teamId,\n  roleOptions,\n  disabled,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n}) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [teamId, getTeamRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n    />\n  );\n};\n","import { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { fetchRoleOptions } from './api';\n\nexport const useRoleOptions = (organizationId: number) => {\n  const [orgId, setOrgId] = useState(organizationId);\n\n  const { value = [] } = useAsync(async () => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return fetchRoleOptions(orgId);\n    }\n    return Promise.resolve([]);\n  }, [orgId]);\n\n  return [{ roleOptions: value }, setOrgId] as const;\n};\n","import React, { useState } from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Button, Form, Field, Input, FieldSet } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { updateTeamRoles } from 'app/core/components/RolePicker/api';\nimport { useRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Role } from 'app/types';\n\ninterface TeamDTO {\n  email: string;\n  name: string;\n}\n\nconst pageNav: NavModelItem = {\n  icon: 'users-alt',\n  id: 'team-new',\n  text: 'New team',\n  subTitle: 'Create a new team. Teams let you grant permissions to a group of users.',\n  breadcrumbs: [{ title: 'Configuration', url: 'org/teams' }],\n};\n\nexport const CreateTeam = (): JSX.Element => {\n  const currentOrgId = contextSrv.user.orgId;\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n  const [{ roleOptions }] = useRoleOptions(currentOrgId);\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  const createTeam = async (formModel: TeamDTO) => {\n    const newTeam = await getBackendSrv().post('/api/teams', formModel);\n    if (newTeam.teamId) {\n      try {\n        await contextSrv.fetchUserPermissions();\n        if (contextSrv.licensedAccessControlEnabled() && canUpdateRoles) {\n          await updateTeamRoles(pendingRoles, newTeam.teamId, newTeam.orgId);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      locationService.push(`/org/teams/edit/${newTeam.teamId}`);\n    }\n  };\n\n  return (\n    <Page navId=\"teams\" pageNav={pageNav}>\n      <Page.Contents>\n        <Form onSubmit={createTeam}>\n          {({ register, errors }) => (\n            <FieldSet>\n              <Field label=\"Name\" required invalid={!!errors.name} error=\"Team name is required\">\n                <Input {...register('name', { required: true })} id=\"team-name\" />\n              </Field>\n              {contextSrv.licensedAccessControlEnabled() && (\n                <Field label=\"Role\">\n                  <TeamRolePicker\n                    teamId={0}\n                    roleOptions={roleOptions}\n                    disabled={false}\n                    apply={true}\n                    onApplyRoles={setPendingRoles}\n                    pendingRoles={pendingRoles}\n                    maxWidth=\"100%\"\n                  />\n                </Field>\n              )}\n              <Field\n                label={'Email'}\n                description={'This is optional and is primarily used for allowing custom team avatars.'}\n              >\n                <Input {...register('email')} type=\"email\" id=\"team-email\" placeholder=\"email@test.com\" />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button type=\"submit\" variant=\"primary\">\n                  Create\n                </Button>\n              </div>\n            </FieldSet>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default CreateTeam;\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","onApplyRoles","pendingRoles","apply","maxWidth","loading","value","appliedRoles","getTeamRoles","useAsyncFn","async","Boolean","length","contextSrv","AccessControlAction","fetchTeamRoles","e","console","error","useEffect","canUpdateRoles","onRolesChange","roles","updateTeamRoles","isLoading","basicRoleDisabled","useRoleOptions","organizationId","orgId","setOrgId","useState","useAsync","fetchRoleOptions","Promise","resolve","pageNav","icon","id","text","subTitle","breadcrumbs","title","url","CreateTeam","currentOrgId","setPendingRoles","navId","onSubmit","newTeam","getBackendSrv","post","formModel","locationService","register","errors","label","required","invalid","name","I","description","type","placeholder","className","variant"],"sourceRoot":""}