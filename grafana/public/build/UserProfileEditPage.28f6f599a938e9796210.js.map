{"version":3,"file":"UserProfileEditPage.28f6f599a938e9796210.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/profile/UserOrganizations.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditForm.tsx","webpack://grafana/./public/app/features/profile/UserSessions.tsx","webpack://grafana/./public/app/features/profile/UserTeams.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditPage.tsx","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LOCALES } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { UserPreferencesDTO } from 'app/types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO;\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t('shared-preferences.theme.default-label', 'Default') },\n  { value: 'dark', label: t('shared-preferences.theme.dark-label', 'Dark') },\n  { value: 'light', label: t('shared-preferences.theme.light-label', 'Light') },\n];\n\nfunction getLanguageOptions(): Array<SelectableValue<string>> {\n  const languageOptions = LOCALES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  }));\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t('shared-preferences.fields.theme-label', 'UI Theme')}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-preferences.fields.week-start-label', 'Week start')}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.beta} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans i18nKey=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, LoadingPlaceholder } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { UserDTO, UserOrg } from 'app/types';\n\nexport interface Props {\n  user: UserDTO | null;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading organizations...\" />;\n    }\n\n    if (orgs.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">\n          <Trans i18nKey=\"user-orgs.title\">Organizations</Trans>\n        </h3>\n\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.orgsTable}>\n            <thead>\n              <tr>\n                <th>\n                  <Trans i18nKey=\"user-orgs.name-column\">Name</Trans>\n                </th>\n                <th>\n                  <Trans i18nKey=\"user-orgs.role-column\">Role</Trans>\n                </th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {orgs.map((org: UserOrg, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{org.name}</td>\n                    <td>{org.role}</td>\n                    <td className=\"text-right\">\n                      {org.orgId === user?.orgId ? (\n                        <Button variant=\"secondary\" size=\"sm\" disabled>\n                          <Trans i18nKey=\"user-orgs.current-org-button\">Current</Trans>\n                        </Button>\n                      ) : (\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() => {\n                            this.props.setUserOrg(org);\n                          }}\n                        >\n                          <Trans i18nKey=\"user-orgs.select-org-button\">Select organisation</Trans>\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import React, { FC } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, FieldSet, Form, Icon, Input, Tooltip } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { t, Trans } from 'app/core/internationalization';\nimport { UserDTO } from 'app/types';\n\nimport { ProfileUpdateFields } from './types';\n\nexport interface Props {\n  user: UserDTO | null;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm: FC<Props> = ({ user, isSavingUser, updateProfile }) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  // check if authLabels is longer than 0 otherwise false\n  const isExternalUser: boolean = (user && user.isExternal) ?? false;\n  const authSource = isExternalUser && user && user.authLabels ? user.authLabels[0] : '';\n  const lockMessage = authSource ? ` (Synced via ${authSource})` : '';\n  const disabledEdit = disableLoginForm || isExternalUser;\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet label={<Trans i18nKey=\"user-profile.title\">Edit profile</Trans>}>\n            <Field\n              label={t('user-profile.fields.name-label', 'Name') + lockMessage}\n              invalid={!!errors.name}\n              error={<Trans i18nKey=\"user-profile.fields.name-error\">Name is required</Trans>}\n              disabled={disabledEdit}\n            >\n              <Input\n                {...register('name', { required: true })}\n                id=\"edit-user-profile-name\"\n                placeholder={t('user-profile.fields.name-label', 'Name')}\n                defaultValue={user?.name ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field\n              label={t('user-profile.fields.email-label', 'Email') + lockMessage}\n              invalid={!!errors.email}\n              error={<Trans i18nKey=\"user-profile.fields.email-error\">Email is required</Trans>}\n              disabled={disabledEdit}\n            >\n              <Input\n                {...register('email', { required: true })}\n                id=\"edit-user-profile-email\"\n                placeholder={t('user-profile.fields.email-label', 'Email')}\n                defaultValue={user?.email ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field label={t('user-profile.fields.username-label', 'Username') + lockMessage} disabled={disabledEdit}>\n              <Input\n                {...register('login')}\n                id=\"edit-user-profile-username\"\n                defaultValue={user?.login ?? ''}\n                placeholder={t('user-profile.fields.username-label', 'Username') + lockMessage}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <div className=\"gf-form-button-row\">\n              <Button\n                variant=\"primary\"\n                disabled={isSavingUser || disabledEdit}\n                data-testid={selectors.components.UserProfile.profileSaveButton}\n                type=\"submit\"\n              >\n                <Trans i18nKey=\"common.save\">Save</Trans>\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"Login details locked because they are managed in another system.\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import { t } from 'i18next';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Icon, LoadingPlaceholder } from '@grafana/ui';\nimport { i18nDate, Trans } from 'app/core/internationalization';\nimport { UserSession } from 'app/types';\n\ninterface Props {\n  sessions: UserSession[];\n  isLoading: boolean;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nclass UserSessions extends PureComponent<Props> {\n  render() {\n    const { isLoading, sessions, revokeUserSession } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text={<Trans i18nKey=\"user-sessions.loading\">Loading sessions...</Trans>} />;\n    }\n\n    return (\n      <div>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Sessions</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.sessionsTable}>\n                <thead>\n                  <tr>\n                    <th>\n                      <Trans i18nKey=\"user-session.seen-at-column\">Last seen</Trans>\n                    </th>\n                    <th>\n                      <Trans i18nKey=\"user-session.created-at-column\">Logged on</Trans>\n                    </th>\n                    <th>\n                      <Trans i18nKey=\"user-session.ip-column\">IP address</Trans>\n                    </th>\n                    <th>\n                      <Trans i18nKey=\"user-session.browser-column\">Browser & OS</Trans>\n                    </th>\n                    <th></th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>Now</td> : <td>{session.seenAt}</td>}\n                      <td>{i18nDate(session.createdAt, { dateStyle: 'long' })}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => revokeUserSession(session.id)}\n                          aria-label={t('user-session.revoke', 'Revoke user session')}\n                        >\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default UserSessions;\n","import React, { PureComponent } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading teams...\" />;\n    }\n\n    if (teams.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Teams</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User teams table\">\n            <thead>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Email</th>\n                <th>Members</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teams.map((team: Team, index) => {\n                return (\n                  <tr key={index}>\n                    <td className=\"width-4 text-center\">\n                      <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"\" />\n                    </td>\n                    <td>{team.name}</td>\n                    <td>{team.email}</td>\n                    <td>{team.memberCount}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserTeams;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\n\nimport { VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { StoreState } from 'app/types';\n\nimport UserOrganizations from './UserOrganizations';\nimport UserProfileEditForm from './UserProfileEditForm';\nimport UserSessions from './UserSessions';\nimport { UserTeams } from './UserTeams';\nimport { changeUserOrg, initUserProfilePage, revokeUserSession, updateUserProfile } from './state/actions';\n\nexport interface OwnProps {}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { user, teams, orgs, sessions, teamsAreLoading, orgsAreLoading, sessionsAreLoading, isUpdating } = userState;\n  return {\n    orgsAreLoading,\n    sessionsAreLoading,\n    teamsAreLoading,\n    orgs,\n    sessions,\n    teams,\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  initUserProfilePage,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UserProfileEditPage({\n  orgsAreLoading,\n  sessionsAreLoading,\n  teamsAreLoading,\n  initUserProfilePage,\n  orgs,\n  sessions,\n  teams,\n  isUpdating,\n  user,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n}: Props) {\n  useMount(() => initUserProfilePage());\n\n  return (\n    <Page navId=\"profile/settings\">\n      <Page.Contents isLoading={!user}>\n        <VerticalGroup spacing=\"md\">\n          <UserProfileEditForm updateProfile={updateUserProfile} isSavingUser={isUpdating} user={user} />\n          <SharedPreferences resourceUri=\"user\" />\n          <UserTeams isLoading={teamsAreLoading} teams={teams} />\n          <UserOrganizations isLoading={orgsAreLoading} setUserOrg={changeUserOrg} orgs={orgs} user={user} />\n          <UserSessions isLoading={sessionsAreLoading} revokeUserSession={revokeUserSession} sessions={sessions} />\n        </VerticalGroup>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(UserProfileEditPage);\n","import { config } from '@grafana/runtime';\n\nimport { ThunkResult, UserOrg } from '../../../types';\nimport { api } from '../api';\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\n\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["themes","value","label","t","i18nFlag","Boolean","config","SharedPreferences","PureComponent","constructor","props","super","async","this","onConfirm","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","state","service","update","window","location","reload","setState","dashboardUID","PreferencesService","resourceUri","homeTab","prefs","load","render","disabled","styles","getStyles","languages","languageOptions","LOCALES","v","code","name","getLanguageOptions","onSubmit","onSubmitForm","i18nKey","options","find","item","onChange","onThemeChanged","htmlFor","className","labelText","onHomeDashboardChanged","uid","defaultOptions","isClearable","placeholder","inputId","selectors","includeInternal","onTimeZoneChanged","onWeekStartChanged","featureState","FeatureState","lang","onLocaleChanged","type","variant","stylesFactory","css","UserOrganizations","isLoading","orgs","user","LoadingPlaceholder","text","length","map","org","index","role","orgId","Button","size","onClick","setUserOrg","disableLoginForm","isSavingUser","updateProfile","isExternalUser","isExternal","authSource","authLabels","lockMessage","disabledEdit","Form","data","validateOn","register","errors","FieldSet","Field","invalid","error","Input","I","required","id","defaultValue","suffix","InputSuffix","email","login","Tooltip","content","Icon","UserSessions","sessions","revokeUserSession","session","isActive","seenAt","i18nDate","createdAt","dateStyle","clientIp","browser","os","osVersion","UserTeams","teams","team","src","avatarUrl","alt","memberCount","mapDispatchToProps","initUserProfilePage","changeUserOrg","updateUserProfile","UserProfileEditPage","orgsAreLoading","sessionsAreLoading","teamsAreLoading","isUpdating","useMount","Page","navId","spacing","connect","userState","changePassword","payload","dispatch","setUpdating","updating","api","loadUser","initLoadTeams","teamsLoaded","initLoadOrgs","orgsLoaded","initLoadSessions","sessionsLoaded","userLoaded","tokenId","userSessionRevoked","href","fn"],"sourceRoot":""}