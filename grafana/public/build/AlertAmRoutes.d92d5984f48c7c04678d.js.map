{"version":3,"file":"AlertAmRoutes.d92d5984f48c7c04678d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/gridStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRoute.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/dynamicTable.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/LabelMatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmSpecificRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/AmRoutes.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts"],"sourcesContent":["import { isUndefined, omitBy } from 'lodash';\nimport { Validate } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, Route } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField, parseMatcher } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { parseInterval, timeOptions } from './time';\n\nconst defaultValueAndType: [string, string] = ['', ''];\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    [] as MatcherFieldValue[]\n  );\n\nconst intervalToValueAndType = (\n  strValue: string | undefined,\n  defaultValue?: typeof defaultValueAndType\n): [string, string] => {\n  if (!strValue) {\n    return defaultValue ?? defaultValueAndType;\n  }\n\n  const [value, valueType] = strValue ? parseInterval(strValue) : [undefined, undefined];\n\n  const timeOption = timeOptions.find((opt) => opt.value === valueType);\n\n  if (!value || !timeOption) {\n    return defaultValueAndType;\n  }\n\n  return [String(value), timeOption.value];\n};\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder' },\n  { label: 'alertname', value: 'alertname' },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupWaitValueType: timeOptions[0].value,\n  groupIntervalValue: '',\n  groupIntervalValueType: timeOptions[0].value,\n  repeatIntervalValue: '',\n  repeatIntervalValueType: timeOptions[0].value,\n  muteTimeIntervals: [],\n};\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: Route | undefined): [FormAmRoute, Record<string, Route>] => {\n  if (!route) {\n    return [emptyRoute, {}];\n  }\n\n  const id = String(Math.random());\n  const id2route = {\n    [id]: route,\n  };\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return [formAmRoute, id2route];\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const [subFormRoute, subId2Route] = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n    Object.assign(id2route, subId2Route);\n  });\n\n  // Frontend migration to use object_matchers instead of matchers\n  const matchers = route.matchers\n    ? route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? []\n    : route.object_matchers?.map(\n        (matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] } as MatcherFieldValue)\n      ) ?? [];\n\n  const [groupWaitValue, groupWaitValueType] = intervalToValueAndType(route.group_wait, ['', 's']);\n  const [groupIntervalValue, groupIntervalValueType] = intervalToValueAndType(route.group_interval, ['', 'm']);\n  const [repeatIntervalValue, repeatIntervalValueType] = intervalToValueAndType(route.repeat_interval, ['', 'h']);\n\n  return [\n    {\n      id,\n      object_matchers: [\n        ...matchers,\n        ...matchersToArrayFieldMatchers(route.match, false),\n        ...matchersToArrayFieldMatchers(route.match_re, true),\n      ],\n      continue: route.continue ?? false,\n      receiver: route.receiver ?? '',\n      overrideGrouping: Array.isArray(route.group_by) && route.group_by.length !== 0,\n      groupBy: route.group_by ?? [],\n      overrideTimings: [groupWaitValue, groupIntervalValue, repeatIntervalValue].some(Boolean),\n      groupWaitValue,\n      groupWaitValueType,\n      groupIntervalValue,\n      groupIntervalValueType,\n      repeatIntervalValue,\n      repeatIntervalValueType,\n      routes: formRoutes,\n      muteTimeIntervals: route.mute_time_intervals ?? [],\n    },\n    id2route,\n  ];\n};\n\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string | undefined,\n  formAmRoute: FormAmRoute,\n  id2ExistingRoute: Record<string, Route>\n): Route => {\n  const existing: Route | undefined = id2ExistingRoute[formAmRoute.id];\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupWaitValueType,\n    groupIntervalValue,\n    groupIntervalValueType,\n    repeatIntervalValue,\n    repeatIntervalValueType,\n  } = formAmRoute;\n\n  const group_by = overrideGrouping && groupBy ? groupBy : [];\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? `${groupWaitValue}${groupWaitValueType}` : undefined;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? `${groupIntervalValue}${groupIntervalValueType}` : undefined;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? `${repeatIntervalValue}${repeatIntervalValueType}` : undefined;\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: formAmRoute.object_matchers.length\n      ? formAmRoute.object_matchers.map((matcher) => [matcher.name, matcher.operator, matcher.value])\n      : undefined,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: formAmRoute.routes.map((subRoute) =>\n      formAmRouteToAmRoute(alertManagerSourceName, subRoute, id2ExistingRoute)\n    ),\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n  };\n\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return omitBy(amRoute, isUndefined);\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string => {\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport const optionalPositiveInteger: Validate<string> = (value) => {\n  if (!value) {\n    return undefined;\n  }\n\n  return !/^\\d+$/.test(value) ? 'Must be a positive integer.' : undefined;\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    timingContainer: css`\n      max-width: ${theme.spacing(33)};\n    `,\n    smallInput: css`\n      width: ${theme.spacing(6.5)};\n    `,\n    linkText: css`\n      text-decoration: underline;\n    `,\n    collapse: css`\n      border: none;\n      background: none;\n      color: ${theme.colors.text.primary};\n    `,\n  };\n};\n","import { cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { Button, Collapse, Field, Form, Input, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n  commonGroupByOptions,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { timeOptions } from '../../utils/time';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteForm: FC<AmRootRouteFormProps> = ({\n  alertManagerSourceName,\n  onCancel,\n  onSave,\n  receivers,\n  routes,\n}) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={{ ...routes, overrideTimings: true, overrideGrouping: true }} onSubmit={onSave}>\n      {({ control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      aria-label=\"Default contact point\"\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link\n                  className={styles.linkText}\n                  href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n                >\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            className={styles.collapse}\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <Field\n              label=\"Group wait\"\n              description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n              invalid={!!errors.groupWaitValue}\n              error={errors.groupWaitValue?.message}\n              data-testid=\"am-group-wait\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder={'30'} />\n                    )}\n                    control={control}\n                    name=\"groupWaitValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group wait type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Group interval\"\n              description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n              invalid={!!errors.groupIntervalValue}\n              error={errors.groupIntervalValue?.message}\n              data-testid=\"am-group-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder={'5'} />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Repeat interval\"\n              description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours.\"\n              invalid={!!errors.repeatIntervalValue}\n              error={errors.repeatIntervalValue?.message}\n              data-testid=\"am-repeat-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder=\"4\" />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        menuPlacement=\"top\"\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Repeat interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n          </Collapse>\n          <div className={styles.container}>\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={onCancel} type=\"reset\" variant=\"secondary\" fill=\"outline\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getGridStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      font-style: ${theme.typography.fontSize};\n      grid-template-columns: ${theme.spacing(15.5)} auto;\n\n      ${theme.breakpoints.down('md')} {\n        grid-template-columns: 100%;\n      }\n    `,\n    titleCell: css`\n      color: ${theme.colors.text.primary};\n    `,\n    valueCell: css`\n      color: ${theme.colors.text.secondary};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { FC } from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nimport { FormAmRoute } from '../../types/amroutes';\n\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRootRouteReadProps {\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteRead: FC<AmRootRouteReadProps> = ({ routes }) => {\n  const styles = useStyles2(getGridStyles);\n\n  const receiver = routes.receiver || '-';\n  const groupBy = routes.groupBy.join(', ') || '-';\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleCell}>Contact point</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-receiver\">\n        {receiver}\n      </div>\n      <div className={styles.titleCell}>Group by</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-group-by\">\n        {groupBy}\n      </div>\n      <div className={styles.titleCell}>Timings</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-timings\">\n        Group wait: {groupWait} | Group interval: {groupInterval} | Repeat interval: {repeatInterval}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\n\nimport { AmRootRouteForm } from './AmRootRouteForm';\nimport { AmRootRouteRead } from './AmRootRouteRead';\n\nexport interface AmRootRouteProps {\n  isEditMode: boolean;\n  onEnterEditMode: () => void;\n  onExitEditMode: () => void;\n  onSave: (data: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  alertManagerSourceName: string;\n  readOnly?: boolean;\n}\n\nexport const AmRootRoute: FC<AmRootRouteProps> = ({\n  isEditMode,\n  onSave,\n  onEnterEditMode,\n  onExitEditMode,\n  receivers,\n  routes,\n  alertManagerSourceName,\n  readOnly = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  return (\n    <div className={styles.container} data-testid=\"am-root-route-container\">\n      <div className={styles.titleContainer}>\n        <h5 className={styles.title}>\n          Root policy - <i>default for all alerts</i>\n        </h5>\n        {!isEditMode && !readOnly && (\n          <Authorize actions={[permissions.update]}>\n            <Button icon=\"pen\" onClick={onEnterEditMode} size=\"sm\" type=\"button\" variant=\"secondary\">\n              Edit\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <p>\n        All alerts will go to the default contact point, unless you set additional matchers in the specific routing\n        area.\n      </p>\n      {isEditMode ? (\n        <AmRootRouteForm\n          alertManagerSourceName={alertManagerSourceName}\n          onCancel={onExitEditMode}\n          onSave={onSave}\n          receivers={receivers}\n          routes={routes}\n        />\n      ) : (\n        <AmRootRouteRead routes={routes} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    titleContainer: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n    title: css`\n      flex: 100%;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA: FC<EmptyAreaWithCTAProps> = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    button: css`\n      margin: ${theme.spacing(2, 0, 1)};\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n  Badge,\n  VerticalGroup,\n} from '@grafana/ui';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n  commonGroupByOptions,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n  const muteTimingOptions = useMuteTimingOptions();\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue, watch }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <VerticalGroup justify=\"flex-start\" spacing=\"md\">\n                  <div>Matching labels</div>\n                  {fields.length === 0 && (\n                    <Badge\n                      color=\"orange\"\n                      className={styles.noMatchersWarning}\n                      icon=\"exclamation-triangle\"\n                      text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n                    />\n                  )}\n                  {fields.length > 0 && (\n                    <div className={styles.matchersContainer}>\n                      {fields.map((field, index) => {\n                        const localPath = `object_matchers[${index}]`;\n                        return (\n                          <HorizontalGroup key={field.id} align=\"flex-start\" height=\"auto\">\n                            <Field\n                              label=\"Label\"\n                              invalid={!!errors.object_matchers?.[index]?.name}\n                              error={errors.object_matchers?.[index]?.name?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.name`, { required: 'Field is required' })}\n                                defaultValue={field.name}\n                                placeholder=\"label\"\n                              />\n                            </Field>\n                            <Field label={'Operator'}>\n                              <InputControl\n                                render={({ field: { onChange, ref, ...field } }) => (\n                                  <Select\n                                    {...field}\n                                    className={styles.matchersOperator}\n                                    onChange={(value) => onChange(value?.value)}\n                                    options={matcherFieldOptions}\n                                    aria-label=\"Operator\"\n                                  />\n                                )}\n                                defaultValue={field.operator}\n                                control={control}\n                                name={`${localPath}.operator` as const}\n                                rules={{ required: { value: true, message: 'Required.' } }}\n                              />\n                            </Field>\n                            <Field\n                              label=\"Value\"\n                              invalid={!!errors.object_matchers?.[index]?.value}\n                              error={errors.object_matchers?.[index]?.value?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.value`, { required: 'Field is required' })}\n                                defaultValue={field.value}\n                                placeholder=\"value\"\n                              />\n                            </Field>\n                            <IconButton\n                              className={styles.removeButton}\n                              tooltip=\"Remove matcher\"\n                              name={'trash-alt'}\n                              onClick={() => remove(index)}\n                            >\n                              Remove\n                            </IconButton>\n                          </HorizontalGroup>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <Button\n                    className={styles.addMatcherBtn}\n                    icon=\"plus\"\n                    onClick={() => append(emptyArrayFieldMatcher)}\n                    variant=\"secondary\"\n                    type=\"button\"\n                  >\n                    Add matcher\n                  </Button>\n                </VerticalGroup>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Contact point\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch id=\"continue-toggle\" {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n          </Field>\n          {watch().overrideGrouping && (\n            <Field\n              label=\"Group by\"\n              description=\"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\"\n            >\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    aria-label=\"Group by\"\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={[...commonGroupByOptions, ...groupByOptions]}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n          </Field>\n          {watch().overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group wait value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group wait type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Repeat interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Repeat interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <Field\n            label=\"Mute timings\"\n            data-testid=\"am-mute-timing-select\"\n            description=\"Add mute timing to policy\"\n            invalid={!!errors.muteTimeIntervals}\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Mute timings\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={muteTimingOptions}\n                />\n              )}\n              control={control}\n              name=\"muteTimeIntervals\"\n            />\n          </Field>\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 140px;\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `,\n  };\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AlertmanagerConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { timeIntervalToString } from '../utils/alertmanager';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useAlertManagerSourceName } from './useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  return useMemo(() => {\n    const { result } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n    const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      config?.mute_time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [alertManagerSourceName, amConfigs]);\n}\n","import { css } from '@emotion/css';\nimport React, { FC, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, LinkButton, Link, useStyles2, ConfirmModal } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig, MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport {\n  getTimeString,\n  getWeekdayString,\n  getDaysOfMonthString,\n  getMonthsString,\n  getYearsString,\n} from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { AsyncRequestState, initialAsyncRequestState } from '../../utils/redux';\nimport { DynamicTable, DynamicTableItemProps, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\n\ninterface Props {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable: FC<Props> = ({ alertManagerSourceName, muteTimingNames, hideActions }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n  const { result }: AsyncRequestState<AlertManagerCortexConfig> =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    const muteTimings = result?.alertmanager_config?.mute_time_intervals ?? [];\n    const muteTimingsProvenances = result?.alertmanager_config?.muteTimeProvenances ?? {};\n\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: {\n            ...mute,\n            provenance: muteTimingsProvenances[mute.name],\n          },\n        };\n      });\n  }, [\n    result?.alertmanager_config?.mute_time_intervals,\n    result?.alertmanager_config?.muteTimeProvenances,\n    muteTimingNames,\n  ]);\n\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName);\n\n  return (\n    <div className={styles.container}>\n      {!hideActions && <h5>Mute timings</h5>}\n      {!hideActions && (\n        <p>\n          Mute timings are a named interval of time that may be referenced in the notification policy tree to mute\n          particular notification policies for specific times of the day.\n        </p>\n      )}\n      {!hideActions && items.length > 0 && (\n        <Authorize actions={[permissions.create]}>\n          <LinkButton\n            className={styles.addMuteButton}\n            icon=\"plus\"\n            variant=\"primary\"\n            href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          >\n            New mute timing\n          </LinkButton>\n        </Authorize>\n      )}\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={contextSrv.hasPermission(permissions.create)}\n        />\n      ) : (\n        <p>No mute timings configured</p>\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName))}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false, setMuteTimingName: (name: string) => void) {\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const userHasEditPermissions = contextSrv.hasPermission(permissions.update);\n  const userHasDeletePermissions = contextSrv.hasPermission(permissions.delete);\n  const showActions = !hideActions && (userHasEditPermissions || userHasDeletePermissions);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <>\n              {data.name} {data.provenance && <ProvisioningBadge />}\n            </>\n          );\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => renderTimeIntervals(data.time_intervals),\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data }) {\n          if (data.provenance) {\n            return (\n              <div>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"file-alt\" title=\"View mute timing\" />\n                </Link>\n              </div>\n            );\n          }\n          return (\n            <div>\n              <Authorize actions={[permissions.update]}>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"edit\" title=\"Edit mute timing\" />\n                </Link>\n              </Authorize>\n              <Authorize actions={[permissions.delete]}>\n                <IconButton\n                  name={'trash-alt'}\n                  title=\"Delete mute timing\"\n                  onClick={() => setMuteTimingName(data.name)}\n                />\n              </Authorize>\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, setMuteTimingName, showActions, permissions]);\n}\n\nfunction renderTimeIntervals(timeIntervals: TimeInterval[]) {\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years } = interval;\n    const timeString = getTimeString(times);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  addMuteButton: css`\n    margin-bottom: ${theme.spacing(2)};\n    align-self: flex-end;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { Authorize } from '../Authorize';\n\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { MuteTimingsTable } from './MuteTimingsTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && !readOnly && (\n          <Authorize actions={[permissions.create]}>\n            <Button\n              className={styles.addNestedRoutingBtn}\n              icon=\"plus\"\n              onClick={() => {\n                setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n                setIsAddMode(true);\n              }}\n              variant=\"secondary\"\n              type=\"button\"\n            >\n              Add nested policy\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <div className={gridStyles.titleCell}>Mute timings</div>\n      <div className={gridStyles.valueCell}>\n        <MuteTimingsTable\n          alertManagerSourceName={alertManagerSourceName!}\n          muteTimingNames={routes.muteTimeIntervals}\n          hideActions\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import { differenceWith, isEqual } from 'lodash';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Button, ConfirmModal, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { matcherFieldToMatcher, parseMatchers } from '../../utils/alertmanager';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyArea } from '../EmptyArea';\nimport { Matchers } from '../silences/Matchers';\n\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n  filters?: { queryString?: string; contactPoint?: string };\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const getFilteredRoutes = (routes: FormAmRoute[], labelMatcherQuery?: string, contactPointQuery?: string) => {\n  const filterMatchers = parseMatchers(labelMatcherQuery ?? '');\n\n  let filteredRoutes = routes;\n\n  if (filterMatchers.length) {\n    filteredRoutes = routes.filter((route) => {\n      const routeMatchers = route.object_matchers.map(matcherFieldToMatcher);\n      // Route matchers needs to include all filter matchers\n      return differenceWith(filterMatchers, routeMatchers, isEqual).length === 0;\n    });\n  }\n\n  if (contactPointQuery && contactPointQuery.length > 0) {\n    filteredRoutes = filteredRoutes.filter((route) =>\n      route.receiver.toLowerCase().includes(contactPointQuery.toLowerCase())\n    );\n  }\n\n  return filteredRoutes;\n};\n\nexport const updatedRoute = (routes: FormAmRoute[], updatedRoute: FormAmRoute): FormAmRoute[] => {\n  const newRoutes = [...routes];\n  const editIndex = newRoutes.findIndex((route) => route.id === updatedRoute.id);\n\n  if (editIndex >= 0) {\n    newRoutes[editIndex] = {\n      ...newRoutes[editIndex],\n      ...updatedRoute,\n    };\n  }\n  return newRoutes;\n};\n\nexport const deleteRoute = (routes: FormAmRoute[], routeId: string): FormAmRoute[] => {\n  return routes.filter((route) => route.id !== routeId);\n};\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({\n  isAddMode,\n  onCancelAdd,\n  onChange,\n  receivers,\n  routes,\n  filters,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [deletingRouteId, setDeletingRouteId] = useState<string | undefined>(undefined);\n  const [expandedId, setExpandedId] = useState<string | number>();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canEditRoutes = contextSrv.hasPermission(permissions.update);\n  const canDeleteRoutes = contextSrv.hasPermission(permissions.delete);\n\n  const showActions = !readOnly && (canEditRoutes || canDeleteRoutes);\n\n  const expandItem = useCallback((item: RouteTableItemProps) => setExpandedId(item.id), []);\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => {\n        return item.data.object_matchers.length ? (\n          <Matchers matchers={item.data.object_matchers.map(matcherFieldToMatcher)} />\n        ) : (\n          <span>Matches all alert instances</span>\n        );\n      },\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => (item.data.overrideGrouping && item.data.groupBy.join(', ')) || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => item.data.receiver || '-',\n      size: 5,\n    },\n    {\n      id: 'muteTimings',\n      label: 'Mute timings',\n      renderCell: (item) => item.data.muteTimeIntervals.join(', ') || '-',\n      size: 5,\n    },\n    ...(!showActions\n      ? []\n      : [\n          {\n            id: 'actions',\n            label: 'Actions',\n            // eslint-disable-next-line react/display-name\n            renderCell: (item) => {\n              if (item.renderExpandedContent) {\n                return null;\n              }\n\n              const expandWithCustomContent = () => {\n                expandItem(item);\n                setEditMode(true);\n              };\n\n              return (\n                <>\n                  <HorizontalGroup>\n                    <Button\n                      aria-label=\"Edit route\"\n                      icon=\"pen\"\n                      onClick={expandWithCustomContent}\n                      size=\"sm\"\n                      type=\"button\"\n                      variant=\"secondary\"\n                    >\n                      Edit\n                    </Button>\n                    <IconButton\n                      aria-label=\"Delete route\"\n                      name=\"trash-alt\"\n                      onClick={() => {\n                        setDeletingRouteId(item.data.id);\n                      }}\n                      type=\"button\"\n                    />\n                  </HorizontalGroup>\n                </>\n              );\n            },\n            size: '100px',\n          } as RouteTableColumnProps,\n        ]),\n  ];\n\n  const filteredRoutes = useMemo(\n    () => getFilteredRoutes(routes, filters?.queryString, filters?.contactPoint),\n    [routes, filters]\n  );\n\n  const dynamicTableRoutes = useMemo(\n    () => prepareItems(isAddMode ? routes : filteredRoutes),\n    [isAddMode, routes, filteredRoutes]\n  );\n\n  // expand the last item when adding or reset when the length changed\n  useEffect(() => {\n    if (isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(dynamicTableRoutes[dynamicTableRoutes.length - 1].id);\n    }\n    if (!isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(undefined);\n    }\n  }, [isAddMode, dynamicTableRoutes]);\n\n  if (routes.length > 0 && filteredRoutes.length === 0) {\n    return (\n      <EmptyArea>\n        <p>No policies found</p>\n      </EmptyArea>\n    );\n  }\n\n  return (\n    <>\n      <DynamicTable\n        cols={cols}\n        isExpandable={true}\n        items={dynamicTableRoutes}\n        testIdGenerator={() => 'am-routes-row'}\n        onCollapse={collapseItem}\n        onExpand={expandItem}\n        isExpanded={(item) => expandedId === item.id}\n        renderExpandedContent={(item: RouteTableItemProps) =>\n          isAddMode || editMode ? (\n            <AmRoutesExpandedForm\n              onCancel={() => {\n                if (isAddMode) {\n                  onCancelAdd();\n                }\n                setEditMode(false);\n              }}\n              onSave={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n\n                setEditMode(false);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n            />\n          ) : (\n            <AmRoutesExpandedRead\n              onChange={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n              readOnly={readOnly}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          )\n        }\n      />\n      <ConfirmModal\n        isOpen={!!deletingRouteId}\n        title=\"Delete notification policy\"\n        body=\"Deleting this notification policy will permanently remove it. Are you sure you want to delete this policy?\"\n        confirmText=\"Yes, delete\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          if (deletingRouteId) {\n            const newRoutes = deleteRoute(routes, deletingRouteId);\n            onChange(newRoutes);\n            setDeletingRouteId(undefined);\n          }\n        }}\n        onDismiss={() => setDeletingRouteId(undefined)}\n      />\n    </>\n  );\n};\n","import { DynamicTableItemProps } from '../components/DynamicTable';\n\nexport const prepareItems = <T = unknown>(\n  items: T[],\n  idCreator?: (item: T) => number | string\n): Array<DynamicTableItemProps<T>> =>\n  items.map((item, index) => ({\n    id: idCreator?.(item) ?? index,\n    data: item,\n  }));\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { ChangeEvent, useEffect, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { logInfo } from '@grafana/runtime';\nimport { Label, Input, Icon, useStyles2 } from '@grafana/ui';\n\nimport { LogMessages } from '../../Analytics';\nimport { HoverCard } from '../HoverCard';\n\ninterface Props {\n  className?: string;\n  defaultQueryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const LabelMatcherFilter = ({ className, onFilterChange, defaultQueryString }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const onSearchInputChanged = useMemo(\n    () =>\n      debounce((e: ChangeEvent<HTMLInputElement>) => {\n        logInfo(LogMessages.filterPoliciesByMatchers);\n        onFilterChange(e.target.value);\n      }, 600),\n    [onFilterChange]\n  );\n\n  useEffect(() => onSearchInputChanged.cancel(), [onSearchInputChanged]);\n\n  const searchIcon = <Icon name={'search'} />;\n\n  return (\n    <div className={className}>\n      <Label>\n        <Stack gap={0.5}>\n          <span>Search by matcher</span>\n          <HoverCard\n            content={\n              <div className={styles.hoverContent}>\n                Filter notification policies by <span className={styles.bold}>matchers</span>\n                <div className={styles.textBlock}>\n                  Notification policies are characterized by labels matchers rathen than labels. <br />\n                  Filtering by matchers means we compare if matchers are equal contrary to checking if a label matches a\n                  matcher.\n                </div>\n                <div className={styles.textBlock}>\n                  According to that, e.g. <code>severity=critical</code> equals only <code>severity=critical</code>\n                  <br />\n                  and <span className={styles.bold}>is not equal</span> <code>severity=~critical</code>\n                  <br />\n                  This is an important distinction from how filtering of alert rules works\n                </div>\n                <hr />\n                Filter policies using matchers querying, e.g.:\n                <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </HoverCard>\n        </Stack>\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={defaultQueryString}\n        onChange={onSearchInputChanged}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n  bold: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  textBlock: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n  hoverContent: css`\n    max-width: 600px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Input, Label, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyArrayFieldMatcher, emptyRoute } from '../../utils/amroutes';\nimport { getNotificationPoliciesFilters } from '../../utils/misc';\nimport { EmptyArea } from '../EmptyArea';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\n\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { LabelMatcherFilter } from './LabelMatcherFilter';\n\nexport interface AmSpecificRoutingProps {\n  alertManagerSourceName: string;\n  onChange: (routes: FormAmRoute) => void;\n  onRootRouteEdit: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n}\n\ninterface Filters {\n  queryString?: string;\n  contactPoint?: string;\n}\n\nexport const AmSpecificRouting: FC<AmSpecificRoutingProps> = ({\n  alertManagerSourceName,\n  onChange,\n  onRootRouteEdit,\n  receivers,\n  routes,\n  readOnly = false,\n}) => {\n  const [actualRoutes, setActualRoutes] = useState([...routes.routes]);\n  const [isAddMode, setIsAddMode] = useState(false);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canCreateNotifications = contextSrv.hasPermission(permissions.create);\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n\n  const [filters, setFilters] = useState<Filters>({ queryString, contactPoint });\n\n  useDebounce(\n    () => {\n      setSearchParams({ queryString: filters.queryString, contactPoint: filters.contactPoint });\n    },\n    400,\n    [filters]\n  );\n\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setFilters({ queryString: undefined, contactPoint: undefined });\n    setSearchParams({ queryString: undefined, contactPoint: undefined });\n  };\n\n  const addNewRoute = () => {\n    clearFilters();\n    setIsAddMode(true);\n    setActualRoutes(() => [\n      ...routes.routes,\n      {\n        ...emptyRoute,\n        matchers: [emptyArrayFieldMatcher],\n      },\n    ]);\n  };\n\n  const onCancelAdd = () => {\n    setIsAddMode(false);\n    setActualRoutes([...routes.routes]);\n  };\n\n  const onTableRouteChange = (newRoutes: FormAmRoute[]): void => {\n    onChange({\n      ...routes,\n      routes: newRoutes,\n    });\n\n    if (isAddMode) {\n      setIsAddMode(false);\n    }\n  };\n  return (\n    <div className={styles.container}>\n      <h5>Specific routing</h5>\n      <p>Send specific alerts to chosen contact points, based on matching criteria</p>\n      {!routes.receiver ? (\n        readOnly ? (\n          <EmptyArea>\n            <p>There is no default contact point configured for the root route.</p>\n          </EmptyArea>\n        ) : (\n          <EmptyAreaWithCTA\n            buttonIcon=\"rocket\"\n            buttonLabel=\"Set a default contact point\"\n            onButtonClick={onRootRouteEdit}\n            text=\"You haven't set a default contact point for the root route yet.\"\n            showButton={canCreateNotifications}\n          />\n        )\n      ) : actualRoutes.length > 0 ? (\n        <>\n          <div>\n            {!isAddMode && (\n              <div className={styles.searchContainer}>\n                <LabelMatcherFilter\n                  onFilterChange={(filter) =>\n                    setFilters((currentFilters) => ({ ...currentFilters, queryString: filter }))\n                  }\n                  defaultQueryString={filters.queryString ?? ''}\n                  className={styles.filterInput}\n                />\n                <div className={styles.filterInput}>\n                  <Label>Search by contact point</Label>\n                  <Input\n                    onChange={({ currentTarget }) =>\n                      setFilters((currentFilters) => ({ ...currentFilters, contactPoint: currentTarget.value }))\n                    }\n                    value={filters.contactPoint ?? ''}\n                    placeholder=\"Search by contact point\"\n                    data-testid=\"search-query-input\"\n                    prefix={<Icon name={'search'} />}\n                  />\n                </div>\n                {(queryString || contactPoint) && (\n                  <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters} className={styles.clearFilterBtn}>\n                    Clear filters\n                  </Button>\n                )}\n              </div>\n            )}\n\n            {!isAddMode && !readOnly && (\n              <Authorize actions={[permissions.create]}>\n                <div className={styles.addMatcherBtnRow}>\n                  <Button className={styles.addMatcherBtn} icon=\"plus\" onClick={addNewRoute} type=\"button\">\n                    New policy\n                  </Button>\n                </div>\n              </Authorize>\n            )}\n          </div>\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            readOnly={readOnly}\n            onCancelAdd={onCancelAdd}\n            onChange={onTableRouteChange}\n            receivers={receivers}\n            routes={actualRoutes}\n            filters={{ queryString, contactPoint }}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        </>\n      ) : readOnly ? (\n        <EmptyArea>\n          <p>There are no specific policies configured.</p>\n        </EmptyArea>\n      ) : (\n        <EmptyAreaWithCTA\n          buttonIcon=\"plus\"\n          buttonLabel=\"New specific policy\"\n          onButtonClick={addNewRoute}\n          text=\"You haven't created any specific policies yet.\"\n          showButton={canCreateNotifications}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-flow: column wrap;\n    `,\n    searchContainer: css`\n      display: flex;\n      flex-flow: row nowrap;\n      padding-bottom: ${theme.spacing(2)};\n      border-bottom: 1px solid ${theme.colors.border.strong};\n    `,\n    clearFilterBtn: css`\n      align-self: flex-end;\n      margin-left: ${theme.spacing(1)};\n    `,\n    filterInput: css`\n      width: 340px;\n      & + & {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    addMatcherBtnRow: css`\n      display: flex;\n      flex-flow: column nowrap;\n      padding: ${theme.spacing(2)} 0;\n    `,\n    addMatcherBtn: css`\n      align-self: flex-end;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { MuteTimingsTable } from './components/amroutes/MuteTimingsTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { AmRouteReceiver, FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const {\n    result,\n    loading: resultLoading,\n    error: resultError,\n  } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers = stringsToSelectableValues(\n    (config?.receivers ?? []).map((receiver: Receiver) => receiver.name)\n  ) as AmRouteReceiver[];\n\n  const isProvisioned = useMemo(() => Boolean(config?.route?.provenance), [config?.route]);\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    if (!result) {\n      return;\n    }\n\n    const newData = formAmRouteToAmRoute(\n      alertManagerSourceName,\n      {\n        ...rootRoute,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n        refetch: true,\n      })\n    );\n  };\n\n  if (!alertManagerSourceName) {\n    return (\n      <AlertingPageWrapper pageId=\"am-routes\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    );\n  }\n\n  const readOnly = alertManagerSourceName\n    ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) || isProvisioned\n    : true;\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={alertManagerSourceName} />\n      {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.RootNotificationPolicy} />}\n      {resultLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            readOnly={readOnly}\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            alertManagerSourceName={alertManagerSourceName}\n            onChange={handleSave}\n            readOnly={readOnly}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <MuteTimingsTable alertManagerSourceName={alertManagerSourceName} />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n  numExternalAlertmanagers: number;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoiceStatus: build.query<AlertmanagersChoiceResponse, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const viewingInternalAM = currentAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || !viewingInternalAM) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n"],"names":["defaultValueAndType","matchersToArrayFieldMatchers","matchers","isRegex","Object","entries","reduce","acc","name","value","operator","MatcherOperator","intervalToValueAndType","strValue","defaultValue","valueType","parseInterval","undefined","timeOption","timeOptions","opt","String","selectableValueToString","selectableValue","emptyArrayFieldMatcher","commonGroupByOptions","label","emptyRoute","id","overrideGrouping","groupBy","object_matchers","routes","continue","receiver","overrideTimings","groupWaitValue","groupWaitValueType","groupIntervalValue","groupIntervalValueType","repeatIntervalValue","repeatIntervalValueType","muteTimeIntervals","amRouteToFormAmRoute","route","Math","random","id2route","keys","length","formRoutes","forEach","subRoute","subFormRoute","subId2Route","push","assign","map","matcher","matcherToMatcherField","parseMatcher","group_wait","group_interval","repeat_interval","match","match_re","Array","isArray","group_by","some","Boolean","mute_time_intervals","formAmRouteToAmRoute","alertManagerSourceName","formAmRoute","id2ExistingRoute","existing","amRoute","GRAFANA_RULES_SOURCE_NAME","omitBy","isUndefined","stringToSelectableValue","str","stringsToSelectableValues","arr","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","optionalPositiveInteger","test","getFormStyles","theme","container","css","spacing","input","timingContainer","smallInput","linkText","collapse","colors","text","primary","AmRootRouteForm","onCancel","onSave","receivers","styles","useStyles2","isTimingOptionsExpanded","setIsTimingOptionsExpanded","useState","groupByOptions","setGroupByOptions","Form","defaultValues","onSubmit","control","errors","setValue","Field","invalid","error","message","className","InputControl","render","field","onChange","Select","options","rules","required","Link","href","makeAMLink","description","allowCustomValue","onCreateOption","opts","Collapse","collapsible","isOpen","onToggle","cx","fieldState","Input","I","placeholder","validate","menuPlacement","Button","type","onClick","variant","fill","getGridStyles","typography","fontSize","breakpoints","down","titleCell","valueCell","secondary","AmRootRouteRead","join","groupWait","groupInterval","repeatInterval","AmRootRoute","isEditMode","onEnterEditMode","onExitEditMode","readOnly","getStyles","permissions","getNotificationsPermissions","titleContainer","title","Authorize","actions","update","icon","size","background","EmptyArea","children","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","showButton","commonProps","button","AmRoutesExpandedForm","formStyles","muteTimingOptions","alertManagers","useAlertManagersByPermission","useAlertManagerSourceName","amConfigs","useUnifiedAlertingSelector","state","useMemo","result","initialAsyncRequestState","config","alertmanager_config","time_intervals","interval","timeIntervalToString","useMuteTimingOptions","register","watch","FieldArray","F","fields","append","remove","justify","Badge","color","noMatchersWarning","matchersContainer","index","localPath","align","height","matchersOperator","matcherFieldOptions","IconButton","removeButton","tooltip","addMatcherBtn","Switch","buttonGroup","commonSpacing","nestedPolicies","MuteTimingsTable","muteTimingNames","hideActions","dispatch","useDispatch","muteTimingName","setMuteTimingName","items","muteTimings","muteTimingsProvenances","muteTimeProvenances","filter","includes","mute","data","provenance","columns","userHasEditPermissions","contextSrv","userHasDeletePermissions","delete","showActions","renderCell","Provisioning","renderTimeIntervals","muteName","useColumns","create","addMuteButton","DynamicTable","cols","ConfirmModal","body","confirmText","onConfirm","deleteMuteTimingAction","onDismiss","timeIntervals","times","weekdays","days_of_month","months","years","timeString","getTimeString","weekdayString","getWeekdayString","daysString","getDaysOfMonthString","monthsString","getMonthsString","yearsString","getYearsString","JSON","stringify","AmRoutesExpandedRead","gridStyles","subroutes","setSubroutes","isAddMode","setIsAddMode","AmRoutesTable","onCancelAdd","newSubroutes","pop","newRoutes","addNestedRoutingBtn","updatedRoute","editIndex","findIndex","filters","editMode","setEditMode","deletingRouteId","setDeletingRouteId","expandedId","setExpandedId","canEditRoutes","canDeleteRoutes","expandItem","useCallback","item","collapseItem","Matchers","matcherFieldToMatcher","renderExpandedContent","filteredRoutes","labelMatcherQuery","contactPointQuery","filterMatchers","parseMatchers","routeMatchers","differenceWith","isEqual","toLowerCase","getFilteredRoutes","queryString","contactPoint","dynamicTableRoutes","prepareItems","idCreator","useEffect","isExpandable","testIdGenerator","onCollapse","onExpand","isExpanded","routeId","deleteRoute","LabelMatcherFilter","onFilterChange","defaultQueryString","onSearchInputChanged","debounce","e","logInfo","LogMessages","target","cancel","searchIcon","Icon","Label","Stack","gap","HoverCard","content","hoverContent","bold","textBlock","prefix","inputWidth","fontWeightBold","AmSpecificRouting","onRootRouteEdit","actualRoutes","setActualRoutes","canCreateNotifications","searchParams","setSearchParams","useURLSearchParams","getNotificationPoliciesFilters","setFilters","useDebounce","clearFilters","addNewRoute","searchContainer","currentFilters","filterInput","currentTarget","clearFilterBtn","addMatcherBtnRow","border","strong","withErrorBoundary","isRootRouteEditMode","setIsRootRouteEditMode","setAlertManagerSourceName","fetchConfig","fetchAlertManagerConfigAction","loading","resultLoading","resultError","rootRoute","isProvisioned","enterRootRouteEditMode","exitRootRouteEditMode","useCleanup","unifiedAlerting","saveAMConfig","handleSave","newData","updateAlertManagerConfigAction","newConfig","oldConfig","successMessage","refetch","AlertingPageWrapper","pageId","NoAlertManagerWarning","availableAlertManagers","isVanillaPrometheusAlertManagerDataSource","AlertManagerPicker","current","dataSources","Alert","severity","GrafanaAlertmanagerDeliveryWarning","currentAlertmanager","resource","ProvisionedResource","LoadingPlaceholder","break","style","alertmanagerApi","alertingApi","endpoints","build","getAlertmanagerChoiceStatus","query","url","providesTags","getExternalAlertmanagerConfig","getExternalAlertmanagers","transformResponse","response","saveExternalAlertmanagersConfig","mutation","method","invalidatesTags","pageNav","isLoading","navId","fallback","action","useGetAlertmanagerChoiceStatusQuery","currentData","amChoiceStatus","viewingInternalAM","alertmanagersChoice","AlertmanagerChoice","hasActiveExternalAMs","numExternalAlertmanagers","adminHint","bodySmall","fontWeight","NoAlertManagersAvailable","OtherAlertManagersAvailable","_","hasOtherAMs","ProvisioningAlert","ProvisioningBadge","tags","matcherToOperator","queryParams","updateQueryParams","useQueryParams","isAlertManagerAvailable","alertManagerName","am","useIsAlertManagerAvailable","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","accessType","getAlertManagerDataSourcesByPermission","search","useLocation","URLSearchParams","searchValues","replace","locationService"],"sourceRoot":""}