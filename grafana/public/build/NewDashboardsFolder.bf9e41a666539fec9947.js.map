{"version":3,"file":"NewDashboardsFolder.bf9e41a666539fec9947.js","mappings":"iZAWA,MAAMA,EAAqB,CACzBC,gBAAeA,EAAAA,IAGXC,GAAYC,EAAAA,EAAAA,SAAQ,KAAMH,GAQ1BI,EAA8B,CAAEC,WAAY,IAI3C,MAAMC,UAA4BC,EAAAA,cAAqB,qDAChDC,IACVC,KAAKC,MAAMT,gBAAgBO,EAASH,WAAW,IAChD,6BAEqBA,GACbM,EAAAA,EAAAA,sBACkBN,GACtBO,MAAK,KACG,IAERC,OAAOC,GACCA,EAAEC,YAEd,iBAEuB,CACtBC,KAAM,sBACNC,SAAU,6DACVC,YAAa,CAAC,CAAEC,MAAO,aAAcC,IAAK,gBAC3C,CAEDC,SACE,OACE,SAAC,IAAI,CAACC,MAAM,oBAAoBC,QAASd,KAAKc,QAAQ,UACpD,UAAC,aAAa,YACVC,EAAAA,EAAAA,eAAAA,SAA4B,OAAI,oDAClC,SAAC,IAAI,CAACC,cAAerB,EAAkBsB,SAAUjB,KAAKiB,SAAS,SAC5D,QAAC,SAAEC,EAAQ,OAAEC,GAAQ,SACpB,iCACE,SAAC,IAAK,CACJC,MAAM,cACNC,UAAWF,EAAOvB,WAClB0B,MAAOH,EAAOvB,YAAcuB,EAAOvB,WAAWU,QAAQ,UAEtD,SAAC,EAAAiB,EAAK,eACJC,GAAG,qBACCN,EAAS,aAAc,CACzBO,SAAU,2BACVC,SAAUC,eAAmB3B,KAAK4B,mBAAmBC,SAGnD,OACR,SAAC,KAAM,CAACC,KAAK,SAAQ,uBACpB,QAMf,EAGF,QAAerC,EAAUI,E","sources":["webpack://grafana/./public/app/features/folders/components/NewDashboardsFolder.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Input, Form, Field } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\nimport { createNewFolder } from '../state/actions';\n\nconst mapDispatchToProps = {\n  createNewFolder,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class NewDashboardsFolder extends PureComponent<Props> {\n  onSubmit = (formData: FormModel) => {\n    this.props.createNewFolder(formData.folderName);\n  };\n\n  validateFolderName = (folderName: string) => {\n    return validationSrv\n      .validateNewFolderName(folderName)\n      .then(() => {\n        return true;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n  };\n\n  pageNav: NavModelItem = {\n    text: 'Create a new folder',\n    subTitle: 'Folders provide a way to group dashboards and alert rules.',\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n  };\n\n  render() {\n    return (\n      <Page navId=\"dashboards/browse\" pageNav={this.pageNav}>\n        <Page.Contents>\n          {!config.featureToggles.topnav && <h3>New dashboard folder</h3>}\n          <Form defaultValues={initialFormModel} onSubmit={this.onSubmit}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label=\"Folder name\"\n                  invalid={!!errors.folderName}\n                  error={errors.folderName && errors.folderName.message}\n                >\n                  <Input\n                    id=\"folder-name-input\"\n                    {...register('folderName', {\n                      required: 'Folder name is required.',\n                      validate: async (v) => await this.validateFolderName(v),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            )}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(NewDashboardsFolder);\n"],"names":["mapDispatchToProps","createNewFolder","connector","connect","initialFormModel","folderName","NewDashboardsFolder","PureComponent","formData","this","props","validationSrv","then","catch","e","message","text","subTitle","breadcrumbs","title","url","render","navId","pageNav","config","defaultValues","onSubmit","register","errors","label","invalid","error","I","id","required","validate","async","validateFolderName","v","type"],"sourceRoot":""}