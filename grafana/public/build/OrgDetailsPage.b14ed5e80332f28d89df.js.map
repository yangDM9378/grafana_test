{"version":3,"file":"OrgDetailsPage.b14ed5e80332f28d89df.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LOCALES } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { UserPreferencesDTO } from 'app/types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO;\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t('shared-preferences.theme.default-label', 'Default') },\n  { value: 'dark', label: t('shared-preferences.theme.dark-label', 'Dark') },\n  { value: 'light', label: t('shared-preferences.theme.light-label', 'Light') },\n];\n\nfunction getLanguageOptions(): Array<SelectableValue<string>> {\n  const languageOptions = LOCALES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  }));\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t('shared-preferences.fields.theme-label', 'UI Theme')}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-preferences.fields.week-start-label', 'Week start')}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.beta} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans i18nKey=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FC } from 'react';\n\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, orgName }) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\" disabled={!canWriteOrg}>\n          <Field label=\"Organization name\">\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, Organization, StoreState } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport OrgProfile from './OrgProfile';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { setOrganizationName } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  handleConfirm = () => {\n    return new Promise<boolean>((resolve) => {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Confirm preferences update',\n          text: 'This will update the preferences for the whole organization. Are you sure you want to update the preferences?',\n          yesText: 'Save',\n          yesButtonVariant: 'primary',\n          onConfirm: async () => resolve(true),\n          onDismiss: async () => resolve(false),\n        })\n      );\n    });\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup spacing=\"lg\">\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && (\n                <SharedPreferences resourceUri=\"org\" disabled={!canWritePreferences} onConfirm={this.handleConfirm} />\n              )}\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage);\n"],"names":["themes","value","label","t","i18nFlag","Boolean","config","SharedPreferences","PureComponent","constructor","props","super","async","this","onConfirm","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","state","service","update","window","location","reload","setState","dashboardUID","PreferencesService","resourceUri","homeTab","prefs","load","render","disabled","styles","getStyles","languages","languageOptions","LOCALES","v","code","name","getLanguageOptions","onSubmit","onSubmitForm","i18nKey","options","find","item","onChange","onThemeChanged","htmlFor","className","labelText","onHomeDashboardChanged","uid","defaultOptions","isClearable","placeholder","inputId","selectors","includeInternal","onTimeZoneChanged","onWeekStartChanged","featureState","FeatureState","lang","onLocaleChanged","type","variant","stylesFactory","css","orgName","canWriteOrg","contextSrv","AccessControlAction","Form","defaultValues","register","FieldSet","Field","Input","I","id","required","Button","OrgDetailsPage","setOrganizationName","updateOrganization","Promise","resolve","appEvents","ShowConfirmModalEvent","title","text","yesText","yesButtonVariant","onDismiss","loadOrganization","navModel","organization","isLoading","Object","keys","length","canReadOrg","canReadPreferences","canWritePreferences","Page","spacing","onUpdateOrganization","handleConfirm","mapDispatchToProps","connect","getNavModel","navIndex"],"sourceRoot":""}