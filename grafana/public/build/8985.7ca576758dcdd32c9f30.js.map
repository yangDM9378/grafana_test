{"version":3,"file":"8985.7ca576758dcdd32c9f30.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationInfoButton.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationParamEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/RawQuery.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/hooks/useFlag.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/types.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title?: React.ReactNode;\n  children?: React.ReactNode;\n  markdown?: string;\n  stepNumber?: number;\n}\n\nexport function OperationExplainedBox({ title, stepNumber, markdown, children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.box}>\n      {stepNumber !== undefined && <div className={styles.stepNumber}>{stepNumber}</div>}\n      <div className={styles.boxInner}>\n        {title && (\n          <div className={styles.header}>\n            <span>{title}</span>\n          </div>\n        )}\n        <div className={styles.body}>\n          {markdown && <div dangerouslySetInnerHTML={{ __html: renderMarkdown(markdown) }}></div>}\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    box: css({\n      background: theme.colors.background.secondary,\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.borderRadius(),\n      position: 'relative',\n    }),\n    boxInner: css({\n      marginLeft: theme.spacing(4),\n    }),\n    stepNumber: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      background: theme.colors.secondary.main,\n      width: '20px',\n      height: '20px',\n      borderRadius: '50%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'absolute',\n      top: '10px',\n      left: '11px',\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    header: css({\n      paddingBottom: theme.spacing(0.5),\n      display: 'flex',\n      alignItems: 'center',\n      fontFamily: theme.typography.fontFamilyMonospace,\n    }),\n    body: css({\n      color: theme.colors.text.secondary,\n      'p:last-child': {\n        margin: 0,\n      },\n      a: {\n        color: theme.colors.text.link,\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { usePopperTooltip } from 'react-popper-tooltip';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Portal, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n}\n\nexport const OperationInfoButton = React.memo<Props>(({ def, operation }) => {\n  const styles = useStyles2(getStyles);\n  const [show, setShow] = useState(false);\n  const { getTooltipProps, setTooltipRef, setTriggerRef, visible } = usePopperTooltip({\n    placement: 'top',\n    visible: show,\n    offset: [0, 16],\n    onVisibleChange: setShow,\n    interactive: true,\n    trigger: ['click'],\n  });\n\n  return (\n    <>\n      <Button\n        title=\"Click to show description\"\n        ref={setTriggerRef}\n        icon=\"info-circle\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"text\"\n      />\n      {visible && (\n        <Portal>\n          <div ref={setTooltipRef} {...getTooltipProps()} className={styles.docBox}>\n            <div className={styles.docBoxHeader}>\n              <span>{def.renderer(operation, def, '<expr>')}</span>\n              <FlexItem grow={1} />\n              <Button\n                icon=\"times\"\n                onClick={() => setShow(false)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n            <div\n              className={styles.docBoxBody}\n              dangerouslySetInnerHTML={{ __html: getOperationDocs(def, operation) }}\n            ></div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n});\n\nOperationInfoButton.displayName = 'OperationDocs';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    docBox: css({\n      overflow: 'hidden',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.strong}`,\n      boxShadow: theme.shadows.z3,\n      maxWidth: '600px',\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.borderRadius(),\n      zIndex: theme.zIndex.tooltip,\n    }),\n    docBoxHeader: css({\n      fontSize: theme.typography.h5.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n      paddingBottom: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    docBoxBody: css({\n      // The markdown paragraph has a marginBottom this removes it\n      marginBottom: theme.spacing(-1),\n      color: theme.colors.text.secondary,\n    }),\n    signature: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n    }),\n    dropdown: css({\n      opacity: 0,\n      color: theme.colors.text.secondary,\n    }),\n  };\n};\nfunction getOperationDocs(def: QueryBuilderOperationDef, op: QueryBuilderOperation): string {\n  return renderMarkdown(def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs');\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { VisualQueryModeller, QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps: any;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = React.memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n\n                  // copy default params, and override with all current params\n                  const newParams = [...newDef.defaultParams];\n                  for (let i = 0; i < Math.min(operation.params.length, newParams.length); i++) {\n                    if (newDef.params[i].type === def.params[i].type) {\n                      newParams[i] = operation.params[i];\n                    }\n                  }\n\n                  const changedOp = { ...operation, params: newParams, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n      '&:hover .operation-header-show-on-hover': css({\n        opacity: 1,\n      }),\n    }),\n    operationHeaderButtons: css({\n      opacity: 0,\n      transition: theme.transitions.create(['opacity'], {\n        duration: theme.transitions.duration.short,\n      }),\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ComponentType } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { AutoSizeInput, Button, Checkbox, Select, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperationParamDef, QueryBuilderOperationParamEditorProps } from '../shared/types';\n\nimport { getOperationParamId } from './operationUtils';\n\nexport function getOperationParamEditor(\n  paramDef: QueryBuilderOperationParamDef\n): ComponentType<QueryBuilderOperationParamEditorProps> {\n  if (paramDef.editor) {\n    return paramDef.editor;\n  }\n\n  if (paramDef.options) {\n    return SelectInputParamEditor;\n  }\n\n  switch (paramDef.type) {\n    case 'boolean':\n      return BoolInputParamEditor;\n    case 'number':\n    case 'string':\n    default:\n      return SimpleInputParamEditor;\n  }\n}\n\nfunction SimpleInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <AutoSizeInput\n      id={getOperationParamId(props.operationIndex, props.index)}\n      defaultValue={props.value?.toString()}\n      minWidth={props.paramDef.minWidth}\n      placeholder={props.paramDef.placeholder}\n      title={props.paramDef.description}\n      maxWidth={(props.paramDef.minWidth || 20) * 3}\n      onCommitChange={(evt) => {\n        props.onChange(props.index, evt.currentTarget.value);\n        if (props.paramDef.runQueryOnEnter && evt.type === 'keydown') {\n          props.onRunQuery();\n        }\n      }}\n    />\n  );\n}\n\nfunction BoolInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <Checkbox\n      id={getOperationParamId(props.operationIndex, props.index)}\n      value={props.value as boolean}\n      onChange={(evt) => props.onChange(props.index, evt.currentTarget.checked)}\n    />\n  );\n}\n\nfunction SelectInputParamEditor({\n  paramDef,\n  value,\n  index,\n  operationIndex,\n  onChange,\n}: QueryBuilderOperationParamEditorProps) {\n  const styles = useStyles2(getStyles);\n  let selectOptions = paramDef.options as Array<SelectableValue<any>>;\n\n  if (!selectOptions[0]?.label) {\n    selectOptions = paramDef.options!.map((option) => ({\n      label: option.toString(),\n      value: option as string,\n    }));\n  }\n\n  let valueOption = selectOptions.find((x) => x.value === value) ?? toOption(value as string);\n\n  // If we have optional options param and don't have value, we want to render button with which we add optional options.\n  // This makes it easier to understand what needs to be selected and what is optional.\n  if (!value && paramDef.optional) {\n    return (\n      <div className={styles.optionalParam}>\n        <Button\n          size=\"sm\"\n          variant=\"secondary\"\n          title={`Add ${paramDef.name}`}\n          icon=\"plus\"\n          onClick={() => onChange(index, selectOptions[0].value)}\n        >\n          {paramDef.name}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Stack gap={0.5} direction=\"row\" alignItems=\"center\" wrap={false}>\n      <Select\n        id={getOperationParamId(operationIndex, index)}\n        value={valueOption}\n        options={selectOptions}\n        placeholder={paramDef.placeholder}\n        allowCustomValue={true}\n        onChange={(value) => onChange(index, value.value!)}\n      />\n      {paramDef.optional && (\n        <Button\n          data-testid={`operations.${index}.remove-param`}\n          size=\"sm\"\n          fill=\"text\"\n          icon=\"times\"\n          variant=\"secondary\"\n          title={`Remove ${paramDef.name}`}\n          onClick={() => onChange(index, '')}\n        />\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    optionalParam: css({\n      marginTop: theme.spacing(1),\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { DataSourceApi, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Icon, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { OperationHeader } from './OperationHeader';\nimport { getOperationParamEditor } from './OperationParamEditor';\nimport { getOperationParamId } from './operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  VisualQueryModeller,\n} from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  flash?: boolean;\n  highlight?: boolean;\n}\n\nexport function OperationEditor({\n  operation,\n  index,\n  onRemove,\n  onChange,\n  onRunQuery,\n  queryModeller,\n  query,\n  datasource,\n  flash,\n  highlight,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const def = queryModeller.getOperationDef(operation.id);\n  const shouldFlash = useFlash(flash);\n\n  if (!def) {\n    return <span>Operation {operation.id} not found</span>;\n  }\n\n  const onParamValueChanged = (paramIdx: number, value: QueryBuilderOperationParamValue) => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params] };\n    update.params[paramIdx] = value;\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const onAddRestParam = () => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params, ''] };\n    callParamChangedThenOnChange(def, update, index, operation.params.length, onChange);\n  };\n\n  const onRemoveRestParam = (paramIdx: number) => {\n    const update: QueryBuilderOperation = {\n      ...operation,\n      params: [...operation.params.slice(0, paramIdx), ...operation.params.slice(paramIdx + 1)],\n    };\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const operationElements: React.ReactNode[] = [];\n\n  for (let paramIndex = 0; paramIndex < operation.params.length; paramIndex++) {\n    const paramDef = def.params[Math.min(def.params.length - 1, paramIndex)];\n    const Editor = getOperationParamEditor(paramDef);\n\n    operationElements.push(\n      <div className={styles.paramRow} key={`${paramIndex}-1`}>\n        {!paramDef.hideName && (\n          <div className={styles.paramName}>\n            <label htmlFor={getOperationParamId(index, paramIndex)}>{paramDef.name}</label>\n            {paramDef.description && (\n              <Tooltip placement=\"top\" content={paramDef.description} theme=\"info\">\n                <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n              </Tooltip>\n            )}\n          </div>\n        )}\n        <div className={styles.paramValue}>\n          <Stack gap={0.5} direction=\"row\" alignItems=\"center\" wrap={false}>\n            <Editor\n              index={paramIndex}\n              paramDef={paramDef}\n              value={operation.params[paramIndex]}\n              operation={operation}\n              operationIndex={index}\n              onChange={onParamValueChanged}\n              onRunQuery={onRunQuery}\n              query={query}\n              datasource={datasource}\n            />\n            {paramDef.restParam && (operation.params.length > def.params.length || paramDef.optional) && (\n              <Button\n                data-testid={`operations.${index}.remove-rest-param`}\n                size=\"sm\"\n                fill=\"text\"\n                icon=\"times\"\n                variant=\"secondary\"\n                title={`Remove ${paramDef.name}`}\n                onClick={() => onRemoveRestParam(paramIndex)}\n              />\n            )}\n          </Stack>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle adding button for rest params\n  let restParam: React.ReactNode | undefined;\n  if (def.params.length > 0) {\n    const lastParamDef = def.params[def.params.length - 1];\n    if (lastParamDef.restParam) {\n      restParam = renderAddRestParamButton(lastParamDef, onAddRestParam, index, operation.params.length, styles);\n    }\n  }\n\n  return (\n    <Draggable draggableId={`operation-${index}`} index={index}>\n      {(provided) => (\n        <div\n          className={cx(styles.card, (shouldFlash || highlight) && styles.cardHighlight)}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          data-testid={`operations.${index}.wrapper`}\n        >\n          <OperationHeader\n            operation={operation}\n            dragHandleProps={provided.dragHandleProps}\n            def={def}\n            index={index}\n            onChange={onChange}\n            onRemove={onRemove}\n            queryModeller={queryModeller}\n          />\n          <div className={styles.body}>{operationElements}</div>\n          {restParam}\n          {index < query.operations.length - 1 && (\n            <div className={styles.arrow}>\n              <div className={styles.arrowLine} />\n              <div className={styles.arrowArrow} />\n            </div>\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\n/**\n * When flash is switched on makes sure it is switched of right away, so we just flash the highlight and then fade\n * out.\n * @param flash\n */\nfunction useFlash(flash?: boolean) {\n  const [keepFlash, setKeepFlash] = useState(true);\n  useEffect(() => {\n    let t: any;\n    if (flash) {\n      t = setTimeout(() => {\n        setKeepFlash(false);\n      }, 1000);\n    } else {\n      setKeepFlash(true);\n    }\n\n    return () => clearTimeout(t);\n  }, [flash]);\n\n  return keepFlash && flash;\n}\n\nfunction renderAddRestParamButton(\n  paramDef: QueryBuilderOperationParamDef,\n  onAddRestParam: () => void,\n  operationIndex: number,\n  paramIndex: number,\n  styles: OperationEditorStyles\n) {\n  return (\n    <div className={styles.restParam} key={`${paramIndex}-2`}>\n      <Button\n        size=\"sm\"\n        icon=\"plus\"\n        title={`Add ${paramDef.name}`}\n        variant=\"secondary\"\n        onClick={onAddRestParam}\n        data-testid={`operations.${operationIndex}.add-rest-param`}\n      >\n        {paramDef.name}\n      </Button>\n    </div>\n  );\n}\n\nfunction callParamChangedThenOnChange(\n  def: QueryBuilderOperationDef,\n  operation: QueryBuilderOperation,\n  operationIndex: number,\n  paramIndex: number,\n  onChange: (index: number, update: QueryBuilderOperation) => void\n) {\n  if (def.paramChangedHandler) {\n    onChange(operationIndex, def.paramChangedHandler(paramIndex, operation, def));\n  } else {\n    onChange(operationIndex, operation);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.medium}`,\n      display: 'flex',\n      flexDirection: 'column',\n      cursor: 'grab',\n      borderRadius: theme.shape.borderRadius(1),\n      marginBottom: theme.spacing(1),\n      position: 'relative',\n      transition: 'all 0.5s ease-in 0s',\n    }),\n    cardHighlight: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.primary.border}`,\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(0.5),\n      color: theme.colors.text.secondary,\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    body: css({\n      margin: theme.spacing(1, 1, 0.5, 1),\n      display: 'table',\n    }),\n    paramRow: css({\n      label: 'paramRow',\n      display: 'table-row',\n      verticalAlign: 'middle',\n    }),\n    paramName: css({\n      display: 'table-cell',\n      padding: theme.spacing(0, 1, 0, 0),\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      verticalAlign: 'middle',\n      height: '32px',\n    }),\n    paramValue: css({\n      label: 'paramValue',\n      display: 'table-cell',\n      verticalAlign: 'middle',\n    }),\n    restParam: css({\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n    arrow: css({\n      position: 'absolute',\n      top: '0',\n      right: '-18px',\n      display: 'flex',\n    }),\n    arrowLine: css({\n      height: '2px',\n      width: '8px',\n      backgroundColor: theme.colors.border.strong,\n      position: 'relative',\n      top: '14px',\n    }),\n    arrowArrow: css({\n      width: 0,\n      height: 0,\n      borderTop: `5px solid transparent`,\n      borderBottom: `5px solid transparent`,\n      borderLeft: `7px solid ${theme.colors.border.strong}`,\n      position: 'relative',\n      top: '10px',\n    }),\n  };\n};\n\ntype OperationEditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useMountedState, usePrevious } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Cascader, CascaderOption, useStyles2 } from '@grafana/ui';\n\nimport { OperationEditor } from './OperationEditor';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  datasource: DataSourceApi;\n  onChange: (query: T) => void;\n  onRunQuery: () => void;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  highlightedOp?: QueryBuilderOperation;\n}\n\nexport function OperationList<T extends QueryWithOperations>({\n  query,\n  datasource,\n  queryModeller,\n  onChange,\n  onRunQuery,\n  highlightedOp,\n}: Props<T>) {\n  const styles = useStyles2(getStyles);\n  const { operations } = query;\n\n  const opsToHighlight = useOperationsHighlight(operations);\n\n  const [cascaderOpen, setCascaderOpen] = useState(false);\n\n  const onOperationChange = (index: number, update: QueryBuilderOperation) => {\n    const updatedList = [...operations];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...operations.slice(0, index), ...operations.slice(index + 1)];\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const addOptions: CascaderOption[] = queryModeller.getCategories().map((category) => {\n    return {\n      value: category,\n      label: category,\n      items: queryModeller.getOperationsForCategory(category).map((operation) => ({\n        value: operation.id,\n        label: operation.name,\n        isLeaf: true,\n      })),\n    };\n  });\n\n  const onAddOperation = (value: string) => {\n    const operationDef = queryModeller.getOperationDef(value);\n    if (!operationDef) {\n      return;\n    }\n    onChange(operationDef.addOperationHandler(operationDef, query, queryModeller));\n    setCascaderOpen(false);\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedList = [...operations];\n    const element = updatedList[result.source.index];\n    updatedList.splice(result.source.index, 1);\n    updatedList.splice(result.destination.index, 0, element);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onCascaderBlur = () => {\n    setCascaderOpen(false);\n  };\n\n  return (\n    <Stack gap={1} direction=\"column\">\n      <Stack gap={1}>\n        {operations.length > 0 && (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"sortable-field-mappings\" direction=\"horizontal\">\n              {(provided) => (\n                <div className={styles.operationList} ref={provided.innerRef} {...provided.droppableProps}>\n                  {operations.map((op, index) => {\n                    return (\n                      <OperationEditor\n                        key={op.id + JSON.stringify(op.params) + index}\n                        queryModeller={queryModeller}\n                        index={index}\n                        operation={op}\n                        query={query}\n                        datasource={datasource}\n                        onChange={onOperationChange}\n                        onRemove={onRemove}\n                        onRunQuery={onRunQuery}\n                        flash={opsToHighlight[index]}\n                        highlight={highlightedOp === op}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        )}\n        <div className={styles.addButton}>\n          {cascaderOpen ? (\n            <Cascader\n              options={addOptions}\n              onSelect={onAddOperation}\n              onBlur={onCascaderBlur}\n              autoFocus={true}\n              alwaysOpen={true}\n              hideActiveLevelLabel={true}\n              placeholder={'Search'}\n            />\n          ) : (\n            <Button icon={'plus'} variant={'secondary'} onClick={() => setCascaderOpen(true)} title={'Add operation'}>\n              Operations\n            </Button>\n          )}\n        </div>\n      </Stack>\n    </Stack>\n  );\n}\n\n/**\n * Returns indexes of operations that should be highlighted. We check the diff of operations added but at the same time\n * we want to highlight operations only after the initial render, so we check for mounted state and calculate the diff\n * only after.\n * @param operations\n */\nfunction useOperationsHighlight(operations: QueryBuilderOperation[]) {\n  const isMounted = useMountedState();\n  const prevOperations = usePrevious(operations);\n\n  if (!isMounted()) {\n    return operations.map(() => false);\n  }\n\n  if (!prevOperations) {\n    return operations.map(() => true);\n  }\n\n  let newOps: boolean[] = [];\n\n  if (prevOperations.length - 1 === operations.length && operations.every((op) => prevOperations.includes(op))) {\n    // In case we remove one op and does not change any ops then don't highlight anything.\n    return operations.map(() => false);\n  }\n  if (prevOperations.length + 1 === operations.length && prevOperations.every((op) => operations.includes(op))) {\n    // If we add a single op just find it and highlight just that.\n    const newOp = operations.find((op) => !prevOperations.includes(op));\n    newOps = operations.map((op) => {\n      return op === newOp;\n    });\n  } else {\n    // Default diff of all ops.\n    newOps = operations.map((op, index) => {\n      return !isSameOp(op.id, prevOperations[index]?.id);\n    });\n  }\n  return newOps;\n}\n\nfunction isSameOp(op1?: string, op2?: string) {\n  return op1 === op2 || `__${op1}_by` === op2 || op1 === `__${op2}_by`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      label: 'heading',\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n      marginBottom: 0,\n    }),\n    operationList: css({\n      label: 'operationList',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: theme.spacing(2),\n    }),\n    addButton: css({\n      label: 'addButton',\n      width: 126,\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n};\n","import { Grammar } from 'prismjs';\nimport React from 'react';\n\nimport { OperationExplainedBox } from './OperationExplainedBox';\nimport { RawQuery } from './RawQuery';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  stepNumber: number;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  onMouseEnter?: (op: QueryBuilderOperation, index: number) => void;\n  onMouseLeave?: (op: QueryBuilderOperation, index: number) => void;\n}\n\nexport function OperationListExplained<T extends QueryWithOperations>({\n  query,\n  queryModeller,\n  stepNumber,\n  lang,\n  onMouseEnter,\n  onMouseLeave,\n}: Props<T>) {\n  return (\n    <>\n      {query.operations.map((op, index) => {\n        const def = queryModeller.getOperationDef(op.id);\n        if (!def) {\n          return `Operation ${op.id} not found`;\n        }\n        const title = def.renderer(op, def, '<expr>');\n        const body = def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs';\n\n        return (\n          <div\n            key={index}\n            onMouseEnter={() => onMouseEnter?.(op, index)}\n            onMouseLeave={() => onMouseLeave?.(op, index)}\n          >\n            <OperationExplainedBox\n              stepNumber={index + stepNumber}\n              title={<RawQuery query={title} lang={lang} />}\n              markdown={body}\n            />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function OperationsEditorRow({ children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={1}>{children}</Stack>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1, 1, 0, 1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport { LokiDatasource } from 'app/plugins/datasource/loki/datasource';\n\nimport { PrometheusDatasource } from '../../datasource';\n\nimport { LokiAndPromQueryModellerBase, PromLokiVisualQuery } from './LokiAndPromQueryModellerBase';\n\nexport interface Props<T extends PromLokiVisualQuery> {\n  query: T;\n  datasource: PrometheusDatasource | LokiDatasource;\n  queryModeller: LokiAndPromQueryModellerBase;\n  buildVisualQueryFromString: (expr: string) => { query: T };\n  onChange: (update: T) => void;\n  data?: PanelData;\n}\n\nexport const QueryBuilderHints = <T extends PromLokiVisualQuery>({\n  datasource,\n  query: visualQuery,\n  onChange,\n  data,\n  queryModeller,\n  buildVisualQueryFromString,\n}: Props<T>) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(query, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, visualQuery, data, queryModeller]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    if (hint?.fix?.action) {\n                      const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n                      const newQuery = datasource.modifyQuery(query, hint.fix.action);\n                      const newVisualQuery = buildVisualQueryFromString(newQuery.expr);\n                      return onChange(newVisualQuery.query);\n                    }\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  {'hint: ' + hint.fix?.action?.type.toLowerCase().replace('_', ' ') + '()'}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nQueryBuilderHints.displayName = 'QueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      align-items: start;\n    `,\n    hint: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { QueryEditorMode } from './types';\n\nexport interface Props {\n  mode: QueryEditorMode;\n  onChange: (mode: QueryEditorMode) => void;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: QueryEditorMode.Builder },\n  { label: 'Code', value: QueryEditorMode.Code },\n];\n\nexport function QueryEditorModeToggle({ mode, onChange }: Props) {\n  return (\n    <div data-testid={'QueryEditorModeToggle'}>\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={mode} onChange={onChange} />\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { HTMLProps, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Switch, useStyles2 } from '@grafana/ui';\n\nexport interface Props extends Omit<HTMLProps<HTMLInputElement>, 'value' | 'ref'> {\n  value?: boolean;\n  label: string;\n}\n\nexport function QueryHeaderSwitch({ label, ...inputProps }: Props) {\n  const dashedLabel = label.replace(' ', '-');\n  const switchIdRef = useRef(uniqueId(`switch-${dashedLabel}`));\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <label htmlFor={switchIdRef.current} className={styles.switchLabel}>\n        {label}\n      </label>\n      <Switch {...inputProps} id={switchIdRef.current} />\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>{title}</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            {collapsedInfo.map((x, i) => (\n              <span key={i}>{x}</span>\n            ))}\n          </div>\n        )}\n      </div>\n      {isOpen && <div className={styles.body}>{children}</div>}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport Prism, { Grammar } from 'prismjs';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { useTheme2 } from '@grafana/ui/src';\n\nexport interface Props {\n  query: string;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  className?: string;\n}\nexport function RawQuery({ query, lang, className }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const highlighted = Prism.highlight(query, lang.grammar, lang.name);\n\n  return (\n    <div\n      className={cx(styles.editorField, 'prism-syntax-highlight', className)}\n      aria-label=\"selector\"\n      dangerouslySetInnerHTML={{ __html: highlighted }}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import { useCallback, useState } from 'react';\n\nimport store from '../../../../../../core/store';\n\nexport const promQueryEditorExplainKey = 'PrometheusQueryEditorExplainDefault';\nexport const promQueryEditorRawQueryKey = 'PrometheusQueryEditorRawQueryDefault';\nexport const lokiQueryEditorExplainKey = 'LokiQueryEditorExplainDefault';\nexport const lokiQueryEditorRawQueryKey = 'LokiQueryEditorRawQueryDefault';\n\nexport type QueryEditorFlags =\n  | typeof promQueryEditorExplainKey\n  | typeof promQueryEditorRawQueryKey\n  | typeof lokiQueryEditorExplainKey\n  | typeof lokiQueryEditorRawQueryKey;\n\nfunction getFlagValue(key: QueryEditorFlags, defaultValue = false): boolean {\n  const val = store.get(key);\n  return val === undefined ? defaultValue : Boolean(parseInt(val, 10));\n}\n\nfunction setFlagValue(key: QueryEditorFlags, value: boolean) {\n  store.set(key, value ? '1' : '0');\n}\n\ntype UseFlagHookReturnType = { flag: boolean; setFlag: (val: boolean) => void };\n\n/**\n *\n * Use and store value of explain/rawquery switch in local storage.\n * Needs to be a hook with local state to trigger re-renders.\n */\nexport function useFlag(key: QueryEditorFlags, defaultValue = false): UseFlagHookReturnType {\n  const [flag, updateFlag] = useState(getFlagValue(key, defaultValue));\n  const setter = useCallback(\n    (value: boolean) => {\n      setFlagValue(key, value);\n      updateFlag(value);\n    },\n    [key]\n  );\n\n  return { flag, setFlag: setter };\n}\n","/**\n * Shared types that can be reused by Loki and other data sources\n */\n\nimport { ComponentType } from 'react';\n\nimport { DataSourceApi, RegistryItem, SelectableValue } from '@grafana/data';\n\nexport interface QueryBuilderLabelFilter {\n  label: string;\n  op: string;\n  value: string;\n}\n\nexport interface QueryBuilderOperation {\n  id: string;\n  params: QueryBuilderOperationParamValue[];\n}\n\nexport interface QueryWithOperations {\n  operations: QueryBuilderOperation[];\n}\n\nexport interface QueryBuilderOperationDef<T = any> extends RegistryItem {\n  documentation?: string;\n  params: QueryBuilderOperationParamDef[];\n  defaultParams: QueryBuilderOperationParamValue[];\n  category: string;\n  hideFromList?: boolean;\n  alternativesKey?: string;\n  /** Can be used to control operation placement when adding a new operations, lower are placed first */\n  orderRank?: number;\n  renderer: QueryBuilderOperationRenderer;\n  addOperationHandler: QueryBuilderAddOperationHandler<T>;\n  paramChangedHandler?: QueryBuilderOnParamChangedHandler;\n  explainHandler?: QueryBuilderExplainOperationHandler;\n  changeTypeHandler?: (op: QueryBuilderOperation, newDef: QueryBuilderOperationDef<T>) => QueryBuilderOperation;\n}\n\nexport type QueryBuilderAddOperationHandler<T> = (\n  def: QueryBuilderOperationDef,\n  query: T,\n  modeller: VisualQueryModeller\n) => T;\n\nexport type QueryBuilderExplainOperationHandler = (op: QueryBuilderOperation, def?: QueryBuilderOperationDef) => string;\n\nexport type QueryBuilderOnParamChangedHandler = (\n  index: number,\n  operation: QueryBuilderOperation,\n  operationDef: QueryBuilderOperationDef\n) => QueryBuilderOperation;\n\nexport type QueryBuilderOperationRenderer = (\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) => string;\n\nexport type QueryBuilderOperationParamValue = string | number | boolean;\n\nexport interface QueryBuilderOperationParamDef {\n  name: string;\n  type: 'string' | 'number' | 'boolean';\n  options?: string[] | number[] | Array<SelectableValue<string>>;\n  hideName?: boolean;\n  restParam?: boolean;\n  optional?: boolean;\n  placeholder?: string;\n  description?: string;\n  minWidth?: number;\n  editor?: ComponentType<QueryBuilderOperationParamEditorProps>;\n  runQueryOnEnter?: boolean;\n}\n\nexport interface QueryBuilderOperationEditorProps {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\nexport interface QueryBuilderOperationParamEditorProps {\n  value?: QueryBuilderOperationParamValue;\n  paramDef: QueryBuilderOperationParamDef;\n  /** Parameter index */\n  index: number;\n  operation: QueryBuilderOperation;\n  operationIndex: number;\n  query: any;\n  datasource: DataSourceApi;\n  onChange: (index: number, value: QueryBuilderOperationParamValue) => void;\n  onRunQuery: () => void;\n}\n\nexport enum QueryEditorMode {\n  Code = 'code',\n  Builder = 'builder',\n}\n\nexport interface VisualQueryModeller {\n  getOperationsForCategory(category: string): QueryBuilderOperationDef[];\n  getAlternativeOperations(key: string): QueryBuilderOperationDef[];\n  getCategories(): string[];\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined;\n}\n"],"names":["OperationExplainedBox","title","stepNumber","markdown","children","styles","useStyles2","getStyles","className","box","undefined","boxInner","header","body","dangerouslySetInnerHTML","__html","renderMarkdown","theme","css","background","colors","secondary","padding","spacing","borderRadius","shape","position","marginLeft","fontWeight","typography","fontWeightMedium","main","width","height","display","alignItems","justifyContent","top","left","fontSize","bodySmall","paddingBottom","fontFamily","fontFamilyMonospace","color","text","margin","a","link","textDecoration","OperationInfoButton","React","def","operation","show","setShow","useState","getTooltipProps","setTooltipRef","setTriggerRef","visible","usePopperTooltip","placement","offset","onVisibleChange","interactive","trigger","Button","ref","icon","size","variant","fill","Portal","docBox","docBoxHeader","renderer","FlexItem","grow","onClick","docBoxBody","getOperationDocs","displayName","overflow","primary","border","strong","boxShadow","shadows","z3","maxWidth","zIndex","tooltip","h5","marginBottom","signature","dropdown","opacity","op","explainHandler","documentation","OperationHeader","index","onChange","onRemove","queryModeller","dragHandleProps","state","setState","onToggleSwitcher","isOpen","alternatives","getAlternativeOperations","alternativesKey","map","alt","label","name","value","id","operationHeaderButtons","selectWrapper","Select","autoFocus","openMenuOnFocus","placeholder","options","onCloseMenu","newDef","getOperationDef","newParams","defaultParams","i","Math","min","params","length","type","changedOp","changeTypeHandler","borderBottom","medium","transition","transitions","create","duration","short","paddingRight","getOperationParamEditor","paramDef","editor","SelectInputParamEditor","BoolInputParamEditor","SimpleInputParamEditor","props","AutoSizeInput","getOperationParamId","operationIndex","defaultValue","toString","minWidth","description","onCommitChange","evt","currentTarget","runQueryOnEnter","onRunQuery","Checkbox","checked","selectOptions","option","valueOption","find","x","toOption","optional","optionalParam","Stack","gap","direction","wrap","allowCustomValue","marginTop","OperationEditor","query","datasource","flash","highlight","shouldFlash","keepFlash","setKeepFlash","useEffect","t","setTimeout","clearTimeout","useFlash","onParamValueChanged","paramIdx","update","callParamChangedThenOnChange","onAddRestParam","onRemoveRestParam","slice","operationElements","paramIndex","Editor","push","paramRow","hideName","paramName","htmlFor","Tooltip","content","Icon","infoIcon","paramValue","restParam","lastParamDef","renderAddRestParamButton","draggableId","provided","cx","card","cardHighlight","innerRef","draggableProps","operations","arrow","arrowLine","arrowArrow","paramChangedHandler","flexDirection","cursor","verticalAlign","right","backgroundColor","borderTop","borderLeft","OperationList","highlightedOp","opsToHighlight","isMounted","useMountedState","prevOperations","usePrevious","newOps","every","includes","newOp","op1","op2","useOperationsHighlight","cascaderOpen","setCascaderOpen","onOperationChange","updatedList","splice","addOptions","getCategories","category","items","getOperationsForCategory","isLeaf","onDragEnd","result","destination","element","source","droppableId","operationList","droppableProps","JSON","stringify","addButton","Cascader","onSelect","operationDef","addOperationHandler","onBlur","alwaysOpen","hideActiveLevelLabel","heading","flexWrap","OperationListExplained","lang","onMouseEnter","onMouseLeave","OperationsEditorRow","root","QueryBuilderHints","visualQuery","data","buildVisualQueryFromString","hints","setHints","expr","renderQuery","refId","getQueryHints","series","filter","hint","fix","action","container","newQuery","modifyQuery","newVisualQuery","toLowerCase","replace","editorModes","QueryEditorMode","QueryEditorModeToggle","mode","QueryHeaderSwitch","inputProps","dashedLabel","switchIdRef","useRef","uniqueId","current","switchLabel","QueryOptionGroup","collapsedInfo","toggleOpen","useToggle","toggle","emphasize","flexGrow","paddingLeft","paddingTop","marginRight","RawQuery","useTheme2","highlighted","Prism","grammar","editorField","promQueryEditorExplainKey","promQueryEditorRawQueryKey","lokiQueryEditorExplainKey","lokiQueryEditorRawQueryKey","getFlagValue","key","val","store","Boolean","parseInt","setFlagValue","useFlag","flag","updateFlag","setter","useCallback","setFlag"],"sourceRoot":""}