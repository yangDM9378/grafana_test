{"version":3,"file":"AlertingAdmin.e58d56682a63daad108d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useExternalAmSelector.ts","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagerDataSources.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagers.tsx","webpack://grafana/./public/app/features/alerting/unified/Admin.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\n\ninterface FormValues {\n  configJSON: string;\n}\n\nexport default function AlertmanagerConfig(): JSX.Element {\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n  const styles = useStyles2(getStyles);\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const {\n    result: config,\n    loading: isLoadingConfig,\n    error: loadingError,\n  } = (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName && config) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {loadingError && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager configuration\">\n          {loadingError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n          {({ register, errors }) => (\n            <>\n              {!readOnly && (\n                <Field\n                  disabled={loading}\n                  label=\"Configuration\"\n                  invalid={!!errors.configJSON}\n                  error={errors.configJSON?.message}\n                >\n                  <TextArea\n                    {...register('configJSON', {\n                      required: { value: true, message: 'Required.' },\n                      validate: (v) => {\n                        try {\n                          JSON.parse(v);\n                          return true;\n                        } catch (e) {\n                          return e instanceof Error ? e.message : 'Invalid JSON.';\n                        }\n                      },\n                    })}\n                    id=\"configuration\"\n                    rows={25}\n                  />\n                </Field>\n              )}\n              {readOnly && (\n                <Field label=\"Configuration\">\n                  <pre data-testid=\"readonly-config\">{defaultValues.configJSON}</pre>\n                </Field>\n              )}\n              {!readOnly && (\n                <HorizontalGroup>\n                  <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                    Save\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    disabled={loading}\n                    variant=\"destructive\"\n                    onClick={() => setShowConfirmDeleteAMConfig(true)}\n                  >\n                    Reset configuration\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!!showConfirmDeleteAMConfig && (\n                <ConfirmModal\n                  isOpen={true}\n                  title=\"Reset Alertmanager configuration\"\n                  body={`Are you sure you want to reset configuration ${\n                    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                      ? 'for the Grafana Alertmanager'\n                      : `for \"${alertManagerSourceName}\"`\n                  }? Contact points and notification policies will be reset to their defaults.`}\n                  confirmText=\"Yes, reset configuration\"\n                  onConfirm={resetConfig}\n                  onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n                />\n              )}\n            </>\n          )}\n        </Form>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { countBy, keyBy } from 'lodash';\n\nimport { DataSourceInstanceSettings, DataSourceJsonData, DataSourceSettings } from '@grafana/data';\nimport { AlertManagerDataSourceJsonData } from 'app/plugins/datasource/alertmanager/types';\nimport { useSelector } from 'app/types';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { getAlertManagerDataSources } from '../utils/datasource';\n\nexport interface ExternalDataSourceAM {\n  dataSource: DataSourceInstanceSettings<AlertManagerDataSourceJsonData>;\n  url?: string;\n  status: 'active' | 'pending' | 'dropped';\n  statusInconclusive?: boolean;\n}\n\nexport function useExternalDataSourceAlertmanagers(): ExternalDataSourceAM[] {\n  const { useGetExternalAlertmanagersQuery } = alertmanagerApi;\n  const { currentData: discoveredAlertmanagers } = useGetExternalAlertmanagersQuery();\n\n  const externalDsAlertManagers = getAlertManagerDataSources().filter((ds) => ds.jsonData.handleGrafanaManagedAlerts);\n\n  const alertmanagerDatasources = useSelector((state) =>\n    keyBy(\n      state.dataSources.dataSources.filter((ds) => ds.type === 'alertmanager'),\n      (ds) => ds.uid\n    )\n  );\n\n  const droppedAMUrls = countBy(discoveredAlertmanagers?.droppedAlertManagers, (x) => x.url);\n  const activeAMUrls = countBy(discoveredAlertmanagers?.activeAlertManagers, (x) => x.url);\n\n  return externalDsAlertManagers.map<ExternalDataSourceAM>((dsAm) => {\n    const dsSettings = alertmanagerDatasources[dsAm.uid];\n\n    if (!dsSettings) {\n      return {\n        dataSource: dsAm,\n        status: 'pending',\n      };\n    }\n\n    const amUrl = getDataSourceUrlWithProtocol(dsSettings);\n    const amStatusUrl = `${amUrl}/api/v2/alerts`;\n\n    const matchingDroppedUrls = droppedAMUrls[amStatusUrl] ?? 0;\n    const matchingActiveUrls = activeAMUrls[amStatusUrl] ?? 0;\n\n    const isDropped = matchingDroppedUrls > 0;\n    const isActive = matchingActiveUrls > 0;\n\n    // Multiple Alertmanagers of the same URL may exist (e.g. with different credentials)\n    // Alertmanager response only contains URLs, so in case of duplication, we are not able\n    // to distinguish which is which, resulting in an inconclusive status.\n    const isStatusInconclusive = matchingDroppedUrls + matchingActiveUrls > 1;\n\n    const status = isDropped ? 'dropped' : isActive ? 'active' : 'pending';\n\n    return {\n      dataSource: dsAm,\n      url: dsSettings.url,\n      status,\n      statusInconclusive: isStatusInconclusive,\n    };\n  });\n}\n\nfunction getDataSourceUrlWithProtocol<T extends DataSourceJsonData>(dsSettings: DataSourceSettings<T>) {\n  const hasProtocol = new RegExp('^[^:]*://').test(dsSettings.url);\n  if (!hasProtocol) {\n    return `http://${dsSettings.url}`; // Grafana append http protocol if there is no any\n  }\n\n  return dsSettings.url;\n}\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, CallToActionCard, Card, Icon, LinkButton, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { ExternalDataSourceAM } from '../../hooks/useExternalAmSelector';\nimport { makeDataSourceLink } from '../../utils/misc';\n\nexport interface ExternalAlertManagerDataSourcesProps {\n  alertmanagers: ExternalDataSourceAM[];\n  inactive: boolean;\n}\n\nexport function ExternalAlertmanagerDataSources({ alertmanagers, inactive }: ExternalAlertManagerDataSourcesProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h5>Alertmanagers Receiving Grafana-managed alerts</h5>\n      <div className={styles.muted}>\n        Alertmanager data sources support a configuration setting that allows you to choose to send Grafana-managed\n        alerts to that Alertmanager. <br />\n        Below, you can see the list of all Alertmanager data sources that have this setting enabled.\n      </div>\n      {alertmanagers.length === 0 && (\n        <CallToActionCard\n          message={\n            <div>\n              There are no Alertmanager data sources configured to receive Grafana-managed alerts. <br />\n              You can change this by selecting Receive Grafana Alerts in a data source configuration.\n            </div>\n          }\n          callToActionElement={<LinkButton href=\"/datasources\">Go to data sources</LinkButton>}\n          className={styles.externalDsCTA}\n        />\n      )}\n      {alertmanagers.length > 0 && (\n        <div className={styles.externalDs}>\n          {alertmanagers.map((am) => (\n            <ExternalAMdataSourceCard key={am.dataSource.uid} alertmanager={am} inactive={inactive} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n\ninterface ExternalAMdataSourceCardProps {\n  alertmanager: ExternalDataSourceAM;\n  inactive: boolean;\n}\n\nexport function ExternalAMdataSourceCard({ alertmanager, inactive }: ExternalAMdataSourceCardProps) {\n  const styles = useStyles2(getStyles);\n\n  const { dataSource, status, statusInconclusive, url } = alertmanager;\n\n  return (\n    <Card>\n      <Card.Heading className={styles.externalHeading}>\n        {dataSource.name}{' '}\n        {statusInconclusive && (\n          <Tooltip content=\"Multiple Alertmangers have the same URL configured. The state might be inconclusive.\">\n            <Icon name=\"exclamation-triangle\" size=\"md\" className={styles.externalWarningIcon} />\n          </Tooltip>\n        )}\n      </Card.Heading>\n      <Card.Figure>\n        <img\n          src=\"public/app/plugins/datasource/alertmanager/img/logo.svg\"\n          alt=\"\"\n          height=\"40px\"\n          width=\"40px\"\n          style={{ objectFit: 'contain' }}\n        />\n      </Card.Figure>\n      <Card.Tags>\n        {inactive ? (\n          <Badge\n            text=\"Inactive\"\n            color=\"red\"\n            tooltip=\"Grafana is configured to send alerts to the built-in internal Alertmanager only. External Alertmanagers do not receive any alerts.\"\n          />\n        ) : (\n          <Badge\n            text={capitalize(status)}\n            color={status === 'dropped' ? 'red' : status === 'active' ? 'green' : 'orange'}\n          />\n        )}\n      </Card.Tags>\n      <Card.Meta>{url}</Card.Meta>\n      <Card.Actions>\n        <LinkButton href={makeDataSourceLink(dataSource)} size=\"sm\" variant=\"secondary\">\n          Go to datasource\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  muted: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    line-height: ${theme.typography.bodySmall.lineHeight};\n    color: ${theme.colors.text.secondary};\n  `,\n  externalHeading: css`\n    justify-content: flex-start;\n  `,\n  externalWarningIcon: css`\n    margin: ${theme.spacing(0, 1)};\n    fill: ${theme.colors.warning.main};\n  `,\n  externalDs: css`\n    display: grid;\n    gap: ${theme.spacing(1)};\n    padding: ${theme.spacing(2, 0)};\n  `,\n  externalDsCTA: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Field, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { loadDataSources } from 'app/features/datasources/state/actions';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { useExternalDataSourceAlertmanagers } from '../../hooks/useExternalAmSelector';\n\nimport { ExternalAlertmanagerDataSources } from './ExternalAlertmanagerDataSources';\n\nconst alertmanagerChoices: Array<SelectableValue<AlertmanagerChoice>> = [\n  { value: AlertmanagerChoice.Internal, label: 'Only Internal' },\n  { value: AlertmanagerChoice.External, label: 'Only External' },\n  { value: AlertmanagerChoice.All, label: 'Both internal and external' },\n];\n\nexport const ExternalAlertmanagers = () => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const externalDsAlertManagers = useExternalDataSourceAlertmanagers();\n\n  const {\n    useSaveExternalAlertmanagersConfigMutation,\n    useGetExternalAlertmanagerConfigQuery,\n    useGetExternalAlertmanagersQuery,\n  } = alertmanagerApi;\n\n  const [saveExternalAlertManagers] = useSaveExternalAlertmanagersConfigMutation();\n  const { currentData: externalAlertmanagerConfig } = useGetExternalAlertmanagerConfigQuery();\n\n  // Just to refresh the status periodically\n  useGetExternalAlertmanagersQuery(undefined, { pollingInterval: 5000 });\n\n  const alertmanagersChoice = externalAlertmanagerConfig?.alertmanagersChoice;\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  const onChangeAlertmanagerChoice = (alertmanagersChoice: AlertmanagerChoice) => {\n    saveExternalAlertManagers({ alertmanagersChoice });\n  };\n\n  return (\n    <div>\n      <h4>External Alertmanagers</h4>\n      <Alert title=\"External Alertmanager changes\" severity=\"info\">\n        The way you configure external Alertmanagers has changed.\n        <br />\n        You can now use configured Alertmanager data sources as receivers of your Grafana-managed alerts.\n        <br />\n        For more information, refer to our documentation.\n      </Alert>\n\n      <div className={styles.amChoice}>\n        <Field\n          label=\"Send alerts to\"\n          description=\"Configures how the Grafana alert rule evaluation engine Alertmanager handles your alerts. Internal (Grafana built-in Alertmanager), External (All Alertmanagers configured below), or both.\"\n        >\n          <RadioButtonGroup\n            options={alertmanagerChoices}\n            value={alertmanagersChoice}\n            onChange={(value) => onChangeAlertmanagerChoice(value!)}\n          />\n        </Field>\n      </div>\n\n      <ExternalAlertmanagerDataSources\n        alertmanagers={externalDsAlertManagers}\n        inactive={alertmanagersChoice === AlertmanagerChoice.Internal}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  amChoice: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React from 'react';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport AlertmanagerConfig from './components/admin/AlertmanagerConfig';\nimport { ExternalAlertmanagers } from './components/admin/ExternalAlertmanagers';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\n\nexport default function Admin(): JSX.Element {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const isGrafanaAmSelected = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  return (\n    <AlertingPageWrapper pageId=\"alerting-admin\">\n      <AlertmanagerConfig test-id=\"admin-alertmanagerconfig\" />\n      {isGrafanaAmSelected && <ExternalAlertmanagers test-id=\"admin-externalalertmanagers\" />}\n    </AlertingPageWrapper>\n  );\n}\n","import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n  numExternalAlertmanagers: number;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoiceStatus: build.query<AlertmanagersChoiceResponse, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n"],"names":["AlertmanagerConfig","dispatch","useDispatch","alertManagers","useAlertManagersByPermission","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","showConfirmDeleteAMConfig","setShowConfirmDeleteAMConfig","useState","loading","isDeleting","useUnifiedAlertingSelector","state","deleteAMConfig","isSaving","saveAMConfig","readOnly","isVanillaPrometheusAlertManagerDataSource","styles","useStyles2","getStyles","configRequests","amConfigs","result","config","isLoadingConfig","error","loadingError","initialAsyncRequestState","useEffect","fetchAlertManagerConfigAction","resetConfig","deleteAlertManagerConfigAction","defaultValues","useMemo","configJSON","JSON","stringify","className","container","AlertManagerPicker","current","onChange","dataSources","Alert","severity","title","message","GRAFANA_RULES_SOURCE_NAME","Form","onSubmit","values","updateAlertManagerConfigAction","newConfig","parse","oldConfig","successMessage","refetch","register","errors","Field","disabled","label","invalid","TextArea","required","value","validate","v","e","Error","id","rows","Button","type","variant","onClick","ConfirmModal","isOpen","body","confirmText","onConfirm","onDismiss","theme","css","spacing","useExternalDataSourceAlertmanagers","useGetExternalAlertmanagersQuery","alertmanagerApi","currentData","discoveredAlertmanagers","externalDsAlertManagers","getAlertManagerDataSources","filter","ds","jsonData","handleGrafanaManagedAlerts","alertmanagerDatasources","useSelector","keyBy","uid","droppedAMUrls","countBy","droppedAlertManagers","x","url","activeAMUrls","activeAlertManagers","map","dsAm","dsSettings","dataSource","status","amUrl","RegExp","test","getDataSourceUrlWithProtocol","amStatusUrl","matchingDroppedUrls","matchingActiveUrls","isStatusInconclusive","statusInconclusive","ExternalAlertmanagerDataSources","alertmanagers","inactive","muted","length","CallToActionCard","callToActionElement","href","externalDsCTA","externalDs","am","ExternalAMdataSourceCard","alertmanager","Card","externalHeading","name","Tooltip","content","Icon","size","externalWarningIcon","src","alt","height","width","style","objectFit","Badge","text","color","tooltip","capitalize","makeDataSourceLink","typography","bodySmall","fontSize","lineHeight","colors","secondary","warning","main","alertmanagerChoices","AlertmanagerChoice","ExternalAlertmanagers","useSaveExternalAlertmanagersConfigMutation","useGetExternalAlertmanagerConfigQuery","saveExternalAlertManagers","externalAlertmanagerConfig","undefined","pollingInterval","alertmanagersChoice","loadDataSources","amChoice","description","RadioButtonGroup","options","onChangeAlertmanagerChoice","actions","table","Admin","isGrafanaAmSelected","AlertingPageWrapper","pageId","alertingApi","endpoints","build","getAlertmanagerChoiceStatus","query","providesTags","getExternalAlertmanagerConfig","getExternalAlertmanagers","transformResponse","response","data","saveExternalAlertmanagersConfig","mutation","method","invalidatesTags","children","pageNav","isLoading","navId","availableAlertManagers","queryParams","updateQueryParams","useQueryParams","isAlertManagerAvailable","useCallback","alertManagerName","includes","useIsAlertManagerAvailable","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","accessType","getAlertManagerDataSourcesByPermission"],"sourceRoot":""}