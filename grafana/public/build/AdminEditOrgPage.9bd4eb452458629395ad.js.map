{"version":3,"file":"AdminEditOrgPage.9bd4eb452458629395ad.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/AdminEditOrgPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { NavModelItem, UrlQueryValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, Legend, Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser, AccessControlAction } from 'app/types';\n\nimport UsersTable from '../users/UsersTable';\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\nconst getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId);\n};\n\nconst getOrgUsers = async (orgId: UrlQueryValue) => {\n  if (contextSrv.hasPermission(AccessControlAction.OrgUsersRead)) {\n    return await getBackendSrv().get(`/api/orgs/${orgId}/users`, accessControlQueryParam());\n  }\n  return [];\n};\n\nconst updateOrgUserRole = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  await getBackendSrv().patch('/api/orgs/' + orgId + '/users/' + orgUser.userId, orgUser);\n};\n\nconst removeOrgUser = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId + '/users/' + orgUser.userId);\n};\n\ninterface Props extends GrafanaRouteComponentProps<{ id: string }> {}\n\nexport default function AdminEditOrgPage({ match }: Props) {\n  const orgId = parseInt(match.params.id, 10);\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n  const canReadUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(() => getOrgUsers(orgId), []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers().then((res) => setUsers(res));\n  }, [fetchOrg, fetchOrgUsers]);\n\n  const updateOrgName = async (name: string) => {\n    return await getBackendSrv().put('/api/orgs/' + orgId, { ...orgState.value, name });\n  };\n\n  const renderMissingUserListRightsMessage = () => {\n    return (\n      <Alert severity=\"info\" title=\"Access denied\">\n        You do not have permission to see users in this organization. To update this organization, contact your server\n        administrator.\n      </Alert>\n    );\n  };\n\n  const pageNav: NavModelItem = {\n    text: orgState?.value?.name ?? '',\n    icon: 'shield',\n    breadcrumbs: [{ title: 'Orgs', url: 'admin/orgs' }],\n    subTitle: 'Manage settings and user roles for an organization.',\n  };\n\n  return (\n    <Page navId=\"global-orgs\" pageNav={pageNav} subTitle=\"Manage settings for this specific org.\">\n      <Page.Contents>\n        <>\n          <Legend>Edit organization</Legend>\n          {orgState.value && (\n            <Form\n              defaultValues={{ orgName: orgState.value.name }}\n              onSubmit={async (values: OrgNameDTO) => await updateOrgName(values.orgName)}\n            >\n              {({ register, errors }) => (\n                <>\n                  <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\" disabled={!canWriteOrg}>\n                    <Input {...register('orgName', { required: true })} id=\"org-name-input\" />\n                  </Field>\n                  <Button type=\"submit\" disabled={!canWriteOrg}>\n                    Update\n                  </Button>\n                </>\n              )}\n            </Form>\n          )}\n\n          <div\n            className={css`\n              margin-top: 20px;\n            `}\n          >\n            <Legend>Organization users</Legend>\n            {!canReadUsers && renderMissingUserListRightsMessage()}\n            {canReadUsers && !!users.length && (\n              <UsersTable\n                users={users}\n                orgId={orgId}\n                onRoleChange={(role, orgUser) => {\n                  updateOrgUserRole({ ...orgUser, role }, orgId);\n                  setUsers(\n                    users.map((user) => {\n                      if (orgUser.userId === user.userId) {\n                        return { ...orgUser, role };\n                      }\n                      return user;\n                    })\n                  );\n                  fetchOrgUsers();\n                }}\n                onRemoveUser={(orgUser) => {\n                  removeOrgUser(orgUser, orgId);\n                  setUsers(users.filter((user) => orgUser.userId !== user.userId));\n                  fetchOrgUsers();\n                }}\n              />\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n}\n","import React, { FC, useEffect, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = (props) => {\n  const { users, orgId, onRoleChange, onRemoveUser } = props;\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th />\n            <th>Login</th>\n            <th>Email</th>\n            <th>Name</th>\n            <th>Seen</th>\n            <th>Role</th>\n            <th style={{ width: '34px' }} />\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, index) => {\n            return (\n              <tr key={`${user.userId}-${index}`}>\n                <td className=\"width-2 text-center\">\n                  <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n                </td>\n                <td className=\"max-width-6\">\n                  <span className=\"ellipsis\" title={user.login}>\n                    {user.login}\n                  </span>\n                </td>\n\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.email}>\n                    {user.email}\n                  </span>\n                </td>\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.name}>\n                    {user.name}\n                  </span>\n                </td>\n                <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n                <td className=\"width-8\">\n                  {contextSrv.licensedAccessControlEnabled() ? (\n                    <UserRolePicker\n                      userId={user.userId}\n                      orgId={orgId}\n                      roleOptions={roleOptions}\n                      basicRole={user.role}\n                      onBasicRoleChange={(newRole) => onRoleChange(newRole, user)}\n                      basicRoleDisabled={!contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user)}\n                    />\n                  ) : (\n                    <OrgRolePicker\n                      aria-label=\"Role\"\n                      value={user.role}\n                      disabled={!contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user)}\n                      onChange={(newRole) => onRoleChange(newRole, user)}\n                    />\n                  )}\n                </td>\n\n                <td className=\"width-1 text-center\">\n                  {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n                </td>\n\n                {contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, user) && (\n                  <td className=\"text-right\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => {\n                        setUserToRemove(user);\n                      }}\n                      icon=\"times\"\n                      aria-label=\"Delete user\"\n                    />\n                  </td>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default UsersTable;\n"],"names":["AdminEditOrgPage","match","orgId","parseInt","params","id","canWriteOrg","contextSrv","AccessControlAction","canReadUsers","users","setUsers","useState","orgState","fetchOrg","useAsyncFn","async","getBackendSrv","get","getOrg","fetchOrgUsers","accessControlQueryParam","getOrgUsers","useEffect","then","res","pageNav","text","value","name","icon","breadcrumbs","title","url","subTitle","navId","defaultValues","orgName","onSubmit","put","updateOrgName","values","register","errors","label","invalid","error","disabled","I","required","type","className","css","severity","length","onRoleChange","role","orgUser","patch","userId","updateOrgUserRole","map","user","onRemoveUser","delete","removeOrgUser","filter","props","userToRemove","setUserToRemove","roleOptions","setRoleOptions","options","fetchRoleOptions","e","console","fetchOptions","style","width","index","src","avatarUrl","alt","login","email","lastSeenAtAge","basicRole","onBasicRoleChange","newRole","basicRoleDisabled","onChange","isDisabled","size","variant","onClick","Boolean","body","confirmText","onDismiss","isOpen","onConfirm"],"sourceRoot":""}