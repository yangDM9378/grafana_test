{"version":3,"file":"UserListAdminPage.49d76141bed4216db8bd.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/UserListAdminPage.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { ComponentType, useEffect, useMemo, memo } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Icon,\n  IconName,\n  LinkButton,\n  Pagination,\n  RadioButtonGroup,\n  Tooltip,\n  useStyles2,\n  FilterInput,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\n\nimport PageLoader from '../../core/components/PageLoader/PageLoader';\nimport { AccessControlAction, StoreState, Unit, UserDTO, UserFilter } from '../../types';\n\nimport { changeFilter, changePage, changeQuery, fetchUsers } from './state/actions';\n\nexport interface FilterProps {\n  filters: UserFilter[];\n  onChange: (filter: UserFilter) => void;\n  className?: string;\n}\nconst extraFilters: Array<ComponentType<FilterProps>> = [];\nexport const addExtraFilters = (filter: ComponentType<FilterProps>) => {\n  extraFilters.push(filter);\n};\n\nconst mapDispatchToProps = {\n  fetchUsers,\n  changeQuery,\n  changePage,\n  changeFilter,\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  users: state.userListAdmin.users,\n  query: state.userListAdmin.query,\n  showPaging: state.userListAdmin.showPaging,\n  totalPages: state.userListAdmin.totalPages,\n  page: state.userListAdmin.page,\n  filters: state.userListAdmin.filters,\n  isLoading: state.userListAdmin.isLoading,\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst UserListAdminPageUnConnected = ({\n  fetchUsers,\n  query,\n  changeQuery,\n  users,\n  showPaging,\n  totalPages,\n  page,\n  changePage,\n  changeFilter,\n  filters,\n  isLoading,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  const showLicensedRole = useMemo(() => users.some((user) => user.licensedRole), [users]);\n\n  return (\n    <Page navId=\"global-users\">\n      <Page.Contents>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              placeholder=\"Search user by login, email, or name.\"\n              autoFocus={true}\n              value={query}\n              onChange={changeQuery}\n            />\n            <RadioButtonGroup\n              options={[\n                { label: 'All users', value: false },\n                { label: 'Active last 30 days', value: true },\n              ]}\n              onChange={(value) => changeFilter({ name: 'activeLast30Days', value })}\n              value={filters.find((f) => f.name === 'activeLast30Days')?.value}\n              className={styles.filter}\n            />\n            {extraFilters.map((FilterComponent, index) => (\n              <FilterComponent key={index} filters={filters} onChange={changeFilter} className={styles.filter} />\n            ))}\n          </div>\n          {contextSrv.hasPermission(AccessControlAction.UsersCreate) && (\n            <LinkButton href=\"admin/users/create\" variant=\"primary\">\n              New user\n            </LinkButton>\n          )}\n        </div>\n        {isLoading ? (\n          <PageLoader />\n        ) : (\n          <>\n            <div className={cx(styles.table, 'admin-list-table')}>\n              <table className=\"filter-table form-inline filter-table--hover\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th>Login</th>\n                    <th>Email</th>\n                    <th>Name</th>\n                    <th>Belongs to</th>\n                    {showLicensedRole && (\n                      <th>\n                        Licensed role{' '}\n                        <Tooltip\n                          placement=\"top\"\n                          content={\n                            <>\n                              Licensed role is based on a user&apos;s Org role (i.e. Viewer, Editor, Admin) and their\n                              dashboard/folder permissions.{' '}\n                              <a\n                                className={styles.link}\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                                href={\n                                  'https://grafana.com/docs/grafana/next/enterprise/license/license-restrictions/#active-users-limit'\n                                }\n                              >\n                                Learn more\n                              </a>\n                            </>\n                          }\n                        >\n                          <Icon name=\"question-circle\" />\n                        </Tooltip>\n                      </th>\n                    )}\n                    <th>\n                      Last active&nbsp;\n                      <Tooltip placement=\"top\" content=\"Time since user was seen using Grafana\">\n                        <Icon name=\"question-circle\" />\n                      </Tooltip>\n                    </th>\n                    <th style={{ width: '1%' }}></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {users.map((user) => (\n                    <UserListItem user={user} showLicensedRole={showLicensedRole} key={user.id} />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            {showPaging && <Pagination numberOfPages={totalPages} currentPage={page} onNavigate={changePage} />}\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getUsersAriaLabel = (name: string) => {\n  return `Edit user's ${name} details`;\n};\n\ntype UserListItemProps = {\n  user: UserDTO;\n  showLicensedRole: boolean;\n};\n\nconst UserListItem = memo(({ user, showLicensedRole }: UserListItemProps) => {\n  const styles = useStyles2(getStyles);\n  const editUrl = `admin/users/edit/${user.id}`;\n\n  return (\n    <tr key={user.id}>\n      <td className=\"width-4 text-center link-td\">\n        <a href={editUrl} aria-label={`Edit user's ${user.name} details`}>\n          <img className=\"filter-table__avatar\" src={user.avatarUrl} alt={`Avatar for user ${user.name}`} />\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.login} aria-label={getUsersAriaLabel(user.name)}>\n          {user.login}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.email} aria-label={getUsersAriaLabel(user.name)}>\n          {user.email}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.name} aria-label={getUsersAriaLabel(user.name)}>\n          {user.name}\n        </a>\n      </td>\n\n      <td\n        className={styles.row}\n        title={\n          user.orgs?.length\n            ? `The user is a member of the following organizations: ${user.orgs.map((org) => org.name).join(',')}`\n            : undefined\n        }\n      >\n        <OrgUnits units={user.orgs} icon={'building'} />\n        {user.isAdmin && (\n          <a href={editUrl} aria-label={getUsersAriaLabel(user.name)}>\n            <Tooltip placement=\"top\" content=\"Grafana Admin\">\n              <Icon name=\"shield\" />\n            </Tooltip>\n          </a>\n        )}\n      </td>\n      {showLicensedRole && (\n        <td className={cx('link-td', styles.iconRow)}>\n          <a className=\"ellipsis\" href={editUrl} title={user.name} aria-label={getUsersAriaLabel(user.name)}>\n            {user.licensedRole === 'None' ? (\n              <span className={styles.disabled}>\n                Not assigned{' '}\n                <Tooltip placement=\"top\" content=\"A licensed role will be assigned when this user signs in\">\n                  <Icon name=\"question-circle\" />\n                </Tooltip>\n              </span>\n            ) : (\n              user.licensedRole\n            )}\n          </a>\n        </td>\n      )}\n      <td className=\"link-td\">\n        {user.lastSeenAtAge && (\n          <a\n            href={editUrl}\n            aria-label={`Last seen at ${user.lastSeenAtAge}. Follow to edit user's ${user.name} details.`}\n          >\n            {user.lastSeenAtAge === '10 years' ? <span className={styles.disabled}>Never</span> : user.lastSeenAtAge}\n          </a>\n        )}\n      </td>\n      <td className=\"text-right\">\n        {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n          <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n        )}\n      </td>\n      <td className=\"text-right\">\n        {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n      </td>\n    </tr>\n  );\n});\n\nUserListItem.displayName = 'UserListItem';\n\ntype OrgUnitProps = { units?: Unit[]; icon: IconName };\n\nconst OrgUnits = ({ units, icon }: OrgUnitProps) => {\n  const styles = useStyles2(getStyles);\n\n  if (!units?.length) {\n    return null;\n  }\n\n  return units.length > 1 ? (\n    <Tooltip\n      placement={'top'}\n      content={\n        <div className={styles.unitTooltip}>\n          {units?.map((unit) => (\n            <a\n              href={unit.url}\n              className={styles.link}\n              title={unit.name}\n              key={unit.name}\n              aria-label={`Edit ${unit.name}`}\n            >\n              {unit.name}\n            </a>\n          ))}\n        </div>\n      }\n    >\n      <div className={styles.unitItem}>\n        <Icon name={icon} /> <span>{units.length}</span>\n      </div>\n    </Tooltip>\n  ) : (\n    <a\n      href={units[0].url}\n      className={styles.unitItem}\n      title={units[0].name}\n      key={units[0].name}\n      aria-label={`Edit ${units[0].name}`}\n    >\n      <Icon name={icon} /> {units[0].name}\n    </a>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n  };\n};\n\nexport default connector(UserListAdminPageUnConnected);\n"],"names":["extraFilters","addExtraFilters","filter","push","mapDispatchToProps","fetchUsers","changeQuery","changePage","changeFilter","connector","connect","state","users","userListAdmin","query","showPaging","totalPages","page","filters","isLoading","getUsersAriaLabel","name","UserListItem","memo","user","showLicensedRole","styles","useStyles2","getStyles","editUrl","id","className","href","src","avatarUrl","alt","title","login","email","row","orgs","length","map","org","join","undefined","OrgUnits","units","icon","isAdmin","placement","content","cx","iconRow","licensedRole","disabled","lastSeenAtAge","Array","isArray","authLabels","label","removeIcon","count","isDisabled","displayName","unitTooltip","unit","url","link","unitItem","theme","table","css","spacing","colors","text","useEffect","useMemo","some","navId","placeholder","autoFocus","value","onChange","options","find","f","FilterComponent","index","contextSrv","AccessControlAction","variant","target","rel","style","width","numberOfPages","currentPage","onNavigate"],"sourceRoot":""}