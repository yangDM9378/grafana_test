{"version":3,"file":"AlertRuleListIndex.cc9bb6f41c46202b4a00.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/components/DeprecationNotice.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts","webpack://grafana/./public/app/features/explore/Time.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import React from 'react';\n\nimport { Modal, VerticalGroup } from '@grafana/ui';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { useCallback } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { Icon, Button, LinkButton, Card } from '@grafana/ui';\n\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text: string) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card>\n      <Card.Heading>{renderText(rule.name)}</Card.Heading>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import React, { FC } from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.legacyalerting.unifiedalertingpromo';\n\nconst DeprecationNotice: FC<{}> = () => (\n  <Alert severity=\"warning\" title=\"Grafana legacy alerting is going away soon\">\n    <p>\n      You are using Grafana legacy alerting, it has been deprecated and will be removed in the next major version of\n      Grafana.\n      <br />\n      We encourage you to upgrade to the new Grafana Alerting experience.\n    </p>\n    <p>\n      See{' '}\n      <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/difference-old-new/\">\n        What’s New with Grafana Alerting\n      </a>{' '}\n      to learn more about what&lsquo;s new or learn{' '}\n      <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/opt-in/\">\n        how to enable the new Grafana Alerting feature\n      </a>\n      .\n    </p>\n  </Alert>\n);\n\nexport { DeprecationNotice };\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, FilterInput, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AlertRule, StoreState } from 'app/types';\n\nimport { ShowModalReactEvent } from '../../types/events';\n\nimport { AlertHowToModal } from './AlertHowToModal';\nimport AlertRuleItem from './AlertRuleItem';\nimport { DeprecationNotice } from './components/DeprecationNotice';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { setSearchQuery } from './state/reducers';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navId=\"alert-list\">\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\" htmlFor=\"alert-state-filter\">\n                States\n              </label>\n\n              <div className=\"width-13\">\n                <Select\n                  inputId={'alert-state-filter'}\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <DeprecationNotice />\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification, createSuccessNotification } from 'app/core/copy/appNotification';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification created')));\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification updated')));\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React from 'react';\n\nimport { logInfo } from '@grafana/runtime';\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nimport { LogMessages } from '../../Analytics';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n        onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n  dsLink: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FC, useCallback, useState } from 'react';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { dispatch } from 'app/store/store';\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { updateRulesOrder } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { isAlertingRule, isRecordingRule } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ntype CombinedRuleWithUID = { uid: string } & CombinedRule;\n\nexport const ReorderCloudGroupModal: FC<ModalProps> = (props) => {\n  const { group, namespace, onClose } = props;\n  const [pending, setPending] = useState<boolean>(false);\n  const [rulesList, setRulesList] = useState<CombinedRule[]>(group.rules);\n\n  const styles = useStyles2(getStyles);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const sameIndex = result.destination.index === result.source.index;\n      if (sameIndex) {\n        return;\n      }\n\n      const newOrderedRules = reorder(rulesList, result.source.index, result.destination.index);\n      setRulesList(newOrderedRules); // optimistically update the new rules list\n\n      const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n      const rulerRules = compact(newOrderedRules.map((rule) => rule.rulerRule));\n\n      setPending(true);\n      dispatch(\n        updateRulesOrder({\n          namespaceName: namespace.name,\n          groupName: group.name,\n          rulesSourceName: rulesSourceName,\n          newRules: rulerRules,\n        })\n      )\n        .unwrap()\n        .finally(() => {\n          setPending(false);\n        });\n    },\n    [group.name, namespace.name, namespace.rulesSource, rulesList]\n  );\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: CombinedRuleWithUID[] = rulesList.map((rule) => ({\n    ...rule,\n    uid: String(hashRulerRule(rule.rulerRule!)), // TODO fix this coercion?\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"alert-list\"\n          mode=\"standard\"\n          renderClone={(provided, _snapshot, rubric) => (\n            <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n          )}\n        >\n          {(droppableProvided: DroppableProvided) => (\n            <div\n              ref={droppableProvided.innerRef}\n              className={cx(styles.listContainer, pending && styles.disabled)}\n              {...droppableProvided.droppableProps}\n            >\n              {rulesWithUID.map((rule, index) => (\n                <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={pending}>\n                  {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: CombinedRule;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isAlertingRule(rule.promRule) && <AlertStateTag state={rule.promRule.state} />}\n      {isRecordingRule(rule.promRule) && <Badge text={'Recording'} color={'blue'} />}\n      <div className={styles.listItemName}>{rule.name}</div>\n      <Icon name={'draggabledots'} />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader: FC<ModalHeaderProps> = ({ namespace, group }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    max-width: 640px;\n    max-height: 80%;\n    overflow: hidden;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    gap: ${theme.spacing()};\n\n    background: ${theme.colors.background.primary};\n    color: ${theme.colors.text.secondary};\n\n    border-bottom: solid 1px ${theme.colors.border.medium};\n    padding: ${theme.spacing(1)} ${theme.spacing(2)};\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &.isClone {\n      border: solid 1px ${theme.colors.primary.shade};\n    }\n  `,\n  listContainer: css`\n    user-select: none;\n    border: solid 1px ${theme.colors.border.medium};\n  `,\n  disabled: css`\n    opacity: 0.5;\n    pointer-events: none;\n  `,\n  listItemName: css`\n    flex: 1;\n\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n\n    gap: ${theme.spacing(1)};\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n  `,\n});\n\nexport function reorder<T>(rules: T[], startIndex: number, endIndex: number): T[] {\n  const result = Array.from(rules);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText = ({ children, status }: React.PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\n\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { logInfo } from '@grafana/runtime';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace, expandAll, viewMode }) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting =\n    hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"re-order rules\"\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n        }\n      }\n      if (folder?.canAdmin && isListView) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"manage permissions\"\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"re-order rules\"\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"re-order rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={namespace.name} />\n  ) : (\n    <RuleLocation namespace={namespace.name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>\n          {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n        </h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable\n          showSummaryColumn={true}\n          className={styles.rulesTable}\n          showGuidelines={true}\n          showNextEvaluationColumn={Boolean(group.interval)}\n          rules={group.rules}\n        />\n      )}\n      {isEditingGroup && <EditCloudGroupModal group={group} namespace={namespace} onClose={() => closeEditModal()} />}\n      {isReorderingGroup && (\n        <ReorderCloudGroupModal group={group} namespace={namespace} onClose={() => setIsReorderingGroup(false)} />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            Deleting this group will permanently remove the group\n            <br />\n            and {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            <br />\n            Are you sure you want to delete this group?\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  rotate90: css`\n    transform: rotate(90deg);\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles2(getStyles);\n\n  const dsConfigs = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () =>\n      rulesDataSources.filter(\n        (ds) => isAsyncRequestStatePending(promRules[ds.name]) || isAsyncRequestStatePending(dsConfigs[ds.name])\n      ),\n    [promRules, dsConfigs, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => promRules[ds.name]?.result?.length ?? 0 > 0);\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Mimir / Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size={24} className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams['view'] === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size={24} className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { FormEvent, useState } from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { DataSourcePicker, logInfo } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { LogMessages } from '../../Analytics';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString, ruleType } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles2(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const clearDataSource = () => {\n    setQueryParams({ dataSource: null });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    setQueryParams({ ruleType });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n      ruleType: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <Field className={styles.inputWidth} label=\"Search by data source\">\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          placeholder=\"All data sources\"\n          current={dataSource}\n          onChange={handleDataSourceChange}\n          onClear={clearDataSource}\n        />\n      </Field>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <Field\n            className={styles.rowChild}\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>Search by label</span>\n                  <Tooltip\n                    content={\n                      <div>\n                        Filter rules and alerts using label querying, ex:\n                        <code>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</code>\n                      </div>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n              data-testid=\"search-query-input\"\n            />\n          </Field>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>Rule type</Label>\n            <RadioButtonGroup\n              options={RuleTypeOptions}\n              value={ruleType as PromRuleType}\n              onChange={handleRuleTypeChange}\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={String(queryParams['view'] ?? ViewOptions[0].value)}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString || ruleType) && (\n          <div className={styles.flexRow}>\n            <Button\n              className={styles.clearButton}\n              fullWidth={false}\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={handleClearFiltersClick}\n            >\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      padding-bottom: ${theme.spacing(1)};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin: ${theme.spacing(0, 1, 0, 0)};\n    `,\n    clearButton: css`\n      margin-top: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleGroup, CombinedRuleNamespace, FilterState } from 'app/types/unified-alerting';\nimport { PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: FilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: FilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.ruleType && filters.ruleType !== rule.promRule?.type) {\n        return false;\n      }\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n        const matchers = parseMatchers(filters.queryString);\n\n        const doRuleLabelsMatchQuery = labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doesNameContainsQueryString || doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: FilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { logInfo } from '@grafana/runtime';\nimport { Button, LinkButton, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../types/unified-alerting';\n\nimport { LogMessages } from './Analytics';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { RuleStats } from './components/rules/RuleStats';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { useRulesAccess } from './utils/accessControlHooks';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { getAllRulesSourceNames } from './utils/datasource';\nimport { getFiltersFromUrlParams } from './utils/misc';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n    const [expandAll, setExpandAll] = useState(false);\n\n    const [queryParams] = useQueryParams();\n    const filters = getFiltersFromUrlParams(queryParams);\n    const filtersActive = Object.values(filters).some((filter) => filter !== undefined);\n\n    const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n\n    const promRequests = Object.entries(promRuleRequests);\n    const allPromLoaded = promRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n    const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n    // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n    const [_, fetchRules] = useAsyncFn(async () => {\n      if (!loading) {\n        await dispatch(fetchAllPromAndRulerRulesAction());\n      }\n    }, [loading]);\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n    }, [dispatch]);\n    useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n    // Show splash only when we loaded all of the data sources and none of them has alerts\n    const hasNoAlertRulesCreatedYet = allPromLoaded && allPromEmpty && promRequests.length > 0;\n\n    const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      // We don't want to show the Loading... indicator for the whole page.\n      // We show separate indicators for Grafana-managed and Cloud rules\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={false}>\n        <RuleListErrors />\n        <RulesFilter />\n        {!hasNoAlertRulesCreatedYet && (\n          <>\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && filtersActive && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              </div>\n              {(canCreateGrafanaRules || canCreateCloudRules) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                  onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {!hasNoAlertRulesCreatedYet && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default RuleList;\n","import React, { FC, useEffect, useMemo } from 'react';\n\nimport { logInfo } from '@grafana/runtime';\nimport { AccessControlAction } from 'app/types';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces, expandAll }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AccessControlAction.AlertingRuleRead]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AccessControlAction.AlertingRuleExternalRead]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n","import React, { FC } from 'react';\n\nimport { toDuration } from '@grafana/data';\n\nexport interface TimeProps {\n  timeInMs: number;\n  className?: string;\n  humanize?: boolean;\n}\n\nexport const Time: FC<TimeProps> = ({ timeInMs, className, humanize }) => {\n  return <span className={className}>{formatTime(timeInMs, humanize)}</span>;\n};\n\nconst formatTime = (timeInMs: number, humanize = false): string => {\n  const inSeconds = timeInMs / 1000;\n\n  if (!humanize) {\n    return `${inSeconds.toFixed(1)}s`;\n  }\n\n  const duration = toDuration(inSeconds, 'seconds');\n  const hours = duration.hours();\n  const minutes = duration.minutes();\n  const seconds = duration.seconds();\n\n  if (hours) {\n    return `${hours}h ${minutes}m ${seconds}s`;\n  }\n\n  if (minutes) {\n    return `${minutes}m ${seconds}s`;\n  }\n\n  return `${seconds}s`;\n};\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["AlertHowToModal","onDismiss","Modal","title","isOpen","onClickBackdrop","spacing","src","alt","rule","search","onTogglePause","ruleUrl","url","panelId","renderText","useCallback","text","highlightClassName","textToHighlight","searchWords","Card","name","Icon","size","stateIcon","className","stateClass","stateText","stateAge","info","Button","variant","icon","state","onClick","href","DeprecationNotice","Alert","severity","getSearchQuery","searchQuery","getAlertRuleItems","regex","RegExp","alertRules","items","filter","item","test","mapDispatchToProps","getAlertRulesAsync","setSearchQuery","togglePauseAlertRule","connector","connect","isLoading","AlertRuleListUnconnected","PureComponent","label","value","option","locationService","appEvents","ShowModalReactEvent","component","this","props","id","paused","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","async","getStateFilter","render","Page","navId","FilterInput","placeholder","onChange","onSearchQueryChange","htmlFor","Select","inputId","options","stateFilters","onStateFilterChanged","config","onOpenHowTo","map","dispatch","loadAlertRules","rules","getBackendSrv","get","loadedAlertRules","post","toString","createNotificationChannel","data","notifyApp","createSuccessNotification","error","isFetchError","createErrorNotification","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","sort","o1","o2","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","NoRulesSplash","canCreateGrafanaRules","canCreateCloudRules","useRulesAccess","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","logInfo","LogMessages","CallToActionCard","message","callToActionElement","RuleListErrors","expanded","setExpanded","useState","closed","setClosed","useLocalStorage","dataSourceConfigRequests","useUnifiedAlertingSelector","dataSources","promRuleRequests","promRules","rulerRuleRequests","rulerRules","styles","useStyles2","getStyles","errors","useMemo","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","getRulesDataSources","reduce","result","dataSource","isRulerNotSupportedResponse","grafanaPromError","GRAFANA_RULES_SOURCE_NAME","grafanaRulerError","push","forEach","makeDataSourceLink","dsLink","length","ErrorSummaryButton","count","onRemove","idx","moreButton","fill","pluralize","floatRight","Tooltip","content","placement","theme","css","typography","fontWeightBold","ReorderCloudGroupModal","group","namespace","onClose","pending","setPending","rulesList","setRulesList","onDragEnd","destination","index","source","newOrderedRules","startIndex","endIndex","Array","from","removed","splice","reorder","rulesSourceName","getRulesSourceName","rulesSource","compact","rulerRule","updateRulesOrder","namespaceName","groupName","newRules","unwrap","finally","rulesWithUID","uid","String","hashRulerRule","modal","ModalHeader","droppableId","mode","renderClone","provided","_snapshot","rubric","ListItem","isClone","droppableProvided","ref","innerRef","cx","listContainer","disabled","droppableProps","draggableId","isDragDisabled","isDragging","listItem","draggableProps","dragHandleProps","isAlertingRule","promRule","AlertStateTag","isRecordingRule","Badge","color","listItemName","header","isCloudRulesSource","meta","dataSourceIcon","logos","small","colors","background","primary","secondary","border","medium","shade","StateColoredText","children","status","PromAlertingRuleState","success","warning","neutral","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","stats","calcRule","health","isRecordingRulerRule","groups","statsComponents","prev","curr","Fragment","RulesGroup","React","expandAll","viewMode","useDispatch","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isCollapsed","setIsCollapsed","canEditRules","useEffect","hasRuler","rulerRulesLoaded","useHasRuler","folderUID","isGrafanaRulerRule","grafana_alert","namespace_uid","undefined","folder","useFolder","isDeleting","find","isFederated","isFederatedRuleGroup","isProvisioned","some","provenance","isListView","isGroupView","actionIcons","Spinner","baseUrl","makeFolderLink","canSave","ActionIcon","A","tooltip","rotate90","to","target","canAdmin","RuleLocation","wrapper","CollapseToggle","collapseToggle","onToggle","heading","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","showNextEvaluationColumn","Boolean","interval","closeEditModal","ConfirmModal","body","onConfirm","deleteRulesGroupAction","confirmText","displayName","breakpoints","down","dataSourceOrigin","useCombinedGroupNamespace","flatMap","ns","g","CloudRules","dsConfigs","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","isAsyncRequestStatePending","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","DEFAULT_PER_PAGE_PAGINATION","sectionHeader","LoadingPlaceholder","loader","getRulesSourceUid","spinner","Pagination","pagination","currentPage","onNavigate","hideWhenSinglePage","getPaginationStyles","GrafanaRules","useQueryParams","prom","ruler","initialAsyncRequestState","loading","hasResult","wantsListView","namespacesFormat","flattenGrafanaManagedRules","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","alertStateToReadable","showGroupColumn","ViewOptions","RuleTypeOptions","PromRuleType","container","inputWidth","flexRow","spaceBetween","rowChild","clearButton","setQueryParams","filterKey","setFilterKey","Math","floor","random","dataSourceKey","queryStringKey","alertState","queryString","ruleType","getFiltersFromUrlParams","stateOptions","Object","entries","key","handleQueryStringChange","debounce","e","searchIcon","Field","DataSourcePicker","alerting","noDefault","current","dataSourceValue","onClear","Label","Stack","gap","Input","I","prefix","defaultValue","RadioButtonGroup","view","fullWidth","setTimeout","reduceNamespaces","filters","namespaceAcc","reduceGroups","groupAcc","type","isQueryingDataSource","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","matchers","parseMatchers","doRuleLabelsMatchQuery","labelsMatchMatchers","labels","doAlertsContainMatchingLabels","alerts","alert","query","datasourceUid","getDataSourceSrv","getInstanceSettings","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","a","b","localeCompare","isGrafanaRulesSource","Authorize","actions","AccessControlAction","groupedRules","values","RuleList","withErrorBoundary","rulesDataSourceNames","getAllRulesSourceNames","location","useLocation","setExpandAll","filtersActive","ViewComponent","promRequests","allPromLoaded","every","_","dispatched","allPromEmpty","useAsyncFn","fetchAllPromAndRulerRulesAction","useInterval","RULE_LIST_POLL_INTERVAL_MS","hasNoAlertRulesCreatedYet","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","break","buttonsContainer","statsContainer","expandAllButton","urlUtil","returnTo","pathname","style","pageNav","fallback","action","contextSrv","tooltipPlacement","rest","ariaLabel","getRulesAccess","Time","timeInMs","humanize","formatTime","inSeconds","toFixed","duration","toDuration","hours","minutes","seconds","callback","delay","savedCallback","useRef","interval_1","setInterval","clearInterval"],"sourceRoot":""}