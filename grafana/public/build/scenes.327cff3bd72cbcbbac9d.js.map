{"version":3,"file":"scenes.327cff3bd72cbcbbac9d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/scenes/SceneListPage.tsx","webpack://grafana/./public/app/features/scenes/ScenePage.tsx","webpack://grafana/./public/app/features/scenes/variables/sceneTemplateInterpolator.ts","webpack://grafana/./public/app/features/scenes/editor/SceneComponentEditWrapper.tsx","webpack://grafana/./public/app/features/scenes/core/SceneComponentWrapper.tsx","webpack://grafana/./public/app/features/scenes/core/events.ts","webpack://grafana/./public/app/features/scenes/core/utils.ts","webpack://grafana/./public/app/features/scenes/core/SceneObjectBase.tsx","webpack://grafana/./public/app/features/scenes/services/UrlSyncManager.ts","webpack://grafana/./public/app/features/scenes/components/Scene.tsx","webpack://grafana/./public/app/features/scenes/variables/VariableDependencyConfig.ts","webpack://grafana/./public/app/features/scenes/components/SceneCanvasText.tsx","webpack://grafana/./public/app/features/scenes/core/SceneDataNode.ts","webpack://grafana/./public/app/features/scenes/components/ScenePanelRepeater.tsx","webpack://grafana/./public/app/features/scenes/components/SceneTimePicker.tsx","webpack://grafana/./public/app/features/scenes/components/SceneToolbarButton.tsx","webpack://grafana/./public/app/features/scenes/components/SceneDragHandle.tsx","webpack://grafana/./public/app/features/scenes/components/VizPanel.tsx","webpack://grafana/./public/app/features/scenes/components/layout/SceneFlexLayout.tsx","webpack://grafana/./public/app/features/scenes/core/SceneTimeRange.tsx","webpack://grafana/./public/app/features/scenes/editor/SceneObjectEditor.tsx","webpack://grafana/./public/app/features/scenes/core/types.ts","webpack://grafana/./public/app/features/scenes/editor/SceneObjectTree.tsx","webpack://grafana/./public/app/features/scenes/editor/SceneEditManager.tsx","webpack://grafana/./public/app/features/scenes/querying/SceneQueryRunner.ts","webpack://grafana/./public/app/features/scenes/scenes/queries.ts","webpack://grafana/./public/app/features/scenes/scenes/demo.tsx","webpack://grafana/./public/app/features/scenes/components/layout/SceneGridLayout.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridMultiTimeRange.tsx","webpack://grafana/./public/app/features/scenes/components/NestedScene.tsx","webpack://grafana/./public/app/features/scenes/components/SceneSubMenu.tsx","webpack://grafana/./public/app/features/scenes/variables/components/VariableValueSelectors.tsx","webpack://grafana/./public/app/features/scenes/variables/types.ts","webpack://grafana/./public/app/features/scenes/variables/sets/SceneVariableSet.ts","webpack://grafana/./public/app/features/scenes/variables/components/VariableValueSelect.tsx","webpack://grafana/./public/app/features/scenes/variables/variants/MultiValueVariable.ts","webpack://grafana/./public/app/features/scenes/variables/variants/TestVariable.tsx","webpack://grafana/./public/app/features/scenes/scenes/index.tsx","webpack://grafana/./public/app/features/scenes/scenes/nested.tsx","webpack://grafana/./public/app/features/scenes/scenes/sceneWithRows.tsx","webpack://grafana/./public/app/features/scenes/scenes/grid.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridWithRow.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridWithMultipleData.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridMultiple.tsx","webpack://grafana/./public/app/features/scenes/scenes/variablesDemo.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/metricTree.ts"],"sourcesContent":["// Libraries\nimport React, { FC } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Card } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\n// Types\nimport { getScenes } from './scenes';\n\nexport interface Props {}\n\nexport const SceneListPage: FC<Props> = ({}) => {\n  const scenes = getScenes();\n\n  return (\n    <Page navId=\"scenes\">\n      <Page.Contents>\n        <Stack direction=\"column\">\n          {scenes.map((scene) => (\n            <Card href={`/scenes/${scene.state.title}`} key={scene.state.title}>\n              <Card.Heading>{scene.state.title}</Card.Heading>\n            </Card>\n          ))}\n        </Stack>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SceneListPage;\n","// Libraries\nimport React, { FC } from 'react';\n\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getSceneByTitle } from './scenes';\n\nexport interface Props extends GrafanaRouteComponentProps<{ name: string }> {}\n\nexport const ScenePage: FC<Props> = (props) => {\n  const scene = getSceneByTitle(props.match.params.name);\n\n  if (!scene) {\n    return <h2>Scene not found</h2>;\n  }\n\n  return <scene.Component model={scene} />;\n};\n\nexport default ScenePage;\n","import { isArray } from 'lodash';\n\nimport { variableRegex } from 'app/features/variables/utils';\n\nimport { SceneObject } from '../core/types';\n\nimport { SceneVariable } from './types';\n\nexport function sceneTemplateInterpolator(target: string, sceneObject: SceneObject) {\n  // Skip any interpolation if there are no variables in the scene object graph\n  if (!sceneObject.getVariables()) {\n    return target;\n  }\n\n  variableRegex.lastIndex = 0;\n\n  return target.replace(variableRegex, (match, var1, var2, fmt2, var3, fieldPath, fmt3) => {\n    const variableName = var1 || var2 || var3;\n    const variable = lookupSceneVariable(variableName, sceneObject);\n\n    if (!variable) {\n      return match;\n    }\n\n    const value = variable.getValue(fieldPath);\n\n    if (isArray(value)) {\n      return 'not supported yet';\n    }\n\n    return String(value);\n  });\n}\n\nfunction lookupSceneVariable(name: string, sceneObject: SceneObject): SceneVariable | null | undefined {\n  const variables = sceneObject.state.$variables;\n  if (!variables) {\n    if (sceneObject.parent) {\n      return lookupSceneVariable(name, sceneObject.parent);\n    } else {\n      return null;\n    }\n  }\n\n  const found = variables.getByName(name);\n  if (found) {\n    return found;\n  } else if (sceneObject.parent) {\n    return lookupSceneVariable(name, sceneObject.parent);\n  }\n\n  return null;\n}\n","import { css } from '@emotion/css';\nimport React, { CSSProperties } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SceneObject } from '../core/types';\n\nexport function SceneComponentEditingWrapper<T extends SceneObject>({\n  model,\n  children,\n}: {\n  model: T;\n  children: React.ReactNode;\n}) {\n  const styles = useStyles2(getStyles);\n  const editor = model.getSceneEditor();\n  const { hoverObject, selectedObject } = editor.useState();\n\n  const onMouseEnter = () => editor.onMouseEnterObject(model);\n  const onMouseLeave = () => editor.onMouseLeaveObject(model);\n\n  const onClick = (evt: React.MouseEvent) => {\n    evt.stopPropagation();\n    editor.onSelectObject(model);\n  };\n\n  const style: CSSProperties = {};\n  let className = styles.wrapper;\n\n  if (hoverObject?.ref === model) {\n    className += ' ' + styles.hover;\n  }\n  if (selectedObject?.ref === model) {\n    className += ' ' + styles.selected;\n  }\n\n  return (\n    <div style={style} className={className} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} onClick={onClick}>\n      {children}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      flexGrow: 1,\n      padding: 8,\n      border: `1px dashed ${theme.colors.primary.main}`,\n      cursor: 'pointer',\n    }),\n    hover: css({\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    selected: css({\n      border: `1px solid ${theme.colors.error.border}`,\n    }),\n  };\n};\n","import React, { useEffect } from 'react';\n\nimport { SceneComponentEditingWrapper } from '../editor/SceneComponentEditWrapper';\n\nimport { SceneComponentProps, SceneObject } from './types';\n\nexport function SceneComponentWrapper<T extends SceneObject>({\n  model,\n  isEditing,\n  ...otherProps\n}: SceneComponentProps<T>) {\n  const Component = (model as any).constructor['Component'] ?? EmptyRenderer;\n  const inner = <Component {...otherProps} model={model} isEditing={isEditing} />;\n\n  // Handle component activation state state\n  useEffect(() => {\n    if (!model.isActive) {\n      model.activate();\n    }\n    return () => {\n      if (model.isActive) {\n        model.deactivate();\n      }\n    };\n  }, [model]);\n\n  /** Useful for tests and evaluating efficiency in reducing renderings */\n  // @ts-ignore\n  model._renderCount += 1;\n\n  if (!isEditing) {\n    return inner;\n  }\n\n  return <SceneComponentEditingWrapper model={model}>{inner}</SceneComponentEditingWrapper>;\n}\n\nfunction EmptyRenderer<T>(_: SceneComponentProps<T>): React.ReactElement | null {\n  return null;\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { SceneObject, SceneObjectState, SceneObjectWithUrlSync } from './types';\n\nexport interface SceneObjectStateChangedPayload {\n  prevState: SceneObjectState;\n  newState: SceneObjectState;\n  partialUpdate: Partial<SceneObjectState>;\n  changedObject: SceneObject | SceneObjectWithUrlSync;\n}\n\nexport class SceneObjectStateChangedEvent extends BusEventWithPayload<SceneObjectStateChangedPayload> {\n  public static readonly type = 'scene-object-state-change';\n}\n","import { SceneObjectBase } from './SceneObjectBase';\nimport { SceneObjectState, SceneObjectStatePlain } from './types';\n\n/**\n * Will call callback for all first level child scene objects and scene objects inside arrays\n */\nexport function forEachSceneObjectInState(state: SceneObjectStatePlain, callback: (scene: SceneObjectBase) => void) {\n  for (const propValue of Object.values(state)) {\n    if (propValue instanceof SceneObjectBase) {\n      callback(propValue);\n    }\n\n    if (Array.isArray(propValue)) {\n      for (const child of propValue) {\n        if (child instanceof SceneObjectBase) {\n          callback(child);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Will create new SceneItem with shalled cloned state, but all states items of type SceneObject are deep cloned\n */\nexport function cloneSceneObject<T extends SceneObjectBase<TState>, TState extends SceneObjectState>(\n  sceneObject: SceneObjectBase<TState>,\n  withState?: Partial<TState>\n): T {\n  const clonedState = { ...sceneObject.state };\n\n  // Clone any SceneItems in state\n  for (const key in clonedState) {\n    const propValue = clonedState[key];\n    if (propValue instanceof SceneObjectBase) {\n      clonedState[key] = propValue.clone();\n    }\n\n    // Clone scene objects in arrays\n    if (Array.isArray(propValue)) {\n      const newArray: any = [];\n      for (const child of propValue) {\n        if (child instanceof SceneObjectBase) {\n          newArray.push(child.clone());\n        } else {\n          newArray.push(child);\n        }\n      }\n      clonedState[key] = newArray;\n    }\n  }\n\n  Object.assign(clonedState, withState);\n\n  return new (sceneObject.constructor as any)(clonedState);\n}\n","import { useEffect } from 'react';\nimport { Observer, Subject, Subscription, Unsubscribable } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { BusEvent, BusEventHandler, BusEventType, EventBusSrv } from '@grafana/data';\nimport { useForceUpdate } from '@grafana/ui';\n\nimport { sceneTemplateInterpolator } from '../variables/sceneTemplateInterpolator';\nimport { SceneVariables, SceneVariableDependencyConfigLike } from '../variables/types';\n\nimport { SceneComponentWrapper } from './SceneComponentWrapper';\nimport { SceneObjectStateChangedEvent } from './events';\nimport {\n  SceneDataState,\n  SceneObject,\n  SceneComponent,\n  SceneEditor,\n  SceneTimeRange,\n  SceneObjectState,\n  SceneLayoutState,\n} from './types';\nimport { cloneSceneObject, forEachSceneObjectInState } from './utils';\n\nexport abstract class SceneObjectBase<TState extends SceneObjectState = SceneObjectState>\n  implements SceneObject<TState>\n{\n  private _isActive = false;\n  private _subject = new Subject<TState>();\n  private _state: TState;\n  private _events = new EventBusSrv();\n\n  /** Incremented in SceneComponentWrapper, useful for tests and rendering optimizations */\n  protected _renderCount = 0;\n  protected _parent?: SceneObject;\n  protected _subs = new Subscription();\n\n  protected _variableDependency: SceneVariableDependencyConfigLike | undefined;\n\n  public constructor(state: TState) {\n    if (!state.key) {\n      state.key = uuidv4();\n    }\n\n    this._state = state;\n    this._subject.next(state);\n    this.setParent();\n  }\n\n  /** Current state */\n  public get state(): TState {\n    return this._state;\n  }\n\n  /** True if currently being active (ie displayed for visual objects) */\n  public get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /** Returns the parent, undefined for root object */\n  public get parent(): SceneObject | undefined {\n    return this._parent;\n  }\n\n  /** Returns variable dependency config */\n  public get variableDependency(): SceneVariableDependencyConfigLike | undefined {\n    return this._variableDependency;\n  }\n\n  /**\n   * Used in render functions when rendering a SceneObject.\n   * Wraps the component in an EditWrapper that handles edit mode\n   */\n  public get Component(): SceneComponent<this> {\n    return SceneComponentWrapper;\n  }\n\n  /**\n   * Temporary solution, should be replaced by declarative options\n   */\n  public get Editor(): SceneComponent<this> {\n    return ((this as any).constructor['Editor'] ?? (() => null)) as SceneComponent<this>;\n  }\n\n  private setParent() {\n    forEachSceneObjectInState(this._state, (child) => (child._parent = this));\n  }\n\n  /**\n   * Subscribe to the scene state subject\n   **/\n  public subscribeToState(observerOrNext?: Partial<Observer<TState>>): Subscription {\n    return this._subject.subscribe(observerOrNext);\n  }\n\n  /**\n   * Subscribe to the scene event\n   **/\n  public subscribeToEvent<T extends BusEvent>(eventType: BusEventType<T>, handler: BusEventHandler<T>): Unsubscribable {\n    return this._events.subscribe(eventType, handler);\n  }\n\n  public setState(update: Partial<TState>) {\n    const prevState = this._state;\n    this._state = {\n      ...this._state,\n      ...update,\n    };\n\n    this.setParent();\n    this._subject.next(this._state);\n\n    // Bubble state change event. This is event is subscribed to by UrlSyncManager and UndoManager\n    this.publishEvent(\n      new SceneObjectStateChangedEvent({\n        prevState,\n        newState: this._state,\n        partialUpdate: update,\n        changedObject: this,\n      }),\n      true\n    );\n  }\n  /*\n   * Publish an event and optionally bubble it up the scene\n   **/\n  public publishEvent(event: BusEvent, bubble?: boolean) {\n    this._events.publish(event);\n\n    if (bubble && this.parent) {\n      this.parent.publishEvent(event, bubble);\n    }\n  }\n\n  public getRoot(): SceneObject {\n    return !this._parent ? this : this._parent.getRoot();\n  }\n\n  /**\n   * Called by the SceneComponentWrapper when the react component is mounted\n   */\n  public activate() {\n    this._isActive = true;\n\n    const { $data, $variables } = this.state;\n\n    if ($data && !$data.isActive) {\n      $data.activate();\n    }\n\n    if ($variables && !$variables.isActive) {\n      $variables.activate();\n    }\n  }\n\n  /**\n   * Called by the SceneComponentWrapper when the react component is unmounted\n   */\n  public deactivate(): void {\n    this._isActive = false;\n\n    const { $data, $variables } = this.state;\n\n    if ($data && $data.isActive) {\n      $data.deactivate();\n    }\n\n    if ($variables && $variables.isActive) {\n      $variables.deactivate();\n    }\n\n    // Clear subscriptions and listeners\n    this._events.removeAllListeners();\n    this._subs.unsubscribe();\n    this._subs = new Subscription();\n\n    this._subject.complete();\n    this._subject = new Subject<TState>();\n  }\n\n  /**\n   * Utility hook to get and subscribe to state\n   */\n  public useState() {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSceneObjectState(this);\n  }\n\n  /**\n   * Will walk up the scene object graph to the closest $timeRange scene object\n   */\n  public getTimeRange(): SceneTimeRange {\n    const { $timeRange } = this.state;\n    if ($timeRange) {\n      return $timeRange;\n    }\n\n    if (this.parent) {\n      return this.parent.getTimeRange();\n    }\n\n    throw new Error('No time range found in scene tree');\n  }\n\n  /**\n   * Will walk up the scene object graph to the closest $data scene object\n   */\n  public getData(): SceneObject<SceneDataState> {\n    const { $data } = this.state;\n    if ($data) {\n      return $data;\n    }\n\n    if (this.parent) {\n      return this.parent.getData();\n    }\n\n    throw new Error('No data found in scene tree');\n  }\n\n  public getVariables(): SceneVariables | undefined {\n    if (this.state.$variables) {\n      return this.state.$variables;\n    }\n\n    if (this.parent) {\n      return this.parent.getVariables();\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Will walk up the scene object graph to the closest $layout scene object\n   */\n  public getLayout(): SceneObject<SceneLayoutState> {\n    if (this.constructor.name === 'SceneFlexLayout' || this.constructor.name === 'SceneGridLayout') {\n      return this as SceneObject<SceneLayoutState>;\n    }\n\n    if (this.parent) {\n      return this.parent.getLayout();\n    }\n\n    throw new Error('No layout found in scene tree');\n  }\n\n  /**\n   * Will walk up the scene object graph to the closest $editor scene object\n   */\n  public getSceneEditor(): SceneEditor {\n    const { $editor } = this.state;\n    if ($editor) {\n      return $editor;\n    }\n\n    if (this.parent) {\n      return this.parent.getSceneEditor();\n    }\n\n    throw new Error('No editor found in scene tree');\n  }\n\n  /** Force a re-render, should only be needed when variable values change */\n  public forceRender(): void {\n    this.setState({});\n  }\n\n  /**\n   * Will create new SceneObject with shallow-cloned state, but all state items of type SceneObject are deep cloned\n   */\n  public clone(withState?: Partial<TState>): this {\n    return cloneSceneObject(this, withState);\n  }\n\n  /**\n   * Interpolates the given string using the current scene object as context.\n   * TODO: Cache interpolatinos?\n   */\n  public interpolate(value: string | undefined) {\n    // Skip interpolation if there are no variable depdendencies\n    if (!value || !this._variableDependency || this._variableDependency.getNames().size === 0) {\n      return value;\n    }\n\n    return sceneTemplateInterpolator(value, this);\n  }\n}\n\n/**\n * This hook is always returning model.state instead of a useState that remembers the last state emitted on the subject\n * The reason for this is so that if the model instance change this function will always return the latest state.\n */\nfunction useSceneObjectState<TState extends SceneObjectState>(model: SceneObjectBase<TState>): TState {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    const s = model.subscribeToState({ next: forceUpdate });\n    return () => s.unsubscribe();\n  }, [model, forceUpdate]);\n\n  return model.state;\n}\n","import { Location } from 'history';\nimport { Unsubscribable } from 'rxjs';\n\nimport { locationService } from '@grafana/runtime';\n\nimport { SceneObjectStateChangedEvent } from '../core/events';\nimport { SceneObject } from '../core/types';\n\nexport class UrlSyncManager {\n  private locationListenerUnsub: () => void;\n  private stateChangeSub: Unsubscribable;\n\n  public constructor(sceneRoot: SceneObject) {\n    this.stateChangeSub = sceneRoot.subscribeToEvent(SceneObjectStateChangedEvent, this.onStateChanged);\n    this.locationListenerUnsub = locationService.getHistory().listen(this.onLocationUpdate);\n  }\n\n  private onLocationUpdate = (location: Location) => {\n    // TODO: find any scene object whose state we need to update\n  };\n\n  private onStateChanged = ({ payload }: SceneObjectStateChangedEvent) => {\n    const changedObject = payload.changedObject;\n\n    if ('getUrlState' in changedObject) {\n      const urlUpdate = changedObject.getUrlState();\n      locationService.partial(urlUpdate, true);\n    }\n  };\n\n  public cleanUp() {\n    this.stateChangeSub.unsubscribe();\n    this.locationListenerUnsub();\n  }\n}\n","import React from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { PageToolbar, ToolbarButton } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectStatePlain, SceneObject } from '../core/types';\nimport { UrlSyncManager } from '../services/UrlSyncManager';\n\ninterface SceneState extends SceneObjectStatePlain {\n  title: string;\n  layout: SceneObject;\n  actions?: SceneObject[];\n  subMenu?: SceneObject;\n  isEditing?: boolean;\n}\n\nexport class Scene extends SceneObjectBase<SceneState> {\n  public static Component = SceneRenderer;\n  private urlSyncManager?: UrlSyncManager;\n\n  public activate() {\n    super.activate();\n    this.urlSyncManager = new UrlSyncManager(this);\n  }\n\n  public deactivate() {\n    super.deactivate();\n    this.urlSyncManager!.cleanUp();\n  }\n}\n\nfunction SceneRenderer({ model }: SceneComponentProps<Scene>) {\n  const { title, layout, actions = [], isEditing, $editor, subMenu } = model.useState();\n\n  const toolbarActions = (actions ?? []).map((action) => <action.Component key={action.state.key} model={action} />);\n\n  if ($editor) {\n    toolbarActions.push(\n      <ToolbarButton\n        icon=\"cog\"\n        variant={isEditing ? 'primary' : 'default'}\n        onClick={() => model.setState({ isEditing: !model.state.isEditing })}\n      />\n    );\n  }\n\n  const pageToolbar = config.featureToggles.topnav ? (\n    <AppChromeUpdate actions={toolbarActions} />\n  ) : (\n    <PageToolbar title={title}>{toolbarActions}</PageToolbar>\n  );\n\n  return (\n    <Page navId=\"scenes\" pageNav={{ text: title }} layout={PageLayoutType.Canvas} toolbar={pageToolbar}>\n      <div style={{ flexGrow: 1, display: 'flex', flexDirection: 'column', gap: '8px' }}>\n        {subMenu && <subMenu.Component model={subMenu} />}\n        <div style={{ flexGrow: 1, display: 'flex', gap: '8px', overflow: 'auto' }}>\n          <layout.Component model={layout} isEditing={isEditing} />\n          {$editor && <$editor.Component model={$editor} isEditing={isEditing} />}\n        </div>\n      </div>\n    </Page>\n  );\n}\n","import { variableRegex } from 'app/features/variables/utils';\n\nimport { SceneObject, SceneObjectState } from '../core/types';\n\nimport { SceneVariable, SceneVariableDependencyConfigLike } from './types';\n\ninterface VariableDependencyConfigOptions<TState extends SceneObjectState> {\n  /**\n   * State paths to scan / extract variable dependencies from. Leave empty to scan all paths.\n   */\n  statePaths?: Array<keyof TState>;\n  /**\n   * Optional way to customize how to handle when a dependent variable changes\n   * If not specified the default behavior is to trigger a re-render\n   */\n  onReferencedVariableValueChanged?: () => void;\n}\n\nexport class VariableDependencyConfig<TState extends SceneObjectState> implements SceneVariableDependencyConfigLike {\n  private _state: TState | undefined;\n  private _dependencies = new Set<string>();\n  private _statePaths?: Array<keyof TState>;\n  private _onReferencedVariableValueChanged: () => void;\n\n  public scanCount = 0;\n\n  public constructor(private _sceneObject: SceneObject<TState>, options: VariableDependencyConfigOptions<TState>) {\n    this._statePaths = options.statePaths;\n    this._onReferencedVariableValueChanged =\n      options.onReferencedVariableValueChanged ?? this.defaultHandlerReferencedVariableValueChanged;\n  }\n\n  /**\n   * Used to check for dependency on a specific variable\n   */\n  public hasDependencyOn(name: string): boolean {\n    return this.getNames().has(name);\n  }\n\n  /**\n   * This is called whenever any set of variables have new values. It up to this implementation to check if it's relevant given the current dependencies.\n   */\n  public variableValuesChanged(variables: Set<SceneVariable>) {\n    const deps = this.getNames();\n\n    for (const variable of variables) {\n      if (deps.has(variable.state.name)) {\n        this._onReferencedVariableValueChanged();\n        return;\n      }\n    }\n  }\n\n  /**\n   * Only way to force a re-render is to update state right now\n   */\n  private defaultHandlerReferencedVariableValueChanged = () => {\n    this._sceneObject.forceRender();\n  };\n\n  public getNames(): Set<string> {\n    const prevState = this._state;\n    const newState = (this._state = this._sceneObject.state);\n\n    if (!prevState) {\n      // First time we always scan for dependencies\n      this.scanStateForDependencies(this._state);\n      return this._dependencies;\n    }\n\n    // Second time we only scan if state is a different and if any specific state path has changed\n    if (newState !== prevState) {\n      if (this._statePaths) {\n        for (const path of this._statePaths) {\n          if (newState[path] !== prevState[path]) {\n            this.scanStateForDependencies(newState);\n            break;\n          }\n        }\n      } else {\n        this.scanStateForDependencies(newState);\n      }\n    }\n\n    return this._dependencies;\n  }\n\n  private scanStateForDependencies(state: TState) {\n    this._dependencies.clear();\n    this.scanCount += 1;\n\n    if (this._statePaths) {\n      for (const path of this._statePaths) {\n        const value = state[path];\n        if (value) {\n          this.extractVariablesFrom(value);\n        }\n      }\n    } else {\n      this.extractVariablesFrom(state);\n    }\n  }\n\n  private extractVariablesFrom(value: unknown) {\n    variableRegex.lastIndex = 0;\n\n    const stringToCheck = typeof value !== 'string' ? safeStringifyValue(value) : value;\n\n    const matches = stringToCheck.matchAll(variableRegex);\n    if (!matches) {\n      return;\n    }\n\n    for (const match of matches) {\n      const [, var1, var2, , var3] = match;\n      const variableName = var1 || var2 || var3;\n      this._dependencies.add(variableName);\n    }\n  }\n}\n\nconst safeStringifyValue = (value: unknown) => {\n  try {\n    return JSON.stringify(value, null);\n  } catch (error) {\n    console.error(error);\n  }\n\n  return '';\n};\n","import React, { CSSProperties } from 'react';\n\nimport { Field, Input } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneLayoutChildState } from '../core/types';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\n\nexport interface SceneCanvasTextState extends SceneLayoutChildState {\n  text: string;\n  fontSize?: number;\n  align?: 'left' | 'center' | 'right';\n}\n\nexport class SceneCanvasText extends SceneObjectBase<SceneCanvasTextState> {\n  public static Editor = Editor;\n\n  protected _variableDependency = new VariableDependencyConfig(this, { statePaths: ['text'] });\n\n  public static Component = ({ model }: SceneComponentProps<SceneCanvasText>) => {\n    const { text, fontSize = 20, align = 'left', key } = model.useState();\n\n    const style: CSSProperties = {\n      fontSize: fontSize,\n      display: 'flex',\n      flexGrow: 1,\n      alignItems: 'center',\n      padding: 16,\n      justifyContent: align,\n    };\n\n    return (\n      <div style={style} data-testid={key}>\n        {model.interpolate(text)}\n      </div>\n    );\n  };\n}\n\nfunction Editor({ model }: SceneComponentProps<SceneCanvasText>) {\n  const { fontSize } = model.useState();\n\n  return (\n    <Field label=\"Font size\">\n      <Input\n        type=\"number\"\n        defaultValue={fontSize}\n        onBlur={(evt) => model.setState({ fontSize: parseInt(evt.currentTarget.value, 10) })}\n      />\n    </Field>\n  );\n}\n","import { PanelData } from '@grafana/data';\n\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneObjectStatePlain } from './types';\n\nexport interface SceneDataNodeState extends SceneObjectStatePlain {\n  data?: PanelData;\n}\n\nexport class SceneDataNode extends SceneObjectBase<SceneDataNodeState> {}\n","import React from 'react';\n\nimport { LoadingState, PanelData } from '@grafana/data';\n\nimport { SceneDataNode } from '../core/SceneDataNode';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport {\n  SceneComponentProps,\n  SceneObject,\n  SceneObjectStatePlain,\n  SceneLayoutState,\n  SceneLayoutChild,\n} from '../core/types';\n\ninterface RepeatOptions extends SceneObjectStatePlain {\n  layout: SceneObject<SceneLayoutState>;\n}\n\nexport class ScenePanelRepeater extends SceneObjectBase<RepeatOptions> {\n  public activate(): void {\n    super.activate();\n\n    this._subs.add(\n      this.getData().subscribeToState({\n        next: (data) => {\n          if (data.data?.state === LoadingState.Done) {\n            this.performRepeat(data.data);\n          }\n        },\n      })\n    );\n  }\n\n  private performRepeat(data: PanelData) {\n    // assume parent is a layout\n    const firstChild = this.state.layout.state.children[0]!;\n    const newChildren: SceneLayoutChild[] = [];\n\n    for (const series of data.series) {\n      const clone = firstChild.clone({\n        key: `${newChildren.length}`,\n        $data: new SceneDataNode({\n          data: {\n            ...data,\n            series: [series],\n          },\n        }),\n      });\n\n      newChildren.push(clone);\n    }\n\n    this.state.layout.setState({ children: newChildren });\n  }\n\n  public static Component = ({ model, isEditing }: SceneComponentProps<ScenePanelRepeater>) => {\n    const { layout } = model.useState();\n    return <layout.Component model={layout} isEditing={isEditing} />;\n  };\n}\n","import React from 'react';\n\nimport { RefreshPicker, ToolbarButtonRow } from '@grafana/ui';\nimport { TimePickerWithHistory } from 'app/core/components/TimePicker/TimePickerWithHistory';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectStatePlain } from '../core/types';\n\nexport interface SceneTimePickerState extends SceneObjectStatePlain {\n  hidePicker?: boolean;\n}\n\nexport class SceneTimePicker extends SceneObjectBase<SceneTimePickerState> {\n  public static Component = SceneTimePickerRenderer;\n}\n\nfunction SceneTimePickerRenderer({ model }: SceneComponentProps<SceneTimePicker>) {\n  const { hidePicker } = model.useState();\n  const timeRange = model.getTimeRange();\n  const timeRangeState = timeRange.useState();\n\n  if (hidePicker) {\n    return null;\n  }\n\n  return (\n    <ToolbarButtonRow alignment=\"right\">\n      <TimePickerWithHistory\n        value={timeRangeState}\n        onChange={timeRange.onTimeRangeChange}\n        timeZone={'browser'}\n        fiscalYearStartMonth={0}\n        onMoveBackward={() => {}}\n        onMoveForward={() => {}}\n        onZoom={() => {}}\n        onChangeTimeZone={() => {}}\n        onChangeFiscalYearStartMonth={() => {}}\n      />\n\n      <RefreshPicker onRefresh={timeRange.onRefresh} onIntervalChanged={timeRange.onIntervalChanged} />\n    </ToolbarButtonRow>\n  );\n}\n","import React from 'react';\n\nimport { IconName, Input, ToolbarButton } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectStatePlain } from '../core/types';\n\nexport interface ToolbarButtonState extends SceneObjectStatePlain {\n  icon: IconName;\n  onClick: () => void;\n}\n\nexport class SceneToolbarButton extends SceneObjectBase<ToolbarButtonState> {\n  public static Component = ({ model }: SceneComponentProps<SceneToolbarButton>) => {\n    const state = model.useState();\n\n    return <ToolbarButton onClick={state.onClick} icon={state.icon} />;\n  };\n}\n\nexport interface SceneToolbarInputState extends SceneObjectStatePlain {\n  value?: string;\n  onChange: (value: number) => void;\n}\n\nexport class SceneToolbarInput extends SceneObjectBase<SceneToolbarInputState> {\n  public static Component = ({ model }: SceneComponentProps<SceneToolbarInput>) => {\n    const state = model.useState();\n\n    return (\n      <Input\n        defaultValue={state.value}\n        width={8}\n        onBlur={(evt) => {\n          model.state.onChange(parseInt(evt.currentTarget.value, 10));\n        }}\n      />\n    );\n  };\n}\n","import React from 'react';\n\nimport { Icon } from '@grafana/ui';\n\nexport function SceneDragHandle({ layoutKey, className }: { layoutKey: string; className?: string }) {\n  return (\n    <div\n      className={`${className} grid-drag-handle-${layoutKey}`}\n      style={{\n        width: '20px',\n        height: '20px',\n        cursor: 'move',\n      }}\n    >\n      <Icon name=\"draggabledots\" />\n    </div>\n  );\n}\n","import React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { AbsoluteTimeRange, FieldConfigSource, toUtc } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { Field, PanelChrome, Input } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneLayoutChildState } from '../core/types';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\n\nimport { SceneDragHandle } from './SceneDragHandle';\n\nexport interface VizPanelState extends SceneLayoutChildState {\n  title?: string;\n  pluginId: string;\n  options?: object;\n  fieldConfig?: FieldConfigSource;\n}\n\nexport class VizPanel extends SceneObjectBase<VizPanelState> {\n  public static Component = ScenePanelRenderer;\n  public static Editor = VizPanelEditor;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['title'],\n  });\n\n  public onSetTimeRange = (timeRange: AbsoluteTimeRange) => {\n    const sceneTimeRange = this.getTimeRange();\n    sceneTimeRange.setState({\n      raw: {\n        from: toUtc(timeRange.from),\n        to: toUtc(timeRange.to),\n      },\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n}\n\nfunction ScenePanelRenderer({ model }: SceneComponentProps<VizPanel>) {\n  const { title, pluginId, options, fieldConfig, ...state } = model.useState();\n  const { data } = model.getData().useState();\n  const layout = model.getLayout();\n  const isDraggable = layout.state.isDraggable ? state.isDraggable : false;\n  const dragHandle = <SceneDragHandle layoutKey={layout.state.key!} />;\n\n  const titleInterpolated = model.interpolate(title);\n\n  return (\n    <AutoSizer>\n      {({ width, height }) => {\n        if (width < 3 || height < 3) {\n          return null;\n        }\n\n        return (\n          <PanelChrome\n            title={titleInterpolated}\n            width={width}\n            height={height}\n            leftItems={isDraggable ? [dragHandle] : undefined}\n          >\n            {(innerWidth, innerHeight) => (\n              <>\n                <PanelRenderer\n                  title=\"Raw data\"\n                  pluginId={pluginId}\n                  width={innerWidth}\n                  height={innerHeight}\n                  data={data}\n                  options={options}\n                  fieldConfig={fieldConfig}\n                  onOptionsChange={() => {}}\n                  onChangeTimeRange={model.onSetTimeRange}\n                />\n              </>\n            )}\n          </PanelChrome>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\nScenePanelRenderer.displayName = 'ScenePanelRenderer';\n\nfunction VizPanelEditor({ model }: SceneComponentProps<VizPanel>) {\n  const { title } = model.useState();\n\n  return (\n    <Field label=\"Title\">\n      <Input defaultValue={title} onBlur={(evt) => model.setState({ title: evt.currentTarget.value })} />\n    </Field>\n  );\n}\n","import React, { CSSProperties } from 'react';\n\nimport { Field, RadioButtonGroup } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneLayoutChild, SceneLayoutState, SceneObjectSize } from '../../core/types';\n\nexport type FlexLayoutDirection = 'column' | 'row';\n\ninterface SceneFlexLayoutState extends SceneLayoutState {\n  direction?: FlexLayoutDirection;\n}\n\nexport class SceneFlexLayout extends SceneObjectBase<SceneFlexLayoutState> {\n  public static Component = FlexLayoutRenderer;\n  public static Editor = FlexLayoutEditor;\n\n  public toggleDirection() {\n    this.setState({\n      direction: this.state.direction === 'row' ? 'column' : 'row',\n    });\n  }\n}\n\nfunction FlexLayoutRenderer({ model, isEditing }: SceneComponentProps<SceneFlexLayout>) {\n  const { direction = 'row', children } = model.useState();\n\n  return (\n    <div style={{ flexGrow: 1, flexDirection: direction, display: 'flex', gap: '8px' }}>\n      {children.map((item) => (\n        <FlexLayoutChildComponent key={item.state.key} item={item} direction={direction} isEditing={isEditing} />\n      ))}\n    </div>\n  );\n}\n\nfunction FlexLayoutChildComponent({\n  item,\n  direction,\n  isEditing,\n}: {\n  item: SceneLayoutChild;\n  direction: FlexLayoutDirection;\n  isEditing?: boolean;\n}) {\n  const { size } = item.useState();\n\n  return (\n    <div style={getItemStyles(direction, size)}>\n      <item.Component model={item} isEditing={isEditing} />\n    </div>\n  );\n}\n\nfunction getItemStyles(direction: FlexLayoutDirection, sizing: SceneObjectSize = {}) {\n  const { xSizing = 'fill', ySizing = 'fill' } = sizing;\n\n  const style: CSSProperties = {\n    display: 'flex',\n    flexDirection: direction,\n    minWidth: sizing.minWidth,\n    minHeight: sizing.minHeight,\n  };\n\n  if (direction === 'column') {\n    if (sizing.height) {\n      style.height = sizing.height;\n    } else {\n      style.flexGrow = ySizing === 'fill' ? 1 : 0;\n    }\n\n    if (sizing.width) {\n      style.width = sizing.width;\n    } else {\n      style.alignSelf = xSizing === 'fill' ? 'stretch' : 'flex-start';\n    }\n  } else {\n    if (sizing.height) {\n      style.height = sizing.height;\n    } else {\n      style.alignSelf = ySizing === 'fill' ? 'stretch' : 'flex-start';\n    }\n\n    if (sizing.width) {\n      style.width = sizing.width;\n    } else {\n      style.flexGrow = xSizing === 'fill' ? 1 : 0;\n    }\n  }\n\n  return style;\n}\n\nfunction FlexLayoutEditor({ model }: SceneComponentProps<SceneFlexLayout>) {\n  const { direction = 'row' } = model.useState();\n  const options = [\n    { icon: 'arrow-right', value: 'row' },\n    { icon: 'arrow-down', value: 'column' },\n  ];\n\n  return (\n    <Field label=\"Direction\">\n      <RadioButtonGroup\n        options={options}\n        value={direction}\n        onChange={(value) => model.setState({ direction: value as FlexLayoutDirection })}\n      />\n    </Field>\n  );\n}\n","import { TimeRange, UrlQueryMap } from '@grafana/data';\n\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneObjectWithUrlSync, SceneTimeRangeState } from './types';\n\nexport class SceneTimeRange extends SceneObjectBase<SceneTimeRangeState> implements SceneObjectWithUrlSync {\n  public onTimeRangeChange = (timeRange: TimeRange) => {\n    this.setState(timeRange);\n  };\n\n  public onRefresh = () => {\n    // TODO re-eval time range\n    this.setState({ ...this.state });\n  };\n\n  public onIntervalChanged = (_: string) => {};\n\n  /** These url sync functions are only placeholders for something more sophisticated  */\n  public getUrlState() {\n    return {\n      from: this.state.raw.from,\n      to: this.state.raw.to,\n    } as any;\n  }\n\n  public updateFromUrl(values: UrlQueryMap) {\n    // TODO\n  }\n}\n","import React from 'react';\n\nimport { OptionsPaneCategory } from 'app/features/dashboard/components/PanelEditor/OptionsPaneCategory';\n\nimport { SceneObject } from '../core/types';\n\nexport interface Props {\n  model: SceneObject;\n}\n\nexport function SceneObjectEditor({ model }: Props) {\n  return (\n    <OptionsPaneCategory id=\"props\" title=\"Properties\" forceOpen={1}>\n      <model.Editor model={model} key={model.state.key} />\n    </OptionsPaneCategory>\n  );\n}\n","import React from 'react';\nimport { Observer, Subscription, Unsubscribable } from 'rxjs';\n\nimport { BusEvent, BusEventHandler, BusEventType, PanelData, TimeRange, UrlQueryMap } from '@grafana/data';\n\nimport { SceneVariableDependencyConfigLike, SceneVariables } from '../variables/types';\n\nexport interface SceneObjectStatePlain {\n  key?: string;\n  $timeRange?: SceneTimeRange;\n  $data?: SceneObject<SceneDataState>;\n  $editor?: SceneEditor;\n  $variables?: SceneVariables;\n}\n\nexport interface SceneLayoutChildSize {\n  size?: SceneObjectSize;\n}\nexport interface SceneLayoutChildInteractions {\n  isDraggable?: boolean;\n  isResizable?: boolean;\n  isCollapsible?: boolean;\n  isCollapsed?: boolean;\n}\n\nexport interface SceneLayoutChildState\n  extends SceneObjectStatePlain,\n    SceneLayoutChildSize,\n    SceneLayoutChildInteractions {}\n\nexport type SceneObjectState = SceneObjectStatePlain | SceneLayoutState | SceneLayoutChildState;\n\nexport interface SceneObjectSize {\n  width?: number | string;\n  height?: number | string;\n  xSizing?: 'fill' | 'content';\n  ySizing?: 'fill' | 'content';\n  x?: number;\n  y?: number;\n  minWidth?: number | string;\n  minHeight?: number | string;\n}\n\nexport interface SceneComponentProps<T> {\n  model: T;\n  isEditing?: boolean;\n}\n\nexport type SceneComponent<TModel> = React.FunctionComponent<SceneComponentProps<TModel>>;\n\nexport interface SceneDataState extends SceneObjectStatePlain {\n  data?: PanelData;\n}\n\nexport interface SceneObject<TState extends SceneObjectState = SceneObjectState> {\n  /** The current state */\n  readonly state: TState;\n\n  /** True when there is a React component mounted for this Object */\n  readonly isActive: boolean;\n\n  /** SceneObject parent */\n  readonly parent?: SceneObject;\n\n  /** This abtractions declares what variables the scene object depends on and how to handle when they change value. **/\n  readonly variableDependency?: SceneVariableDependencyConfigLike;\n\n  /** Subscribe to state changes */\n  subscribeToState(observer?: Partial<Observer<TState>>): Subscription;\n\n  /** Subscribe to a scene event */\n  subscribeToEvent<T extends BusEvent>(typeFilter: BusEventType<T>, handler: BusEventHandler<T>): Unsubscribable;\n\n  /** Publish an event and optionally bubble it up the scene */\n  publishEvent(event: BusEvent, bubble?: boolean): void;\n\n  /** Utility hook that wraps useObservable. Used by React components to subscribes to state changes */\n  useState(): TState;\n\n  /** How to modify state */\n  setState(state: Partial<TState>): void;\n\n  /** Called when the Component is mounted. A place to register event listeners add subscribe to state changes */\n  activate(): void;\n\n  /** Called when component unmounts. Unsubscribe and closes all subscriptions  */\n  deactivate(): void;\n\n  /** Get the scene editor */\n  getSceneEditor(): SceneEditor;\n\n  /** Get the scene root */\n  getRoot(): SceneObject;\n\n  /** Get the closest node with data */\n  getData(): SceneObject<SceneDataState>;\n\n  /** Get the closest node with variables */\n  getVariables(): SceneVariables | undefined;\n\n  /** Get the closest node with time range */\n  getTimeRange(): SceneTimeRange;\n\n  /** Get the closest layout node */\n  getLayout(): SceneObject<SceneLayoutState>;\n\n  /** Returns a deep clone this object and all its children */\n  clone(state?: Partial<TState>): this;\n\n  /** A React component to use for rendering the object */\n  Component(props: SceneComponentProps<SceneObject<TState>>): React.ReactElement | null;\n\n  /** To be replaced by declarative method */\n  Editor(props: SceneComponentProps<SceneObject<TState>>): React.ReactElement | null;\n\n  /** Force a re-render, should only be needed when variable values change */\n  forceRender(): void;\n}\n\nexport type SceneLayoutChild = SceneObject<SceneLayoutChildState | SceneLayoutState>;\n\nexport interface SceneLayoutState extends SceneLayoutChildState {\n  children: SceneLayoutChild[];\n}\n\nexport type SceneLayout<T extends SceneLayoutState = SceneLayoutState> = SceneObject<T>;\n\nexport interface SceneEditorState extends SceneObjectStatePlain {\n  hoverObject?: SceneObjectRef;\n  selectedObject?: SceneObjectRef;\n}\n\nexport interface SceneEditor extends SceneObject<SceneEditorState> {\n  onMouseEnterObject(model: SceneObject): void;\n  onMouseLeaveObject(model: SceneObject): void;\n  onSelectObject(model: SceneObject): void;\n}\n\nexport interface SceneTimeRangeState extends SceneObjectStatePlain, TimeRange {}\n\nexport interface SceneTimeRange extends SceneObject<SceneTimeRangeState> {\n  onTimeRangeChange(timeRange: TimeRange): void;\n  onIntervalChanged(interval: string): void;\n  onRefresh(): void;\n}\n\nexport interface SceneObjectRef {\n  ref: SceneObject;\n}\n\nexport function isSceneObject(obj: any): obj is SceneObject {\n  return obj.useState !== undefined;\n}\n\n/** These functions are still just temporary until this get's refined */\nexport interface SceneObjectWithUrlSync extends SceneObject {\n  getUrlState(): UrlQueryMap;\n  updateFromUrl(values: UrlQueryMap): void;\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nimport { SceneObject, isSceneObject, SceneLayoutChild } from '../core/types';\n\nexport interface Props {\n  node: SceneObject;\n  selectedObject?: SceneObject;\n}\n\nexport function SceneObjectTree({ node, selectedObject }: Props) {\n  const styles = useStyles2(getStyles);\n  const state = node.useState();\n  let children: SceneLayoutChild[] = [];\n\n  for (const propKey of Object.keys(state)) {\n    const propValue = (state as any)[propKey];\n    if (isSceneObject(propValue)) {\n      children.push(propValue);\n    }\n  }\n\n  if ('children' in state) {\n    for (const child of state.children) {\n      children.push(child);\n    }\n  }\n\n  const name = node.constructor.name;\n  const isSelected = selectedObject === node;\n  const onSelectNode = () => node.getSceneEditor().onSelectObject(node);\n\n  return (\n    <div className={styles.node}>\n      <div className={styles.header} onClick={onSelectNode}>\n        <div className={styles.icon}>{children.length > 0 && <Icon name=\"angle-down\" size=\"sm\" />}</div>\n        <div className={cx(styles.name, isSelected && styles.selected)}>{name}</div>\n      </div>\n      {children.length > 0 && (\n        <div className={styles.children}>\n          {children.map((child) => (\n            <SceneObjectTree node={child} selectedObject={selectedObject} key={child.state.key} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    node: css({\n      display: 'flex',\n      flexGrow: 0,\n      cursor: 'pointer',\n      flexDirection: 'column',\n      padding: '2px 4px',\n    }),\n    header: css({\n      display: 'flex',\n      fontWeight: 500,\n    }),\n    name: css({}),\n    selected: css({\n      color: theme.colors.error.text,\n    }),\n    icon: css({\n      width: theme.spacing(3),\n      color: theme.colors.text.secondary,\n    }),\n    children: css({\n      display: 'flex',\n      flexDirection: 'column',\n      paddingLeft: 8,\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneEditorState, SceneEditor, SceneObject, SceneComponentProps, SceneComponent } from '../core/types';\n\nimport { SceneObjectEditor } from './SceneObjectEditor';\nimport { SceneObjectTree } from './SceneObjectTree';\n\nexport class SceneEditManager extends SceneObjectBase<SceneEditorState> implements SceneEditor {\n  public static Component = SceneEditorRenderer;\n\n  public get Component(): SceneComponent<this> {\n    return SceneEditorRenderer;\n  }\n\n  public onMouseEnterObject(model: SceneObject) {\n    this.setState({ hoverObject: { ref: model } });\n  }\n\n  public onMouseLeaveObject(model: SceneObject) {\n    if (model.parent) {\n      this.setState({ hoverObject: { ref: model.parent } });\n    } else {\n      this.setState({ hoverObject: undefined });\n    }\n  }\n\n  public onSelectObject(model: SceneObject) {\n    this.setState({ selectedObject: { ref: model } });\n  }\n}\n\nfunction SceneEditorRenderer({ model, isEditing }: SceneComponentProps<SceneEditManager>) {\n  const { selectedObject } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  if (!isEditing) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.tree}>\n        <SceneObjectTree node={model.parent!} selectedObject={selectedObject?.ref} />\n      </div>\n      {selectedObject && <SceneObjectEditor model={selectedObject.ref} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexGrow: 0,\n      border: `1px solid ${theme.colors.border.weak}`,\n      background: theme.colors.background.primary,\n      width: theme.spacing(40),\n      cursor: 'pointer',\n      flexDirection: 'column',\n    }),\n    tree: css({\n      padding: theme.spacing(0.25, 1),\n    }),\n  };\n};\n","import { cloneDeep } from 'lodash';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataQueryRequest,\n  DataSourceApi,\n  DataSourceRef,\n  PanelData,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getNextRequestId } from 'app/features/query/state/PanelQueryRunner';\nimport { runRequest } from 'app/features/query/state/runRequest';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObjectStatePlain } from '../core/types';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\n\nexport interface QueryRunnerState extends SceneObjectStatePlain {\n  data?: PanelData;\n  queries: DataQueryExtended[];\n}\n\nexport interface DataQueryExtended extends DataQuery {\n  [key: string]: any;\n}\n\nexport class SceneQueryRunner extends SceneObjectBase<QueryRunnerState> {\n  private querySub?: Unsubscribable;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['queries'],\n    onReferencedVariableValueChanged: () => this.runQueries(),\n  });\n\n  public activate() {\n    super.activate();\n\n    const timeRange = this.getTimeRange();\n\n    this._subs.add(\n      timeRange.subscribeToState({\n        next: (timeRange) => {\n          this.runWithTimeRange(timeRange);\n        },\n      })\n    );\n\n    if (!this.state.data) {\n      this.runQueries();\n    }\n  }\n\n  public deactivate(): void {\n    super.deactivate();\n\n    if (this.querySub) {\n      this.querySub.unsubscribe();\n      this.querySub = undefined;\n    }\n  }\n\n  public runQueries() {\n    const timeRange = this.getTimeRange();\n    this.runWithTimeRange(timeRange.state);\n  }\n\n  private async runWithTimeRange(timeRange: TimeRange) {\n    const queries = cloneDeep(this.state.queries);\n\n    const request: DataQueryRequest = {\n      app: CoreApp.Dashboard,\n      requestId: getNextRequestId(),\n      timezone: 'browser',\n      panelId: 1,\n      dashboardId: 1,\n      range: timeRange,\n      interval: '1s',\n      intervalMs: 1000,\n      targets: cloneDeep(this.state.queries),\n      maxDataPoints: 500,\n      scopedVars: {},\n      startTime: Date.now(),\n    };\n\n    try {\n      const ds = await getDataSource(queries[0].datasource!, request.scopedVars);\n\n      // Attach the data source name to each query\n      request.targets = request.targets.map((query) => {\n        if (!query.datasource) {\n          query.datasource = ds.getRef();\n        }\n        return query;\n      });\n\n      const lowerIntervalLimit = ds.interval;\n      const norm = rangeUtil.calculateInterval(timeRange, request.maxDataPoints ?? 1000, lowerIntervalLimit);\n\n      // make shallow copy of scoped vars,\n      // and add built in variables interval and interval_ms\n      request.scopedVars = Object.assign({}, request.scopedVars, {\n        __interval: { text: norm.interval, value: norm.interval },\n        __interval_ms: { text: norm.intervalMs.toString(), value: norm.intervalMs },\n      });\n\n      request.interval = norm.interval;\n      request.intervalMs = norm.intervalMs;\n\n      this.querySub = runRequest(ds, request).subscribe({\n        next: (data) => {\n          console.log('set data', data, data.state);\n          this.setState({ data });\n        },\n      });\n    } catch (err) {\n      console.error('PanelQueryRunner Error', err);\n    }\n  }\n}\n\nasync function getDataSource(\n  datasource: DataSourceRef | string | DataSourceApi | null,\n  scopedVars: ScopedVars\n): Promise<DataSourceApi> {\n  if (datasource && (datasource as any).query) {\n    return datasource as DataSourceApi;\n  }\n  return await getDatasourceSrv().get(datasource as string, scopedVars);\n}\n","import { TestDataQuery } from 'app/plugins/datasource/testdata/types';\n\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getQueryRunnerWithRandomWalkQuery(overrides?: Partial<TestDataQuery>) {\n  return new SceneQueryRunner({\n    queries: [\n      {\n        refId: 'A',\n        datasource: {\n          uid: 'gdev-testdata',\n          type: 'testdata',\n        },\n        scenarioId: 'random_walk',\n        ...overrides,\n      },\n    ],\n  });\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneCanvasText } from '../components/SceneCanvasText';\nimport { ScenePanelRepeater } from '../components/ScenePanelRepeater';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { SceneToolbarInput } from '../components/SceneToolbarButton';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneFlexLayout } from '../components/layout/SceneFlexLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getFlexLayoutTest(): Scene {\n  const scene = new Scene({\n    title: 'Flex layout test',\n    layout: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new VizPanel({\n          size: { minWidth: '70%' },\n          pluginId: 'timeseries',\n          title: 'Dynamic height and width',\n        }),\n\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Fill height',\n            }),\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Fill height',\n            }),\n            new SceneCanvasText({\n              size: { ySizing: 'content' },\n              text: 'Size to content',\n              fontSize: 20,\n              align: 'center',\n            }),\n            new VizPanel({\n              size: { height: 300 },\n              pluginId: 'timeseries',\n              title: 'Fixed height',\n            }),\n          ],\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n\nexport function getScenePanelRepeaterTest(): Scene {\n  const queryRunner = getQueryRunnerWithRandomWalkQuery({\n    seriesCount: 2,\n    alias: '__server_names',\n    scenarioId: 'random_walk',\n  });\n\n  const scene = new Scene({\n    title: 'Panel repeater test',\n    layout: new ScenePanelRepeater({\n      layout: new SceneFlexLayout({\n        direction: 'column',\n        children: [\n          new SceneFlexLayout({\n            direction: 'row',\n            size: { minHeight: 200 },\n            children: [\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Title',\n                options: {\n                  legend: { displayMode: 'hidden' },\n                },\n              }),\n              new VizPanel({\n                size: { width: 300 },\n                pluginId: 'stat',\n                fieldConfig: { defaults: { displayName: 'Last' }, overrides: [] },\n                options: {\n                  graphMode: 'none',\n                },\n              }),\n            ],\n          }),\n        ],\n      }),\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: queryRunner,\n    actions: [\n      new SceneToolbarInput({\n        value: '2',\n        onChange: (newValue) => {\n          queryRunner.setState({\n            queries: [\n              {\n                ...queryRunner.state.queries[0],\n                seriesCount: newValue,\n              },\n            ],\n          });\n          queryRunner.runQueries();\n        },\n      }),\n      new SceneTimePicker({}),\n    ],\n  });\n\n  return scene;\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport ReactGridLayout from 'react-grid-layout';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { DEFAULT_PANEL_SPAN, GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport {\n  SceneComponentProps,\n  SceneLayoutChild,\n  SceneLayoutChildState,\n  SceneLayoutState,\n  SceneObject,\n  SceneObjectSize,\n} from '../../core/types';\nimport { SceneDragHandle } from '../SceneDragHandle';\n\ninterface SceneGridLayoutState extends SceneLayoutState {}\n\nexport class SceneGridLayout extends SceneObjectBase<SceneGridLayoutState> {\n  public static Component = SceneGridLayoutRenderer;\n\n  private _skipOnLayoutChange = false;\n\n  public constructor(state: SceneGridLayoutState) {\n    super({\n      isDraggable: true,\n      ...state,\n      children: sortChildrenByPosition(state.children),\n    });\n  }\n\n  public toggleRow(row: SceneGridRow) {\n    const isCollapsed = row.state.isCollapsed;\n\n    if (!isCollapsed) {\n      row.setState({ isCollapsed: true });\n      // To force re-render\n      this.setState({});\n      return;\n    }\n\n    const rowChildren = row.state.children;\n\n    if (rowChildren.length === 0) {\n      row.setState({ isCollapsed: false });\n      this.setState({});\n      return;\n    }\n\n    // Ok we are expanding row. We need to update row children y pos (incase they are incorrect) and push items below down\n    // Code copied from DashboardModel toggleRow()\n\n    const rowY = row.state.size?.y!;\n    const firstPanelYPos = rowChildren[0].state.size?.y ?? rowY;\n    const yDiff = firstPanelYPos - (rowY + 1);\n\n    // y max will represent the bottom y pos after all panels have been added\n    // needed to know home much panels below should be pushed down\n    let yMax = rowY;\n\n    for (const panel of rowChildren) {\n      // set the y gridPos if it wasn't already set\n      const newSize = { ...panel.state.size };\n      newSize.y = newSize.y ?? rowY;\n      // make sure y is adjusted (in case row moved while collapsed)\n      newSize.y -= yDiff;\n      if (newSize.y > panel.state.size?.y!) {\n        panel.setState({ size: newSize });\n      }\n      // update insert post and y max\n      yMax = Math.max(yMax, Number(newSize.y!) + Number(newSize.height!));\n    }\n\n    const pushDownAmount = yMax - rowY - 1;\n\n    // push panels below down\n    for (const child of this.state.children) {\n      if (child.state.size?.y! > rowY) {\n        this.pushChildDown(child, pushDownAmount);\n      }\n\n      if (child instanceof SceneGridRow && child !== row) {\n        for (const rowChild of child.state.children) {\n          if (rowChild.state.size?.y! > rowY) {\n            this.pushChildDown(rowChild, pushDownAmount);\n          }\n        }\n      }\n    }\n\n    row.setState({ isCollapsed: false });\n    // Trigger re-render\n    this.setState({});\n  }\n\n  public onLayoutChange = (layout: ReactGridLayout.Layout[]) => {\n    if (this._skipOnLayoutChange) {\n      // Layout has been updated by other RTL handler already\n      this._skipOnLayoutChange = false;\n      return;\n    }\n\n    for (const item of layout) {\n      const child = this.getSceneLayoutChild(item.i);\n\n      const nextSize = {\n        x: item.x,\n        y: item.y,\n        width: item.w,\n        height: item.h,\n      };\n\n      if (!isItemSizeEqual(child.state.size!, nextSize)) {\n        child.setState({\n          size: {\n            ...child.state.size,\n            ...nextSize,\n          },\n        });\n      }\n    }\n\n    this.setState({ children: sortChildrenByPosition(this.state.children) });\n  };\n\n  /**\n   * Will also scan row children and return child of the row\n   */\n  public getSceneLayoutChild(key: string) {\n    for (const child of this.state.children) {\n      if (child.state.key === key) {\n        return child;\n      }\n\n      if (child instanceof SceneGridRow) {\n        for (const rowChild of child.state.children) {\n          if (rowChild.state.key === key) {\n            return rowChild;\n          }\n        }\n      }\n    }\n\n    throw new Error('Scene layout child not found for GridItem');\n  }\n\n  public onResizeStop: ReactGridLayout.ItemCallback = (_, o, n) => {\n    const child = this.getSceneLayoutChild(n.i);\n    child.setState({\n      size: {\n        ...child.state.size,\n        width: n.w,\n        height: n.h,\n      },\n    });\n  };\n\n  private pushChildDown(child: SceneLayoutChild, amount: number) {\n    child.setState({\n      size: {\n        ...child.state.size,\n        y: child.state.size?.y! + amount,\n      },\n    });\n  }\n\n  /**\n   *  We assume the layout array is storted according to y pos, and walk upwards until we find a row.\n   *  If it is collapsed there is no row to add it to. The default is then to return the SceneGridLayout itself\n   */\n  private findGridItemSceneParent(layout: ReactGridLayout.Layout[], startAt: number): SceneGridRow | SceneGridLayout {\n    for (let i = startAt; i >= 0; i--) {\n      const gridItem = layout[i];\n      const sceneChild = this.getSceneLayoutChild(gridItem.i);\n\n      if (sceneChild instanceof SceneGridRow) {\n        // the closest row is collapsed return null\n        if (sceneChild.state.isCollapsed) {\n          return this;\n        }\n\n        return sceneChild;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * This likely needs a slighltly different approach. Where we clone or deactivate or and re-activate the moved child\n   */\n  public moveChildTo(child: SceneLayoutChild, target: SceneGridLayout | SceneGridRow) {\n    const currentParent = child.parent!;\n    let rootChildren = this.state.children;\n    const newChild = child.clone({ key: child.state.key });\n\n    // Remove from current parent row\n    if (currentParent instanceof SceneGridRow) {\n      const newRow = currentParent.clone({\n        children: currentParent.state.children.filter((c) => c.state.key !== child.state.key),\n      });\n\n      // new children with new row\n      rootChildren = rootChildren.map((c) => (c === currentParent ? newRow : c));\n\n      // if target is also a row\n      if (target instanceof SceneGridRow) {\n        const targetRow = target.clone({ children: [...target.state.children, newChild] });\n        rootChildren = rootChildren.map((c) => (c === target ? targetRow : c));\n      } else {\n        // target is the main grid\n        rootChildren = [...rootChildren, newChild];\n      }\n    } else {\n      // current parent is the main grid remove it from there\n      rootChildren = rootChildren.filter((c) => c.state.key !== child.state.key);\n      // Clone the target row and add the child\n      const targetRow = target.clone({ children: [...target.state.children, newChild] });\n      // Replace row with new row\n      rootChildren = rootChildren.map((c) => (c === target ? targetRow : c));\n    }\n\n    return rootChildren;\n  }\n\n  public onDragStop: ReactGridLayout.ItemCallback = (gridLayout, o, updatedItem) => {\n    const sceneChild = this.getSceneLayoutChild(updatedItem.i)!;\n\n    // Need to resort the grid layout based on new position (needed to to find the new parent)\n    gridLayout = sortGridLayout(gridLayout);\n\n    // Update children positions if they have changed\n    for (let i = 0; i < gridLayout.length; i++) {\n      const gridItem = gridLayout[i];\n      const child = this.getSceneLayoutChild(gridItem.i)!;\n      const childSize = child.state.size!;\n\n      if (childSize?.x !== gridItem.x || childSize?.y !== gridItem.y) {\n        child.setState({\n          size: {\n            ...child.state.size,\n            x: gridItem.x,\n            y: gridItem.y,\n          },\n        });\n      }\n    }\n\n    // Update the parent if the child if it has moved to a row or back to the grid\n    const indexOfUpdatedItem = gridLayout.findIndex((item) => item.i === updatedItem.i);\n    const newParent = this.findGridItemSceneParent(gridLayout, indexOfUpdatedItem - 1);\n    let newChildren = this.state.children;\n\n    if (newParent !== sceneChild.parent) {\n      newChildren = this.moveChildTo(sceneChild, newParent);\n    }\n\n    this.setState({ children: sortChildrenByPosition(newChildren) });\n    this._skipOnLayoutChange = true;\n  };\n\n  private toGridCell(child: SceneLayoutChild): ReactGridLayout.Layout {\n    const size = child.state.size!;\n\n    let x = size.x ?? 0;\n    let y = size.y ?? 0;\n    const w = Number.isInteger(Number(size.width)) ? Number(size.width) : DEFAULT_PANEL_SPAN;\n    const h = Number.isInteger(Number(size.height)) ? Number(size.height) : DEFAULT_PANEL_SPAN;\n\n    let isDraggable = Boolean(child.state.isDraggable);\n    let isResizable = Boolean(child.state.isResizable);\n\n    if (child instanceof SceneGridRow) {\n      isDraggable = child.state.isCollapsed ? true : false;\n      isResizable = false;\n    }\n\n    return { i: child.state.key!, x, y, h, w, isResizable, isDraggable };\n  }\n\n  public buildGridLayout(width: number): ReactGridLayout.Layout[] {\n    let cells: ReactGridLayout.Layout[] = [];\n\n    for (const child of this.state.children) {\n      cells.push(this.toGridCell(child));\n\n      if (child instanceof SceneGridRow && !child.state.isCollapsed) {\n        for (const rowChild of child.state.children) {\n          cells.push(this.toGridCell(rowChild));\n        }\n      }\n    }\n\n    // Sort by position\n    cells = sortGridLayout(cells);\n\n    if (width < 768) {\n      // We should not persist the mobile layout\n      this._skipOnLayoutChange = true;\n      return cells.map((cell) => ({ ...cell, w: 24 }));\n    }\n\n    this._skipOnLayoutChange = false;\n\n    return cells;\n  }\n}\n\nfunction SceneGridLayoutRenderer({ model }: SceneComponentProps<SceneGridLayout>) {\n  const { children } = model.useState();\n  validateChildrenSize(children);\n\n  return (\n    <AutoSizer disableHeight>\n      {({ width }) => {\n        if (width === 0) {\n          return null;\n        }\n\n        const layout = model.buildGridLayout(width);\n\n        return (\n          /**\n           * The children is using a width of 100% so we need to guarantee that it is wrapped\n           * in an element that has the calculated size given by the AutoSizer. The AutoSizer\n           * has a width of 0 and will let its content overflow its div.\n           */\n          <div style={{ width: `${width}px`, height: '100%' }}>\n            <ReactGridLayout\n              width={width}\n              /*\n                  Disable draggable if mobile device, solving an issue with unintentionally\n                  moving panels. https://github.com/grafana/grafana/issues/18497\n                  theme.breakpoints.md = 769\n                */\n              isDraggable={width > 768}\n              isResizable={false}\n              containerPadding={[0, 0]}\n              useCSSTransforms={false}\n              margin={[GRID_CELL_VMARGIN, GRID_CELL_VMARGIN]}\n              cols={GRID_COLUMN_COUNT}\n              rowHeight={GRID_CELL_HEIGHT}\n              draggableHandle={`.grid-drag-handle-${model.state.key}`}\n              // @ts-ignore: ignoring for now until we make the size type numbers-only\n              layout={layout}\n              onDragStop={model.onDragStop}\n              onResizeStop={model.onResizeStop}\n              onLayoutChange={model.onLayoutChange}\n              isBounded={false}\n            >\n              {layout.map((gridItem) => {\n                const sceneChild = model.getSceneLayoutChild(gridItem.i)!;\n                return (\n                  <div key={sceneChild.state.key} style={{ display: 'flex' }}>\n                    <sceneChild.Component model={sceneChild} key={sceneChild.state.key} />\n                  </div>\n                );\n              })}\n            </ReactGridLayout>\n          </div>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\ninterface SceneGridRowState extends SceneLayoutChildState {\n  title: string;\n  isCollapsible?: boolean;\n  isCollapsed?: boolean;\n  children: Array<SceneObject<SceneLayoutChildState>>;\n}\n\nexport class SceneGridRow extends SceneObjectBase<SceneGridRowState> {\n  public static Component = SceneGridRowRenderer;\n\n  public constructor(state: SceneGridRowState) {\n    super({\n      isResizable: false,\n      isDraggable: true,\n      isCollapsible: true,\n      ...state,\n      size: {\n        ...state.size,\n        x: 0,\n        height: 1,\n        width: GRID_COLUMN_COUNT,\n      },\n    });\n  }\n\n  public onCollapseToggle = () => {\n    if (!this.state.isCollapsible) {\n      return;\n    }\n\n    const layout = this.parent;\n\n    if (!layout || !(layout instanceof SceneGridLayout)) {\n      throw new Error('SceneGridRow must be a child of SceneGridLayout');\n    }\n\n    layout.toggleRow(this);\n  };\n}\n\nfunction SceneGridRowRenderer({ model }: SceneComponentProps<SceneGridRow>) {\n  const styles = useStyles2(getSceneGridRowStyles);\n  const { isCollapsible, isCollapsed, isDraggable, title } = model.useState();\n  const layout = model.getLayout();\n  const dragHandle = <SceneDragHandle layoutKey={layout.state.key!} />;\n\n  return (\n    <div className={styles.row}>\n      <div className={cx(styles.rowHeader, isCollapsed && styles.rowHeaderCollapsed)}>\n        <div onClick={model.onCollapseToggle} className={styles.rowTitleWrapper}>\n          {isCollapsible && <Icon name={isCollapsed ? 'angle-right' : 'angle-down'} />}\n          <span className={styles.rowTitle}>{title}</span>\n        </div>\n        {isDraggable && isCollapsed && <div>{dragHandle}</div>}\n      </div>\n    </div>\n  );\n}\n\nconst getSceneGridRowStyles = (theme: GrafanaTheme2) => {\n  return {\n    row: css({\n      width: '100%',\n      height: '100%',\n      position: 'relative',\n      zIndex: 0,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    rowHeader: css({\n      width: '100%',\n      height: '30px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      marginBottom: '8px',\n      border: `1px solid transparent`,\n    }),\n    rowTitleWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n    }),\n    rowHeaderCollapsed: css({\n      marginBottom: '0px',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n    rowTitle: css({\n      fontSize: theme.typography.h6.fontSize,\n      fontWeight: theme.typography.h6.fontWeight,\n    }),\n  };\n};\n\nfunction validateChildrenSize(children: SceneLayoutChild[]) {\n  if (\n    children.find(\n      (c) =>\n        !c.state.size ||\n        c.state.size.height === undefined ||\n        c.state.size.width === undefined ||\n        c.state.size.x === undefined ||\n        c.state.size.y === undefined\n    )\n  ) {\n    throw new Error('All children must have a size specified');\n  }\n}\n\nfunction isItemSizeEqual(a: SceneObjectSize, b: SceneObjectSize) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\nfunction sortChildrenByPosition(children: SceneLayoutChild[]) {\n  return [...children].sort((a, b) => {\n    return a.state.size?.y! - b.state.size?.y! || a.state.size?.x! - b.state.size?.x!;\n  });\n}\n\nfunction sortGridLayout(layout: ReactGridLayout.Layout[]) {\n  return [...layout].sort((a, b) => a.y - b.y || a.x! - b.x);\n}\n","import { dateTime, getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneGridLayout, SceneGridRow } from '../components/layout/SceneGridLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getGridWithMultipleTimeRanges(): Scene {\n  const globalTimeRange = new SceneTimeRange(getDefaultTimeRange());\n\n  const now = dateTime();\n  const row1TimeRange = new SceneTimeRange({\n    from: dateTime(now).subtract(1, 'year'),\n    to: now,\n    raw: { from: 'now-1y', to: 'now' },\n  });\n\n  const scene = new Scene({\n    title: 'Grid with rows and different queries and time ranges',\n    layout: new SceneGridLayout({\n      children: [\n        new SceneGridRow({\n          $timeRange: row1TimeRange,\n          $data: new SceneQueryRunner({\n            queries: [\n              {\n                refId: 'A',\n                datasource: {\n                  uid: 'gdev-testdata',\n                  type: 'testdata',\n                },\n                scenarioId: 'random_walk_table',\n              },\n            ],\n          }),\n          title: 'Row A - has its own query, last year time range',\n          key: 'Row A',\n          isCollapsed: true,\n          size: { y: 0 },\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row A Child1',\n              key: 'Row A Child1',\n              isResizable: true,\n              isDraggable: true,\n              size: { x: 0, y: 1, width: 12, height: 5 },\n            }),\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row A Child2',\n              key: 'Row A Child2',\n              isResizable: true,\n              isDraggable: true,\n              size: { x: 0, y: 5, width: 6, height: 5 },\n            }),\n          ],\n        }),\n\n        new VizPanel({\n          $data: new SceneQueryRunner({\n            queries: [\n              {\n                refId: 'A',\n                datasource: {\n                  uid: 'gdev-testdata',\n                  type: 'testdata',\n                },\n                scenarioId: 'random_walk',\n                seriesCount: 10,\n              },\n            ],\n          }),\n          isResizable: true,\n          isDraggable: true,\n          pluginId: 'timeseries',\n          title: 'Outsider, has its own query',\n          key: 'Outsider-own-query',\n          size: {\n            x: 0,\n            y: 12,\n            width: 6,\n            height: 10,\n          },\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: globalTimeRange,\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, ToolbarButton, useStyles2 } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObject, SceneLayoutChildState, SceneComponentProps, SceneLayout } from '../core/types';\n\ninterface NestedSceneState extends SceneLayoutChildState {\n  title: string;\n  isCollapsed?: boolean;\n  canCollapse?: boolean;\n  canRemove?: boolean;\n  layout: SceneLayout;\n  actions?: SceneObject[];\n}\n\nexport class NestedScene extends SceneObjectBase<NestedSceneState> {\n  public static Component = NestedSceneRenderer;\n\n  public onToggle = () => {\n    this.setState({\n      isCollapsed: !this.state.isCollapsed,\n      size: {\n        ...this.state.size,\n        ySizing: this.state.isCollapsed ? 'fill' : 'content',\n      },\n    });\n  };\n\n  /** Removes itself from its parent's children array */\n  public onRemove = () => {\n    const parent = this.parent!;\n    if ('children' in parent.state) {\n      parent.setState({\n        children: parent.state.children.filter((x) => x !== this),\n      });\n    }\n  };\n}\n\nexport function NestedSceneRenderer({ model, isEditing }: SceneComponentProps<NestedScene>) {\n  const { title, isCollapsed, canCollapse, canRemove, layout, actions } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  const toolbarActions = (actions ?? []).map((action) => <action.Component key={action.state.key} model={action} />);\n\n  if (canRemove) {\n    toolbarActions.push(\n      <ToolbarButton\n        icon=\"times\"\n        variant={'default'}\n        onClick={model.onRemove}\n        key=\"remove-button\"\n        aria-label=\"Remove scene\"\n      />\n    );\n  }\n\n  return (\n    <div className={styles.row}>\n      <div className={styles.rowHeader}>\n        <Stack gap={0}>\n          <div className={styles.title} role=\"heading\" aria-level={1}>\n            {title}\n          </div>\n          {canCollapse && (\n            <div className={styles.toggle}>\n              <Button\n                size=\"sm\"\n                icon={isCollapsed ? 'angle-down' : 'angle-up'}\n                fill=\"text\"\n                variant=\"secondary\"\n                aria-label={isCollapsed ? 'Expand scene' : 'Collapse scene'}\n                onClick={model.onToggle}\n              />\n            </div>\n          )}\n        </Stack>\n        <div className={styles.actions}>{toolbarActions}</div>\n      </div>\n      {!isCollapsed && <layout.Component model={layout} isEditing={isEditing} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    gap: theme.spacing(1),\n    cursor: 'pointer',\n  }),\n  toggle: css({}),\n  title: css({\n    fontSize: theme.typography.h5.fontSize,\n  }),\n  rowHeader: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(2),\n  }),\n  actions: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    justifyContent: 'flex-end',\n    flexGrow: 1,\n  }),\n});\n","import React from 'react';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneLayoutState, SceneComponentProps } from '../core/types';\n\ninterface SceneSubMenuState extends SceneLayoutState {}\n\nexport class SceneSubMenu extends SceneObjectBase<SceneSubMenuState> {\n  public static Component = SceneSubMenuRenderer;\n}\n\nfunction SceneSubMenuRenderer({ model }: SceneComponentProps<SceneSubMenu>) {\n  const { children } = model.useState();\n\n  return (\n    <div style={{ display: 'flex', gap: '16px' }}>\n      {children.map((child) => (\n        <child.Component key={child.state.key} model={child} />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObject, SceneObjectStatePlain } from '../../core/types';\nimport { SceneVariableState } from '../types';\n\nexport class VariableValueSelectors extends SceneObjectBase<SceneObjectStatePlain> {\n  public static Component = VariableValueSelectorsRenderer;\n}\n\nfunction VariableValueSelectorsRenderer({ model }: SceneComponentProps<VariableValueSelectors>) {\n  const variables = model.getVariables()!.useState();\n\n  return (\n    <>\n      {variables.variables.map((variable) => (\n        <VariableValueSelectWrapper key={variable.state.key} variable={variable} />\n      ))}\n    </>\n  );\n}\n\nfunction VariableValueSelectWrapper({ variable }: { variable: SceneObject<SceneVariableState> }) {\n  const state = variable.useState();\n\n  if (state.hide === VariableHide.hideVariable) {\n    return null;\n  }\n\n  return (\n    <div className=\"gf-form\">\n      <VariableLabel state={state} />\n      <variable.Component model={variable} />\n    </div>\n  );\n}\n\nfunction VariableLabel({ state }: { state: SceneVariableState }) {\n  if (state.hide === VariableHide.hideLabel) {\n    return null;\n  }\n\n  const elementId = `var-${state.key}`;\n  const labelOrName = state.label ?? state.name;\n\n  if (state.description) {\n    return (\n      <Tooltip content={state.description} placement={'bottom'}>\n        <label\n          className=\"gf-form-label gf-form-label--variable\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n          htmlFor={elementId}\n        >\n          {labelOrName}\n        </label>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <label\n      className=\"gf-form-label gf-form-label--variable\"\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n      htmlFor={elementId}\n    >\n      {labelOrName}\n    </label>\n  );\n}\n","import { Observable } from 'rxjs';\n\nimport { BusEventWithPayload } from '@grafana/data';\nimport { VariableHide } from 'app/features/variables/types';\n\nimport { SceneObject, SceneObjectStatePlain } from '../core/types';\n\nexport interface SceneVariableState extends SceneObjectStatePlain {\n  name: string;\n  label?: string;\n  hide?: VariableHide;\n  skipUrlSync?: boolean;\n  loading?: boolean;\n  error?: any | null;\n  description?: string | null;\n}\n\nexport interface SceneVariable<TState extends SceneVariableState = SceneVariableState> extends SceneObject<TState> {\n  /**\n   * This function is called on activation or when a dependency changes.\n   */\n  validateAndUpdate?(): Observable<ValidateAndUpdateResult>;\n\n  /**\n   * Should return the value for the given field path\n   */\n  getValue(fieldPath?: string): VariableValue;\n\n  /**\n   * Should return the value display text, used by the \"text\" formatter\n   * Example: ${podId:text}\n   * Useful for variables that have non user friendly values but friendly display text names.\n   */\n  getValueText?(): string;\n}\n\nexport type VariableValue = string | string[] | number | number[] | boolean | boolean[] | null | undefined;\n\nexport interface ValidateAndUpdateResult {}\nexport interface VariableValueOption {\n  label: string;\n  value: string;\n}\n\nexport interface SceneVariableSetState extends SceneObjectStatePlain {\n  variables: SceneVariable[];\n}\n\nexport interface SceneVariables extends SceneObject<SceneVariableSetState> {\n  getByName(name: string): SceneVariable | undefined;\n}\n\nexport class SceneVariableValueChangedEvent extends BusEventWithPayload<SceneVariable> {\n  public static type = 'scene-variable-changed-value';\n}\n\nexport interface SceneVariableDependencyConfigLike {\n  /** Return all variable names this object depend on */\n  getNames(): Set<string>;\n\n  /** Used to check for dependency on a specific variable */\n  hasDependencyOn(name: string): boolean;\n\n  /**\n   * Will be called when any variable value has changed, not just variable names returned by getNames().\n   * It is up the implementation of this interface to filter it by actual dependencies.\n   **/\n  variableValuesChanged(variables: Set<SceneVariable>): void;\n}\n","import { Unsubscribable } from 'rxjs';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneObject } from '../../core/types';\nimport { forEachSceneObjectInState } from '../../core/utils';\nimport { SceneVariable, SceneVariables, SceneVariableSetState, SceneVariableValueChangedEvent } from '../types';\n\nexport class SceneVariableSet extends SceneObjectBase<SceneVariableSetState> implements SceneVariables {\n  /** Variables that have changed in since the activation or since the first manual value change */\n  private variablesThatHaveChanged = new Set<SceneVariable>();\n\n  /** Variables that are scheduled to be validated and updated */\n  private variablesToUpdate = new Set<SceneVariable>();\n\n  /** Variables currently updating  */\n  private updating = new Map<SceneVariable, VariableUpdateInProgress>();\n\n  public getByName(name: string): SceneVariable | undefined {\n    // TODO: Replace with index\n    return this.state.variables.find((x) => x.state.name === name);\n  }\n\n  /**\n   * Subscribes to child variable value changes\n   * And starts the variable value validation process\n   */\n  public activate(): void {\n    super.activate();\n\n    // Subscribe to changes to child variables\n    this._subs.add(this.subscribeToEvent(SceneVariableValueChangedEvent, this.onVariableValueChanged));\n    this.validateAndUpdateAll();\n  }\n\n  /**\n   * Cancel all currently running updates\n   */\n  public deactivate(): void {\n    super.deactivate();\n    this.variablesToUpdate.clear();\n\n    for (const update of this.updating.values()) {\n      update.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * This loops through variablesToUpdate and update all that that can.\n   * If one has a dependency that is currently in variablesToUpdate it will be skipped for now.\n   */\n  private updateNextBatch() {\n    // If we have nothing more to update and variable values changed we need to update scene objects that depend on these variables\n    if (this.variablesToUpdate.size === 0 && this.variablesThatHaveChanged.size > 0) {\n      this.notifyDependentSceneObjects();\n      return;\n    }\n\n    for (const variable of this.variablesToUpdate) {\n      if (!variable.validateAndUpdate) {\n        throw new Error('Variable added to variablesToUpdate but does not have validateAndUpdate');\n      }\n\n      // Wait for variables that has dependencies that also needs updates\n      if (this.hasDependendencyInUpdateQueue(variable)) {\n        continue;\n      }\n\n      this.updating.set(variable, {\n        variable,\n        subscription: variable.validateAndUpdate().subscribe({\n          next: () => this.validateAndUpdateCompleted(variable),\n          error: (err) => this.handleVariableError(variable, err),\n        }),\n      });\n    }\n  }\n\n  /**\n   * A variable has completed it's update process. This could mean that variables that depend on it can now be updated in turn.\n   */\n  private validateAndUpdateCompleted(variable: SceneVariable) {\n    const update = this.updating.get(variable);\n    update?.subscription.unsubscribe();\n\n    this.updating.delete(variable);\n    this.variablesToUpdate.delete(variable);\n    this.updateNextBatch();\n  }\n\n  /**\n   * TODO handle this properly (and show error in UI).\n   * Not sure if this should be handled here on in MultiValueVariable\n   */\n  private handleVariableError(variable: SceneVariable, err: Error) {\n    variable.setState({ loading: false, error: err });\n  }\n\n  /**\n   * Checks if the variable has any dependencies that is currently in variablesToUpdate\n   */\n  private hasDependendencyInUpdateQueue(variable: SceneVariable) {\n    if (!variable.variableDependency) {\n      return false;\n    }\n\n    for (const otherVariable of this.variablesToUpdate.values()) {\n      if (variable.variableDependency?.hasDependencyOn(otherVariable.state.name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Extract dependencies from all variables and add those that needs update to the variablesToUpdate map\n   * Then it will start the update process.\n   */\n  private validateAndUpdateAll() {\n    for (const variable of this.state.variables) {\n      if (variable.validateAndUpdate) {\n        this.variablesToUpdate.add(variable);\n      }\n    }\n\n    this.updateNextBatch();\n  }\n\n  /**\n   * This will trigger an update of all variables that depend on it.\n   * */\n  private onVariableValueChanged = (event: SceneVariableValueChangedEvent) => {\n    const variableThatChanged = event.payload;\n\n    this.variablesThatHaveChanged.add(variableThatChanged);\n\n    // Ignore this change if it is currently updating\n    if (this.updating.has(variableThatChanged)) {\n      return;\n    }\n\n    // Add variables that depend on the changed variable to the update queue\n    for (const otherVariable of this.state.variables) {\n      if (otherVariable.variableDependency) {\n        if (otherVariable.variableDependency.hasDependencyOn(variableThatChanged.state.name)) {\n          this.variablesToUpdate.add(otherVariable);\n        }\n      }\n    }\n\n    this.updateNextBatch();\n  };\n\n  /**\n   * Walk scene object graph and update all objects that depend on variables that have changed\n   */\n  private notifyDependentSceneObjects() {\n    if (!this.parent) {\n      return;\n    }\n\n    this.traverseSceneAndNotify(this.parent);\n    this.variablesThatHaveChanged.clear();\n  }\n\n  /**\n   * Recursivly walk the full scene object graph and notify all objects with dependencies that include any of changed variables\n   */\n  private traverseSceneAndNotify(sceneObject: SceneObject) {\n    // No need to notify variables under this SceneVariableSet\n    if (this === sceneObject) {\n      return;\n    }\n\n    if (sceneObject.variableDependency) {\n      sceneObject.variableDependency.variableValuesChanged(this.variablesThatHaveChanged);\n    }\n\n    forEachSceneObjectInState(sceneObject.state, (child) => this.traverseSceneAndNotify(child));\n  }\n}\n\nexport interface VariableUpdateInProgress {\n  variable: SceneVariable;\n  subscription: Unsubscribable;\n}\n","import { isArray } from 'lodash';\nimport React from 'react';\n\nimport { Select, MultiSelect } from '@grafana/ui';\n\nimport { SceneComponentProps } from '../../core/types';\nimport { MultiValueVariable } from '../variants/MultiValueVariable';\n\nexport function VariableValueSelect({ model }: SceneComponentProps<MultiValueVariable>) {\n  const { value, key, loading, isMulti, options } = model.useState();\n\n  if (isMulti) {\n    return (\n      <MultiSelect\n        id={key}\n        placeholder=\"Select value\"\n        width=\"auto\"\n        value={isArray(value) ? value : [value]}\n        allowCustomValue\n        isLoading={loading}\n        options={options}\n        onChange={model.onMultiValueChange}\n      />\n    );\n  }\n\n  return (\n    <Select\n      id={key}\n      placeholder=\"Select value\"\n      width=\"auto\"\n      value={value}\n      allowCustomValue\n      isLoading={loading}\n      options={options}\n      onChange={model.onSingleValueChange}\n    />\n  );\n}\n","import { map, Observable } from 'rxjs';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneObject } from '../../core/types';\nimport {\n  SceneVariable,\n  SceneVariableValueChangedEvent,\n  SceneVariableState,\n  ValidateAndUpdateResult,\n  VariableValue,\n  VariableValueOption,\n} from '../types';\n\nexport interface MultiValueVariableState extends SceneVariableState {\n  value: string | string[]; // old current.text\n  text: string | string[]; // old current.value\n  options: VariableValueOption[];\n  isMulti?: boolean;\n}\n\nexport interface VariableGetOptionsArgs {\n  searchFilter?: string;\n}\n\nexport abstract class MultiValueVariable<TState extends MultiValueVariableState = MultiValueVariableState>\n  extends SceneObjectBase<TState>\n  implements SceneVariable<TState>\n{\n  /**\n   * The source of value options.\n   */\n  public abstract getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]>;\n\n  /**\n   * This function is called on when SceneVariableSet is activated or when a dependency changes.\n   */\n  public validateAndUpdate(): Observable<ValidateAndUpdateResult> {\n    return this.getValueOptions({}).pipe(\n      map((options) => {\n        this.updateValueGivenNewOptions(options);\n        return {};\n      })\n    );\n  }\n\n  /**\n   * Check if current value is valid given new options. If not update the value.\n   * TODO: Handle multi valued variables\n   */\n  private updateValueGivenNewOptions(options: VariableValueOption[]) {\n    if (options.length === 0) {\n      // TODO handle the no value state\n      this.setStateHelper({ value: '?', loading: false });\n      return;\n    }\n\n    const foundCurrent = options.find((x) => x.value === this.state.value);\n    if (!foundCurrent) {\n      // Current value is not valid. Set to first of the available options\n      this.changeValueAndPublishChangeEvent(options[0].value, options[0].label);\n    } else {\n      // current value is still ok\n      this.setStateHelper({ loading: false });\n    }\n  }\n\n  public getValue(): VariableValue {\n    return this.state.value;\n  }\n\n  public getValueText(): string {\n    if (Array.isArray(this.state.text)) {\n      return this.state.text.join(' + ');\n    }\n\n    return this.state.text;\n  }\n\n  private changeValueAndPublishChangeEvent(value: string | string[], text: string | string[]) {\n    if (value !== this.state.value || text !== this.state.text) {\n      this.setStateHelper({ value, text, loading: false });\n      this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n    }\n  }\n\n  /**\n   * This helper function is to counter the contravariance of setState\n   */\n  private setStateHelper(state: Partial<MultiValueVariableState>) {\n    const test: SceneObject<MultiValueVariableState> = this;\n    test.setState(state);\n  }\n\n  public onSingleValueChange = (value: SelectableValue<string>) => {\n    this.changeValueAndPublishChangeEvent(value.value!, value.label!);\n  };\n\n  public onMultiValueChange = (value: Array<SelectableValue<string>>) => {\n    this.changeValueAndPublishChangeEvent(\n      value.map((v) => v.value!),\n      value.map((v) => v.label!)\n    );\n  };\n}\n","import React from 'react';\nimport { Observable, Subject } from 'rxjs';\n\nimport { queryMetricTree } from 'app/plugins/datasource/testdata/metricTree';\n\nimport { SceneComponentProps } from '../../core/types';\nimport { VariableDependencyConfig } from '../VariableDependencyConfig';\nimport { VariableValueSelect } from '../components/VariableValueSelect';\nimport { sceneTemplateInterpolator } from '../sceneTemplateInterpolator';\nimport { VariableValueOption } from '../types';\n\nimport { MultiValueVariable, MultiValueVariableState, VariableGetOptionsArgs } from './MultiValueVariable';\n\nexport interface TestVariableState extends MultiValueVariableState {\n  query: string;\n  delayMs?: number;\n  issuedQuery?: string;\n}\n\n/**\n * This variable is only designed for unit tests and potentially e2e tests.\n */\nexport class TestVariable extends MultiValueVariable<TestVariableState> {\n  private completeUpdate = new Subject<number>();\n  public isGettingValues = true;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['query'],\n  });\n\n  public getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]> {\n    const { delayMs } = this.state;\n\n    return new Observable<VariableValueOption[]>((observer) => {\n      this.setState({ loading: true });\n\n      this.completeUpdate.subscribe({\n        next: () => {\n          observer.next(this.issueQuery());\n        },\n      });\n\n      let timeout: NodeJS.Timeout | undefined;\n\n      if (delayMs) {\n        timeout = setTimeout(() => this.signalUpdateCompleted(), delayMs);\n      }\n\n      this.isGettingValues = true;\n\n      return () => {\n        clearTimeout(timeout);\n        this.isGettingValues = false;\n      };\n    });\n  }\n\n  private issueQuery() {\n    const interpolatedQuery = sceneTemplateInterpolator(this.state.query, this);\n    const options = queryMetricTree(interpolatedQuery).map((x) => ({ label: x.name, value: x.name }));\n\n    this.setState({\n      issuedQuery: interpolatedQuery,\n      options,\n    });\n\n    return options;\n  }\n\n  /** Useful from tests */\n  public signalUpdateCompleted() {\n    this.completeUpdate.next(1);\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    return <VariableValueSelect model={model} />;\n  };\n}\n","import { Scene } from '../components/Scene';\n\nimport { getFlexLayoutTest, getScenePanelRepeaterTest } from './demo';\nimport { getGridLayoutTest } from './grid';\nimport { getGridWithMultipleTimeRanges } from './gridMultiTimeRange';\nimport { getMultipleGridLayoutTest } from './gridMultiple';\nimport { getGridWithMultipleData } from './gridWithMultipleData';\nimport { getGridWithRowLayoutTest } from './gridWithRow';\nimport { getNestedScene } from './nested';\nimport { getSceneWithRows } from './sceneWithRows';\nimport { getVariablesDemo } from './variablesDemo';\n\nexport function getScenes(): Scene[] {\n  return [\n    getFlexLayoutTest(),\n    getScenePanelRepeaterTest(),\n    getNestedScene(),\n    getSceneWithRows(),\n    getGridLayoutTest(),\n    getGridWithRowLayoutTest(),\n    getGridWithMultipleData(),\n    getGridWithMultipleTimeRanges(),\n    getMultipleGridLayoutTest(),\n    getVariablesDemo(),\n  ];\n}\n\nconst cache: Record<string, Scene> = {};\n\nexport function getSceneByTitle(title: string) {\n  if (cache[title]) {\n    return cache[title];\n  }\n\n  const scene = getScenes().find((x) => x.state.title === title);\n  if (scene) {\n    cache[title] = scene;\n  }\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { NestedScene } from '../components/NestedScene';\nimport { Scene } from '../components/Scene';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneFlexLayout } from '../components/layout/SceneFlexLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getNestedScene(): Scene {\n  const scene = new Scene({\n    title: 'Nested Scene demo',\n    layout: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        getInnerScene('Inner scene'),\n        new VizPanel({\n          key: '3',\n          pluginId: 'timeseries',\n          title: 'Panel 3',\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n\nexport function getInnerScene(title: string) {\n  const scene = new NestedScene({\n    title: title,\n    canRemove: true,\n    canCollapse: true,\n    layout: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new VizPanel({\n          key: '3',\n          pluginId: 'timeseries',\n          title: 'Data',\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { NestedScene } from '../components/NestedScene';\nimport { Scene } from '../components/Scene';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneFlexLayout } from '../components/layout/SceneFlexLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getSceneWithRows(): Scene {\n  const scene = new Scene({\n    title: 'Scene with rows',\n    layout: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new NestedScene({\n          title: 'Overview',\n          canCollapse: true,\n          // size: { ySizing: 'content', xSizing: 'fill' },\n          layout: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n            ],\n          }),\n        }),\n        new NestedScene({\n          title: 'More server details',\n          // size: { ySizing: 'content', xSizing: 'fill' },\n          canCollapse: true,\n          layout: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneFlexLayout } from '../components/layout/SceneFlexLayout';\nimport { SceneGridLayout } from '../components/layout/SceneGridLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getGridLayoutTest(): Scene {\n  const scene = new Scene({\n    title: 'Grid layout test',\n    layout: new SceneGridLayout({\n      children: [\n        new VizPanel({\n          isResizable: true,\n          isDraggable: true,\n          pluginId: 'timeseries',\n          title: 'Draggable and resizable',\n          size: {\n            x: 0,\n            y: 0,\n            width: 12,\n            height: 10,\n          },\n        }),\n\n        new VizPanel({\n          pluginId: 'timeseries',\n          title: 'No drag and no resize',\n          isResizable: false,\n          isDraggable: false,\n          size: { x: 12, y: 0, width: 12, height: 10 },\n        }),\n\n        new SceneFlexLayout({\n          direction: 'column',\n          isDraggable: true,\n          isResizable: true,\n          size: { x: 6, y: 11, width: 12, height: 10 },\n          children: [\n            new VizPanel({\n              size: { ySizing: 'fill' },\n              pluginId: 'timeseries',\n              title: 'Child of flex layout',\n            }),\n            new VizPanel({\n              size: { ySizing: 'fill' },\n              pluginId: 'timeseries',\n              title: 'Child of flex layout',\n            }),\n          ],\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneGridLayout, SceneGridRow } from '../components/layout/SceneGridLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getGridWithRowLayoutTest(): Scene {\n  const scene = new Scene({\n    title: 'Grid with row layout test',\n    layout: new SceneGridLayout({\n      children: [\n        new SceneGridRow({\n          title: 'Row A',\n          key: 'Row A',\n          isCollapsed: true,\n          size: { y: 0 },\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row A Child1',\n              key: 'Row A Child1',\n              isResizable: true,\n              isDraggable: true,\n              size: { x: 0, y: 1, width: 12, height: 5 },\n            }),\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row A Child2',\n              key: 'Row A Child2',\n              isResizable: true,\n              isDraggable: true,\n              size: { x: 0, y: 5, width: 6, height: 5 },\n            }),\n          ],\n        }),\n        new SceneGridRow({\n          title: 'Row B',\n          key: 'Row B',\n          isCollapsed: true,\n          size: { y: 1 },\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row B Child1',\n              key: 'Row B Child1',\n              isResizable: false,\n              isDraggable: true,\n              size: { x: 0, y: 2, width: 12, height: 5 },\n            }),\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row B Child2',\n              key: 'Row B Child2',\n              isResizable: false,\n              isDraggable: true,\n              size: { x: 0, y: 7, width: 6, height: 5 },\n            }),\n          ],\n        }),\n        new VizPanel({\n          isResizable: true,\n          isDraggable: true,\n          pluginId: 'timeseries',\n          title: 'Outsider',\n          key: 'Outsider',\n          size: {\n            x: 2,\n            y: 12,\n            width: 12,\n            height: 10,\n          },\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneGridLayout, SceneGridRow } from '../components/layout/SceneGridLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getGridWithMultipleData(): Scene {\n  const scene = new Scene({\n    title: 'Grid with rows and different queries',\n    layout: new SceneGridLayout({\n      children: [\n        new SceneGridRow({\n          $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n          $data: new SceneQueryRunner({\n            queries: [\n              {\n                refId: 'A',\n                datasource: {\n                  uid: 'gdev-testdata',\n                  type: 'testdata',\n                },\n                scenarioId: 'random_walk_table',\n              },\n            ],\n          }),\n          title: 'Row A - has its own query',\n          key: 'Row A',\n          isCollapsed: true,\n          size: { y: 0 },\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row A Child1',\n              key: 'Row A Child1',\n              isResizable: true,\n              isDraggable: true,\n              size: { x: 0, y: 1, width: 12, height: 5 },\n            }),\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row A Child2',\n              key: 'Row A Child2',\n              isResizable: true,\n              isDraggable: true,\n              size: { x: 0, y: 5, width: 6, height: 5 },\n            }),\n          ],\n        }),\n        new SceneGridRow({\n          title: 'Row B - uses global query',\n          key: 'Row B',\n          isCollapsed: true,\n          size: { y: 1 },\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Row B Child1',\n              key: 'Row B Child1',\n              isResizable: false,\n              isDraggable: true,\n              size: { x: 0, y: 2, width: 12, height: 5 },\n            }),\n            new VizPanel({\n              $data: new SceneQueryRunner({\n                queries: [\n                  {\n                    refId: 'A',\n                    datasource: {\n                      uid: 'gdev-testdata',\n                      type: 'testdata',\n                    },\n                    scenarioId: 'random_walk',\n                    seriesCount: 10,\n                  },\n                ],\n              }),\n              pluginId: 'timeseries',\n              title: 'Row B Child2 with data',\n              key: 'Row B Child2',\n              isResizable: false,\n              isDraggable: true,\n              size: { x: 0, y: 7, width: 6, height: 5 },\n            }),\n          ],\n        }),\n        new VizPanel({\n          $data: new SceneQueryRunner({\n            queries: [\n              {\n                refId: 'A',\n                datasource: {\n                  uid: 'gdev-testdata',\n                  type: 'testdata',\n                },\n                scenarioId: 'random_walk',\n                seriesCount: 10,\n              },\n            ],\n          }),\n          isResizable: true,\n          isDraggable: true,\n          pluginId: 'timeseries',\n          title: 'Outsider, has its own query',\n          key: 'Outsider-own-query',\n          size: {\n            x: 0,\n            y: 12,\n            width: 6,\n            height: 10,\n          },\n        }),\n        new VizPanel({\n          isResizable: true,\n          isDraggable: true,\n          pluginId: 'timeseries',\n          title: 'Outsider, uses global query',\n          key: 'Outsider-global-query',\n          size: {\n            x: 6,\n            y: 12,\n            width: 12,\n            height: 10,\n          },\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneFlexLayout } from '../components/layout/SceneFlexLayout';\nimport { SceneGridLayout } from '../components/layout/SceneGridLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getMultipleGridLayoutTest(): Scene {\n  const scene = new Scene({\n    title: 'Multiple grid layouts test',\n    layout: new SceneFlexLayout({\n      children: [\n        new SceneGridLayout({\n          children: [\n            new VizPanel({\n              size: {\n                x: 0,\n                y: 0,\n                width: 12,\n                height: 10,\n              },\n              isDraggable: true,\n              isResizable: true,\n              pluginId: 'timeseries',\n              title: 'Dragabble and resizable',\n            }),\n            new VizPanel({\n              isResizable: false,\n              isDraggable: true,\n              size: { x: 12, y: 0, width: 12, height: 10 },\n              pluginId: 'timeseries',\n              title: 'Draggable only',\n            }),\n            new SceneFlexLayout({\n              isResizable: true,\n              isDraggable: true,\n              size: { x: 6, y: 11, width: 12, height: 10 },\n              direction: 'column',\n              children: [\n                new VizPanel({\n                  size: { ySizing: 'fill' },\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n                new VizPanel({\n                  size: { ySizing: 'fill' },\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n              ],\n            }),\n          ],\n        }),\n\n        new SceneGridLayout({\n          children: [\n            new VizPanel({\n              size: {\n                x: 0,\n                y: 0,\n                width: 12,\n                height: 10,\n              },\n              isDraggable: true,\n              pluginId: 'timeseries',\n              title: 'Fill height',\n            }),\n            new VizPanel({\n              isResizable: false,\n              isDraggable: true,\n              size: { x: 12, y: 0, width: 12, height: 10 },\n              pluginId: 'timeseries',\n              title: 'Fill height',\n            }),\n            new SceneFlexLayout({\n              size: { x: 6, y: 11, width: 12, height: 10 },\n              direction: 'column',\n              children: [\n                new VizPanel({\n                  size: { ySizing: 'fill' },\n                  isDraggable: true,\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n                new VizPanel({\n                  isDraggable: true,\n                  size: { ySizing: 'fill' },\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n              ],\n            }),\n          ],\n        }),\n      ],\n    }),\n\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneCanvasText } from '../components/SceneCanvasText';\nimport { SceneSubMenu } from '../components/SceneSubMenu';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneFlexLayout } from '../components/layout/SceneFlexLayout';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { VariableValueSelectors } from '../variables/components/VariableValueSelectors';\nimport { SceneVariableSet } from '../variables/sets/SceneVariableSet';\nimport { TestVariable } from '../variables/variants/TestVariable';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getVariablesDemo(): Scene {\n  const scene = new Scene({\n    title: 'Variables',\n    $variables: new SceneVariableSet({\n      variables: [\n        new TestVariable({\n          name: 'server',\n          query: 'A.*',\n          value: 'server',\n          text: '',\n          delayMs: 1000,\n          options: [],\n        }),\n        new TestVariable({\n          name: 'pod',\n          query: 'A.$server.*',\n          value: 'pod',\n          delayMs: 1000,\n          text: '',\n          options: [],\n        }),\n        new TestVariable({\n          name: 'handler',\n          query: 'A.$server.$pod.*',\n          value: 'handler',\n          delayMs: 1000,\n          //isMulti: true,\n          text: '',\n          options: [],\n        }),\n      ],\n    }),\n    layout: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexLayout({\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'handler: $handler',\n              $data: getQueryRunnerWithRandomWalkQuery({\n                alias: 'handler: $handler',\n              }),\n            }),\n            new SceneCanvasText({\n              size: { width: '40%' },\n              text: 'server - pod: ${server} - ${pod}',\n              fontSize: 20,\n              align: 'center',\n            }),\n          ],\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    actions: [new SceneTimePicker({})],\n    subMenu: new SceneSubMenu({\n      children: [new VariableValueSelectors({})],\n    }),\n  });\n\n  return scene;\n}\n","export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n"],"names":["SceneListPage","scenes","getScenes","navId","Stack","direction","map","scene","href","state","title","ScenePage","props","getSceneByTitle","match","params","name","Component","model","sceneTemplateInterpolator","target","sceneObject","getVariables","variableRegex","replace","var1","var2","fmt2","var3","fieldPath","fmt3","variable","lookupSceneVariable","value","getValue","isArray","String","variables","$variables","parent","found","getByName","SceneComponentEditingWrapper","children","styles","useStyles2","getStyles","editor","getSceneEditor","hoverObject","selectedObject","useState","className","wrapper","ref","hover","selected","style","onMouseEnter","onMouseEnterObject","onMouseLeave","onMouseLeaveObject","onClick","evt","stopPropagation","onSelectObject","theme","css","display","flexGrow","padding","border","colors","primary","main","cursor","error","SceneComponentWrapper","isEditing","otherProps","constructor","EmptyRenderer","inner","useEffect","isActive","activate","deactivate","_renderCount","_","SceneObjectStateChangedEvent","BusEventWithPayload","forEachSceneObjectInState","callback","propValue","Object","values","SceneObjectBase","Array","child","Subject","EventBusSrv","Subscription","key","uuidv4","this","_state","_subject","next","setParent","_isActive","_parent","variableDependency","_variableDependency","Editor","subscribeToState","observerOrNext","subscribe","subscribeToEvent","eventType","handler","_events","setState","update","prevState","publishEvent","newState","partialUpdate","changedObject","event","bubble","publish","getRoot","$data","removeAllListeners","_subs","unsubscribe","complete","forceUpdate","useForceUpdate","s","useSceneObjectState","getTimeRange","$timeRange","Error","getData","getLayout","$editor","forceRender","clone","withState","clonedState","newArray","push","assign","cloneSceneObject","interpolate","getNames","size","UrlSyncManager","sceneRoot","location","payload","urlUpdate","getUrlState","locationService","stateChangeSub","onStateChanged","locationListenerUnsub","listen","onLocationUpdate","cleanUp","Scene","super","urlSyncManager","layout","actions","subMenu","toolbarActions","action","ToolbarButton","icon","variant","pageToolbar","config","AppChromeUpdate","A","PageToolbar","Page","pageNav","text","PageLayoutType","toolbar","flexDirection","gap","overflow","VariableDependencyConfig","_sceneObject","options","Set","_statePaths","statePaths","_onReferencedVariableValueChanged","onReferencedVariableValueChanged","defaultHandlerReferencedVariableValueChanged","hasDependencyOn","has","variableValuesChanged","deps","scanStateForDependencies","_dependencies","path","clear","scanCount","extractVariablesFrom","matches","safeStringifyValue","matchAll","variableName","add","JSON","stringify","console","SceneCanvasText","fontSize","Field","label","Input","I","type","defaultValue","onBlur","parseInt","currentTarget","align","alignItems","justifyContent","SceneDataNode","ScenePanelRepeater","data","LoadingState","performRepeat","firstChild","newChildren","series","length","SceneTimePicker","hidePicker","timeRange","timeRangeState","ToolbarButtonRow","alignment","TimePickerWithHistory","onChange","onTimeRangeChange","timeZone","fiscalYearStartMonth","onMoveBackward","onMoveForward","onZoom","onChangeTimeZone","onChangeFiscalYearStartMonth","RefreshPicker","onRefresh","onIntervalChanged","SceneToolbarInput","width","SceneDragHandle","layoutKey","height","Icon","VizPanel","raw","from","toUtc","to","ScenePanelRenderer","pluginId","fieldConfig","isDraggable","dragHandle","titleInterpolated","PanelChrome","leftItems","undefined","innerWidth","innerHeight","PanelRenderer","onOptionsChange","onChangeTimeRange","onSetTimeRange","displayName","SceneFlexLayout","toggleDirection","FlexLayoutChildComponent","item","getItemStyles","sizing","xSizing","ySizing","minWidth","minHeight","alignSelf","RadioButtonGroup","SceneTimeRange","updateFromUrl","SceneObjectEditor","OptionsPaneCategory","id","forceOpen","isSceneObject","obj","SceneObjectTree","node","propKey","keys","isSelected","header","cx","fontWeight","color","spacing","secondary","paddingLeft","SceneEditManager","SceneEditorRenderer","container","tree","weak","background","SceneQueryRunner","runQueries","runWithTimeRange","querySub","queries","cloneDeep","request","app","CoreApp","requestId","getNextRequestId","timezone","panelId","dashboardId","range","interval","intervalMs","targets","maxDataPoints","scopedVars","startTime","Date","now","ds","async","datasource","query","getDatasourceSrv","get","getDataSource","getRef","lowerIntervalLimit","norm","rangeUtil","__interval","__interval_ms","toString","runRequest","log","err","getQueryRunnerWithRandomWalkQuery","overrides","refId","uid","scenarioId","getScenePanelRepeaterTest","queryRunner","seriesCount","alias","legend","displayMode","defaults","graphMode","getDefaultTimeRange","newValue","SceneGridLayout","sortChildrenByPosition","_skipOnLayoutChange","getSceneLayoutChild","i","nextSize","x","y","w","h","a","b","o","n","gridLayout","updatedItem","sceneChild","sortGridLayout","gridItem","childSize","indexOfUpdatedItem","findIndex","newParent","findGridItemSceneParent","moveChildTo","toggleRow","row","isCollapsed","rowChildren","rowY","yDiff","yMax","panel","newSize","Math","max","Number","pushDownAmount","pushChildDown","SceneGridRow","rowChild","amount","startAt","currentParent","rootChildren","newChild","newRow","filter","c","targetRow","toGridCell","isInteger","DEFAULT_PANEL_SPAN","Boolean","isResizable","buildGridLayout","cells","cell","find","validateChildrenSize","disableHeight","containerPadding","useCSSTransforms","margin","GRID_CELL_VMARGIN","cols","GRID_COLUMN_COUNT","rowHeight","GRID_CELL_HEIGHT","draggableHandle","onDragStop","onResizeStop","onLayoutChange","isBounded","isCollapsible","getSceneGridRowStyles","rowHeader","rowHeaderCollapsed","onCollapseToggle","rowTitleWrapper","rowTitle","position","zIndex","marginBottom","borderRadius","shape","typography","h6","sort","getGridWithMultipleTimeRanges","globalTimeRange","dateTime","row1TimeRange","subtract","NestedScene","canCollapse","canRemove","onRemove","role","toggle","Button","fill","onToggle","h5","SceneSubMenu","VariableValueSelectors","VariableValueSelectWrapper","hide","VariableHide","VariableLabel","elementId","labelOrName","description","Tooltip","content","placement","selectors","htmlFor","SceneVariableValueChangedEvent","SceneVariableSet","Map","variableThatChanged","variablesThatHaveChanged","updating","otherVariable","variablesToUpdate","updateNextBatch","onVariableValueChanged","validateAndUpdateAll","subscription","notifyDependentSceneObjects","validateAndUpdate","hasDependendencyInUpdateQueue","set","validateAndUpdateCompleted","handleVariableError","delete","loading","traverseSceneAndNotify","VariableValueSelect","isMulti","placeholder","allowCustomValue","isLoading","onMultiValueChange","Select","onSingleValueChange","MultiValueVariable","changeValueAndPublishChangeEvent","v","getValueOptions","pipe","updateValueGivenNewOptions","setStateHelper","getValueText","join","TestVariable","args","delayMs","Observable","observer","timeout","completeUpdate","issueQuery","setTimeout","signalUpdateCompleted","isGettingValues","clearTimeout","interpolatedQuery","queryMetricTree","issuedQuery","cache","buildMetricTree","depth","chars","letter","nodeName","queryTree","queryIndex","nodeQuery","result","namesToMatch","startsWith","split","nameToMatch","indexOf","pattern","RegExp","test","concat"],"sourceRoot":""}