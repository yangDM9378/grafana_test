{"version":3,"file":"BenchmarksPage.2ee05a63a5d963181478.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-ui-virtual-639b13027c/1/packages/grafana-ui/src/components/ThemeDemos/EmotionPerfTest.tsx","webpack://grafana/./public/app/features/sandbox/BenchmarksPage.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { css, CSSInterpolation, cx } from '@emotion/css';\nimport { jsx } from '@emotion/react';\nimport classnames from 'classnames';\nimport { Profiler, ProfilerOnRenderCallback, useState, FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2, useTheme2 } from '../../themes';\nimport { Button } from '../Button';\nimport { VerticalGroup } from '../Layout/Layout';\n\nexport function EmotionPerfTest() {\n  console.log('process.env.NODE_ENV', process.env.NODE_ENV);\n\n  return (\n    <VerticalGroup>\n      <div>Emotion performance tests</div>\n      <TestScenario name=\"No styles\" Component={NoStyles} />\n      <TestScenario name=\"inline emotion/css\" Component={InlineEmotionCSS} />\n      <TestScenario name=\"useStyles no cx\" Component={UseStylesNoCX} />\n      <TestScenario name=\"useStyles with conditional cx styles\" Component={UseStylesWithConditionalCX} />\n      <TestScenario name=\"useStyles with css prop\" Component={UseStylesWithCSSProp} />\n      <TestScenario name=\"useStyles with conditional css prop\" Component={UseStylesWithConditionalCSS} />\n      <TestScenario name=\"useStyles with conditional classnames\" Component={UseStylesWithConditionalClassNames} />\n    </VerticalGroup>\n  );\n}\n\nexport const TestScenario: FC<{ name: string; Component: FC<TestComponentProps> }> = ({ name, Component }) => {\n  const [render, setRender] = useState(0);\n\n  return (\n    <div>\n      <Button onClick={() => setRender(render > 2 ? 0 : render + 1)}>{name}</Button>\n      {render > 0 && <MeasureRender id={name}>{renderManyComponents(Component)}</MeasureRender>}\n    </div>\n  );\n};\n\nTestScenario.displayName = 'TestScenario';\n\nfunction renderManyComponents(Component: FC<TestComponentProps>) {\n  const elements: React.ReactNode[] = [];\n\n  for (let i = 0; i < 5000; i++) {\n    elements.push(<Component index={i} key={i.toString()} />);\n  }\n\n  return <div style={{ display: 'flex', flexWrap: 'wrap' }}>{elements}</div>;\n}\n\ninterface TestComponentProps {\n  index: number;\n}\n\nfunction UseStylesNoCX({ index }: TestComponentProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.main}>\n      <div className={styles.child}>{index}</div>\n    </div>\n  );\n}\n\nfunction UseStylesWithConditionalCX({ index }: TestComponentProps) {\n  const styles = useStyles2(getStyles);\n  const mainStyles = cx(styles.main, { [styles.large]: index > 10, [styles.disabed]: index % 10 === 0 });\n\n  return (\n    <div className={mainStyles}>\n      <div className={styles.child}>{index}</div>\n    </div>\n  );\n}\n\nfunction UseStylesWithConditionalClassNames({ index }: TestComponentProps) {\n  const styles = useStyles2(getStyles);\n  const mainStyles = classnames(styles.main, { [styles.large]: index > 10, [styles.disabed]: index % 10 === 0 });\n\n  return (\n    <div className={mainStyles}>\n      <div className={styles.child}>{index}</div>\n    </div>\n  );\n}\n\nfunction UseStylesWithCSSProp({ index }: TestComponentProps) {\n  const styles = useStyles2(getStylesObjects);\n\n  return (\n    <div css={styles.main}>\n      <div css={styles.child}>{index}</div>\n    </div>\n  );\n}\n\nfunction UseStylesWithConditionalCSS({ index }: TestComponentProps) {\n  const styles = useStyles2(getStylesObjects);\n  const mainStyles = [styles.main, index > 10 && styles.large, index % 10 === 0 && styles.disabed];\n  return (\n    <div css={mainStyles}>\n      <div css={styles.child}>{index}</div>\n    </div>\n  );\n}\n\nfunction InlineEmotionCSS({ index }: TestComponentProps) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.child}>{index}</div>\n    </div>\n  );\n}\n\nfunction NoStyles({ index }: TestComponentProps) {\n  return (\n    <div className=\"no-styles-main\">\n      <div className=\"no-styles-child\">{index}</div>\n    </div>\n  );\n}\n\nfunction MeasureRender({ children, id }: { children: React.ReactNode; id: string }) {\n  const onRender: ProfilerOnRenderCallback = (\n    id: string,\n    phase: 'mount' | 'update',\n    actualDuration: number,\n    baseDuration: number,\n    startTime: number,\n    commitTime: number\n  ) => {\n    console.log('Profile ' + id, actualDuration);\n  };\n\n  return (\n    <Profiler id={id} onRender={onRender}>\n      {children}\n    </Profiler>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    main: css(getStylesObjectMain(theme)),\n    large: css({\n      fontSize: '20px',\n      color: 'red',\n    }),\n    disabed: css({\n      fontSize: '10px',\n      color: 'gray',\n    }),\n    child: css(getStylesObjectChild(theme)),\n  };\n};\n\nconst getStylesObjects = (theme: GrafanaTheme2) => {\n  return {\n    main: getStylesObjectMain(theme),\n    large: {\n      fontSize: '20px',\n      color: 'red',\n    },\n    disabed: {\n      fontSize: '10px',\n      color: 'gray',\n    },\n    child: getStylesObjectChild(theme),\n  };\n};\n\nfunction getStylesObjectMain(theme: GrafanaTheme2): CSSInterpolation {\n  return {\n    background: 'blue',\n    border: '1px solid red',\n    color: 'white',\n    padding: theme.spacing(1),\n    shadow: theme.shadows.z1,\n    ':hover': {\n      background: theme.colors.background.primary,\n    },\n  };\n}\n\nfunction getStylesObjectChild(theme: GrafanaTheme2): CSSInterpolation {\n  return {\n    padding: '2px',\n    fontSize: '10px',\n    boxShadow: 'none',\n    textAlign: 'center',\n    textDecoration: 'none',\n  };\n}\n","import React from 'react';\n\nimport { VerticalGroup } from '@grafana/ui';\nimport { EmotionPerfTest } from '@grafana/ui/src/components/ThemeDemos/EmotionPerfTest';\n\nexport const BenchmarksPage = () => {\n  return (\n    <VerticalGroup>\n      <EmotionPerfTest />\n    </VerticalGroup>\n  );\n};\n\nexport default BenchmarksPage;\n"],"names":["EmotionPerfTest","console","log","process","TestScenario","name","Component","NoStyles","InlineEmotionCSS","UseStylesNoCX","UseStylesWithConditionalCX","UseStylesWithCSSProp","UseStylesWithConditionalCSS","UseStylesWithConditionalClassNames","render","setRender","useState","Button","onClick","MeasureRender","id","elements","i","push","index","key","toString","style","display","flexWrap","renderManyComponents","styles","useStyles2","getStyles","className","main","child","mainStyles","cx","large","disabed","classnames","getStylesObjects","css","theme","useTheme2","children","Profiler","onRender","phase","actualDuration","baseDuration","startTime","commitTime","displayName","getStylesObjectMain","fontSize","color","padding","boxShadow","textAlign","textDecoration","background","border","spacing","shadow","shadows","z1","colors","primary","BenchmarksPage"],"sourceRoot":""}