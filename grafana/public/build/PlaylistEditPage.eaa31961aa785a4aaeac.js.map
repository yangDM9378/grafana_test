{"version":3,"file":"PlaylistEditPage.eaa31961aa785a4aaeac.js","mappings":"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","sources":["webpack://grafana/./public/app/features/playlist/PlaylistEditPage.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTableRows.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTable.tsx","webpack://grafana/./public/app/features/playlist/PlaylistForm.tsx","webpack://grafana/./public/app/features/playlist/usePlaylistItems.tsx"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { PlaylistForm } from './PlaylistForm';\nimport { getPlaylist, updatePlaylist } from './api';\nimport { Playlist } from './types';\n\nexport interface RouteParams {\n  uid: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<RouteParams> {}\n\nexport const PlaylistEditPage = ({ match }: Props) => {\n  const playlist = useAsync(() => getPlaylist(match.params.uid), [match.params]);\n\n  const onSubmit = async (playlist: Playlist) => {\n    await updatePlaylist(match.params.uid, playlist);\n    locationService.push('/playlists');\n  };\n\n  const pageNav: NavModelItem = {\n    text: 'Edit playlist',\n    subTitle:\n      'A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build situational awareness, or just show off your metrics to your team or visitors.',\n  };\n\n  return (\n    <Page navId=\"dashboards/playlists\" pageNav={pageNav}>\n      <Page.Contents isLoading={playlist.loading}>\n        {playlist.error && <div>Error loading playlist: {JSON.stringify(playlist.error)}</div>}\n\n        {playlist.value && <PlaylistForm onSubmit={onSubmit} playlist={playlist.value} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default PlaylistEditPage;\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { ReactNode } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, IconButton, useStyles2, Spinner, IconName } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  onDelete: (idx: number) => void;\n}\n\nexport const PlaylistTableRows = ({ items, onDelete }: Props) => {\n  const styles = useStyles2(getStyles);\n  if (!items?.length) {\n    return (\n      <div>\n        <em>Playlist is empty. Add dashboards below.</em>\n      </div>\n    );\n  }\n\n  const renderItem = (item: PlaylistItem) => {\n    let icon: IconName = item.type === 'dashboard_by_tag' ? 'apps' : 'tag-alt';\n    const info: ReactNode[] = [];\n\n    const first = item.dashboards?.[0];\n    if (!item.dashboards) {\n      info.push(<Spinner key=\"spinner\" />);\n    } else if (item.type === 'dashboard_by_tag') {\n      info.push(<TagBadge key={item.value} label={item.value} removeIcon={false} count={0} />);\n      if (!first) {\n        icon = 'exclamation-triangle';\n        info.push(<span key=\"info\">&nbsp; No dashboards found</span>);\n      } else {\n        info.push(<span key=\"info\">&nbsp; {pluralize('dashboard', item.dashboards.length, true)}</span>);\n      }\n    } else if (first) {\n      info.push(\n        item.dashboards.length > 1 ? (\n          <span key=\"info\">Multiple items found: ${item.value}</span>\n        ) : (\n          <span key=\"info\">{first.name ?? item.value}</span>\n        )\n      );\n    } else {\n      icon = 'exclamation-triangle';\n      info.push(<span key=\"info\">&nbsp; Not found: {item.value}</span>);\n    }\n    return (\n      <>\n        <Icon name={icon} className={styles.rightMargin} key=\"icon\" />\n        {info}\n      </>\n    );\n  };\n\n  return (\n    <>\n      {items.map((item, index) => (\n        <Draggable key={`${index}/${item.value}`} draggableId={`${index}`} index={index}>\n          {(provided) => (\n            <div\n              className={styles.row}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              role=\"row\"\n            >\n              <div className={styles.actions} role=\"cell\" aria-label={`Playlist item, ${item.type}, ${item.value}`}>\n                {renderItem(item)}\n              </div>\n              <div className={styles.actions}>\n                <IconButton\n                  name=\"times\"\n                  size=\"md\"\n                  onClick={() => onDelete(index)}\n                  aria-label={selectors.pages.PlaylistForm.itemDelete}\n                  type=\"button\"\n                />\n                <Icon title=\"Drag and drop to reorder\" name=\"draggabledots\" size=\"md\" />\n              </div>\n            </div>\n          )}\n        </Draggable>\n      ))}\n    </>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    row: css`\n      padding: 6px;\n      background: ${theme.colors.background.secondary};\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 3px;\n\n      border: 1px solid ${theme.colors.border.medium};\n      &:hover {\n        border: 1px solid ${theme.colors.border.strong};\n      }\n    `,\n    rightMargin: css`\n      margin-right: 5px;\n    `,\n    actions: css`\n      align-items: center;\n      justify-content: center;\n      display: flex;\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  deleteItem: (idx: number) => void;\n  moveItem: (src: number, dst: number) => void;\n}\n\nexport const PlaylistTable = ({ items, deleteItem, moveItem }: Props) => {\n  const onDragEnd = (d: DropResult) => {\n    if (d.destination) {\n      moveItem(d.source.index, d.destination?.index);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"playlist-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <PlaylistTableRows items={items} onDelete={deleteItem} />\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { TagFilter } from 'app/core/components/TagFilter/TagFilter';\n\nimport { getGrafanaSearcher } from '../search/service';\n\nimport { PlaylistTable } from './PlaylistTable';\nimport { Playlist } from './types';\nimport { usePlaylistItems } from './usePlaylistItems';\n\ninterface Props {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nexport const PlaylistForm = ({ onSubmit, playlist }: Props) => {\n  const [saving, setSaving] = useState(false);\n  const { name, interval, items: propItems } = playlist;\n  const tagOptions = useMemo(() => {\n    return () => getGrafanaSearcher().tags({ kind: ['dashboard'] });\n  }, []);\n\n  const { items, addById, addByTag, deleteItem, moveItem } = usePlaylistItems(propItems);\n\n  const doSubmit = (list: Playlist) => {\n    setSaving(true);\n    onSubmit({ ...list, items });\n  };\n\n  return (\n    <div>\n      <Form onSubmit={doSubmit} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} deleteItem={deleteItem} moveItem={moveItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPicker id=\"dashboard-picker\" onChange={addById} key={items.length} />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={tagOptions}\n                    onChange={addByTag}\n                    placeholder=\"Select a tag\"\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  disabled={isDisabled}\n                  icon={saving ? 'fa fa-spinner' : undefined}\n                >\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DashboardPickerDTO } from 'app/core/components/Select/DashboardPicker';\n\nimport { loadDashboards } from './api';\nimport { PlaylistItem } from './types';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  // Attach dashboards if any were missing\n  useAsync(async () => {\n    for (const item of items) {\n      if (!item.dashboards) {\n        setItems(await loadDashboards(items));\n        return;\n      }\n    }\n  }, [items]);\n\n  const addById = useCallback(\n    (dashboard?: DashboardPickerDTO) => {\n      if (!dashboard) {\n        return;\n      }\n\n      setItems([\n        ...items,\n        {\n          type: 'dashboard_by_uid',\n          value: dashboard.uid,\n        },\n      ]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        type: 'dashboard_by_tag',\n        value: tag,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const moveItem = useCallback(\n    (src: number, dst: number) => {\n      if (src === dst || !items[src]) {\n        return; // nothing to do\n      }\n      const update = Array.from(items);\n      const [removed] = update.splice(src, 1);\n      update.splice(dst, 0, removed);\n      setItems(update);\n    },\n    [items]\n  );\n\n  const deleteItem = useCallback(\n    (index: number) => {\n      const copy = items.slice();\n      copy.splice(index, 1);\n      setItems(copy);\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveItem };\n}\n"],"names":["PlaylistEditPage","match","playlist","useAsync","getPlaylist","params","uid","navId","pageNav","text","subTitle","isLoading","loading","error","JSON","stringify","value","onSubmit","async","updatePlaylist","locationService","PlaylistTableRows","items","onDelete","styles","useStyles2","getStyles","length","renderItem","item","icon","type","info","first","dashboards","push","TagBadge","label","removeIcon","count","pluralize","name","Spinner","Icon","className","rightMargin","map","index","draggableId","provided","row","ref","innerRef","draggableProps","dragHandleProps","role","actions","IconButton","size","onClick","selectors","title","theme","css","colors","background","secondary","border","medium","strong","settings","PlaylistTable","deleteItem","moveItem","onDragEnd","d","destination","source","droppableId","direction","droppableProps","placeholder","PlaylistForm","saving","setSaving","useState","interval","propItems","tagOptions","useMemo","getGrafanaSearcher","tags","kind","addById","addByTag","playlistItems","setItems","loadDashboards","useCallback","dashboard","tag","find","newItem","src","dst","update","Array","from","removed","splice","copy","slice","usePlaylistItems","Form","list","validateOn","register","errors","isDisabled","Object","keys","Field","invalid","message","Input","I","required","defaultValue","DashboardPicker","id","onChange","TagFilter","isClearable","hideValues","Button","variant","disabled","undefined","href","config"],"sourceRoot":""}