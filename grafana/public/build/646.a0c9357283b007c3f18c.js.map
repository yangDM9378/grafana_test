{"version":3,"file":"646.a0c9357283b007c3f18c.js","mappings":"gSA6BO,MAAMA,EAAyBC,IACpC,MAAMC,GAAYC,EAAAA,EAAAA,MA2BZC,EAAgB,CACpBC,MAAOJ,EAAMK,YAAYD,MACzBE,KAAMN,EAAMK,YAAYC,MAG1B,OACE,SAAC,KAAW,WACV,SAAC,KAAQ,WACP,SAAC,IAAI,CAACH,cAAeA,EAAeI,SAlCzBC,UACO,KAAlBC,EAASC,aACJD,EAASC,YAEXD,EAASE,QAgBM,kCAdCC,EAAAA,EAAAA,KACpBC,KAAK,yBAA0B,CAC9BT,MAAOK,EAASL,MAChBE,KAAMG,EAASH,KACfQ,SAAUL,EAASL,MACnBW,QAASN,EAASM,QAClBC,SAAUP,EAASO,SACnBN,KAAMD,EAASC,OAEhBO,OAAOC,IAAQ,MACd,MAAMC,GAAc,QAAR,EAAAD,EAAIE,YAAI,aAAR,EAAUC,UAAWH,EACjCjB,EAAUqB,QAAQH,EAAI,KAGbb,MACXiB,OAAOC,SAASC,QAAOC,EAAAA,EAAAA,MAAYC,UAAY,gCAEjDJ,OAAOC,SAASC,QAAOC,EAAAA,EAAAA,MAAYC,UAAY,IAAI,EAWQ,SACpD,kBAAC,OAAEC,EAAM,SAAEC,EAAQ,UAAEC,GAA+B,SACnD,iCACE,SAAC,IAAK,CAACC,MAAM,YAAW,UACtB,SAAC,EAAAC,EAAK,eAACC,GAAG,aAAgBJ,EAAS,QAAO,CAAEK,YAAY,mBAE1D,SAAC,IAAK,CAACH,MAAM,QAAQI,UAAWP,EAAOxB,MAAOgC,MAAmB,QAAd,EAAER,EAAOxB,aAAK,aAAZ,EAAciB,QAAQ,UACzE,SAAC,EAAAW,EAAK,eACJC,GAAG,SACCJ,EAAS,QAAS,CACpBQ,SAAU,oBACVC,QAAS,CACPC,MAAOC,EAAAA,GACPnB,QAAS,sBAEX,CACFoB,KAAK,QACLP,YAAY,eAGdR,EAAAA,EAAAA,MAAYgB,gBACZ,SAAC,IAAK,CAACX,MAAM,YAAW,UACtB,SAAC,EAAAC,EAAK,eAACC,GAAG,YAAeJ,EAAS,WAAU,CAAEK,YAAY,kBAG7DR,EAAAA,EAAAA,MAAYiB,qBACX,SAAC,IAAK,CAACZ,MAAM,+CAA8C,UACzD,SAAC,EAAAC,EAAK,eAACC,GAAG,qBAAwBJ,EAAS,QAAO,CAAEK,YAAY,aAGpE,SAAC,IAAK,CAACH,MAAM,WAAWI,UAAWP,EAAOZ,SAAUoB,MAAOR,SAAgB,QAAV,EAANA,EAAQZ,gBAAQ,WAAV,EAAN,EAAkBK,QAAQ,UACnF,SAAC,IAAa,eACZY,GAAG,eACHW,WAAS,EACTC,aAAa,gBACThB,EAAS,WAAY,CAAEQ,SAAU,8BAGzC,SAAC,IAAK,CAACN,MAAM,mBAAmBI,UAAWP,EAAOjB,QAASyB,MAAOR,SAAe,QAAT,EAANA,EAAQjB,eAAO,WAAT,EAAN,EAAiBU,QAAQ,UACzF,SAAC,IAAa,eACZY,GAAG,uBACHY,aAAa,gBACThB,EAAS,UAAW,CACtBQ,SAAU,iCACVS,SAAWC,GAAMA,IAAMjB,IAAYd,UAAY,+BAKrD,UAAC,KAAe,kBACd,SAAC,KAAM,CAACyB,KAAK,SAAQ,sBACrB,SAAC,KAAU,CAACO,KAAK,OAAOC,MAAMvB,EAAAA,EAAAA,MAAYC,UAAY,SAAS,gCAIhE,OAIG,EAIlB,G,4DC7HO,MAAMa,EACX,wIAOK,MAAMU,EAAiB,IALvB,WAAmB,MACxB,MAAMC,EAA2B,QAArB,EAAGC,EAAAA,EAAAA,mBAAkB,aAAlB,EAAoBC,YACnC,SAAUF,GAAUA,EAAS,EAC/B,CAEoCG,IAAaF,EAAAA,EAAAA,eAAAA,iB","sources":["webpack://grafana/./public/app/core/components/Signup/SignupPage.tsx","webpack://grafana/./public/app/features/admin/utils.ts"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, HorizontalGroup, LinkButton, FormAPI } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { w3cStandardEmailValidator } from 'app/features/admin/utils';\n\nimport { InnerBox, LoginLayout } from '../Login/LoginLayout';\nimport { PasswordField } from '../PasswordField/PasswordField';\n\ninterface SignupDTO {\n  name?: string;\n  email: string;\n  username: string;\n  orgName?: string;\n  password: string;\n  code: string;\n  confirm?: string;\n}\n\ninterface QueryParams {\n  email?: string;\n  code?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<{}, QueryParams> {}\n\nexport const SignupPage: FC<Props> = (props) => {\n  const notifyApp = useAppNotification();\n  const onSubmit = async (formData: SignupDTO) => {\n    if (formData.name === '') {\n      delete formData.name;\n    }\n    delete formData.confirm;\n\n    const response = await getBackendSrv()\n      .post('/api/user/signup/step2', {\n        email: formData.email,\n        code: formData.code,\n        username: formData.email,\n        orgName: formData.orgName,\n        password: formData.password,\n        name: formData.name,\n      })\n      .catch((err) => {\n        const msg = err.data?.message || err;\n        notifyApp.warning(msg);\n      });\n\n    if (response.code === 'redirect-to-select-org') {\n      window.location.assign(getConfig().appSubUrl + '/profile/select-org?signup=1');\n    }\n    window.location.assign(getConfig().appSubUrl + '/');\n  };\n\n  const defaultValues = {\n    email: props.queryParams.email,\n    code: props.queryParams.code,\n  };\n\n  return (\n    <LoginLayout>\n      <InnerBox>\n        <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n          {({ errors, register, getValues }: FormAPI<SignupDTO>) => (\n            <>\n              <Field label=\"Your name\">\n                <Input id=\"user-name\" {...register('name')} placeholder=\"(optional)\" />\n              </Field>\n              <Field label=\"Email\" invalid={!!errors.email} error={errors.email?.message}>\n                <Input\n                  id=\"email\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: w3cStandardEmailValidator,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                  type=\"email\"\n                  placeholder=\"Email\"\n                />\n              </Field>\n              {!getConfig().autoAssignOrg && (\n                <Field label=\"Org. name\">\n                  <Input id=\"org-name\" {...register('orgName')} placeholder=\"Org. name\" />\n                </Field>\n              )}\n              {getConfig().verifyEmailEnabled && (\n                <Field label=\"Email verification code (sent to your email)\">\n                  <Input id=\"verification-code\" {...register('code')} placeholder=\"Code\" />\n                </Field>\n              )}\n              <Field label=\"Password\" invalid={!!errors.password} error={errors?.password?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoFocus\n                  autoComplete=\"new-password\"\n                  {...register('password', { required: 'Password is required' })}\n                />\n              </Field>\n              <Field label=\"Confirm password\" invalid={!!errors.confirm} error={errors?.confirm?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirm', {\n                    required: 'Confirmed password is required',\n                    validate: (v) => v === getValues().password || 'Passwords must match!',\n                  })}\n                />\n              </Field>\n\n              <HorizontalGroup>\n                <Button type=\"submit\">Submit</Button>\n                <LinkButton fill=\"text\" href={getConfig().appSubUrl + '/login'}>\n                  Back to login\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          )}\n        </Form>\n      </InnerBox>\n    </LoginLayout>\n  );\n};\n\nexport default SignupPage;\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n"],"names":["SignupPage","props","notifyApp","useAppNotification","defaultValues","email","queryParams","code","onSubmit","async","formData","name","confirm","getBackendSrv","post","username","orgName","password","catch","err","msg","data","message","warning","window","location","assign","getConfig","appSubUrl","errors","register","getValues","label","I","id","placeholder","invalid","error","required","pattern","value","w3cStandardEmailValidator","type","autoAssignOrg","verifyEmailEnabled","autoFocus","autoComplete","validate","v","fill","href","highlightTrial","expiry","config","trialExpiry","isTrial"],"sourceRoot":""}