{"version":3,"file":"9076.637f4fd32666ef6824c7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/SelectWIthAdd.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationKeyInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertLabelDropdown.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/LabelsField.tsx"],"sourcesContent":["import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC, useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Input, Select } from '@grafana/ui';\n\ninterface Props {\n  onChange: (value: string) => void;\n  options: Array<SelectableValue<string>>;\n  value?: string;\n  addLabel?: string;\n  className?: string;\n  placeholder?: string;\n  custom?: boolean;\n  onCustomChange?: (custom: boolean) => void;\n  width?: number;\n  disabled?: boolean;\n  'aria-label'?: string;\n}\n\nexport const SelectWithAdd: FC<Props> = ({\n  value,\n  onChange,\n  options,\n  className,\n  placeholder,\n  width,\n  custom,\n  onCustomChange,\n  disabled = false,\n  addLabel = '+ Add new',\n  'aria-label': ariaLabel,\n}) => {\n  const [isCustom, setIsCustom] = useState(custom);\n\n  useEffect(() => {\n    if (custom) {\n      setIsCustom(custom);\n    }\n  }, [custom]);\n\n  const _options = useMemo(\n    (): Array<SelectableValue<string>> => [...options, { value: '__add__', label: addLabel }],\n    [options, addLabel]\n  );\n\n  if (isCustom) {\n    return (\n      <Input\n        aria-label={ariaLabel}\n        width={width}\n        autoFocus={!custom}\n        value={value || ''}\n        placeholder={placeholder}\n        className={className}\n        disabled={disabled}\n        onChange={(e) => onChange(e.currentTarget.value)}\n      />\n    );\n  } else {\n    return (\n      <Select\n        aria-label={ariaLabel}\n        width={width}\n        options={_options}\n        value={value}\n        className={className}\n        placeholder={placeholder}\n        disabled={disabled}\n        onChange={(val: SelectableValue) => {\n          const value = val?.value;\n          if (value === '__add__') {\n            setIsCustom(true);\n            if (onCustomChange) {\n              onCustomChange(true);\n            }\n            onChange('');\n          } else {\n            onChange(value);\n          }\n        }}\n      />\n    );\n  }\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { Annotation, annotationLabels } from '../../utils/constants';\n\nimport { SelectWithAdd } from './SelectWIthAdd';\n\ninterface Props {\n  onChange: (value: string) => void;\n  existingKeys: string[];\n\n  value?: string;\n  width?: number;\n  className?: string;\n  'aria-label'?: string;\n}\n\nexport const AnnotationKeyInput: FC<Props> = ({ value, existingKeys, 'aria-label': ariaLabel, ...rest }) => {\n  const annotationOptions = useMemo(\n    (): SelectableValue[] =>\n      Object.values(Annotation)\n        .filter((key) => !existingKeys.includes(key)) // remove keys already taken in other annotations\n        .map((key) => ({ value: key, label: annotationLabels[key] })),\n    [existingKeys]\n  );\n\n  return (\n    <SelectWithAdd\n      aria-label={ariaLabel}\n      value={value}\n      options={annotationOptions}\n      custom={!!value && !(Object.values(Annotation) as string[]).includes(value)}\n      {...rest}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Input, InputControl, Label, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { AnnotationKeyInput } from './AnnotationKeyInput';\n\nconst AnnotationsField = () => {\n  const styles = useStyles2(getStyles);\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n  const annotations = watch('annotations');\n\n  const existingKeys = useCallback(\n    (index: number): string[] => annotations.filter((_, idx: number) => idx !== index).map(({ key }) => key),\n    [annotations]\n  );\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'annotations' });\n\n  return (\n    <>\n      <Label>Summary and annotations</Label>\n      <div className={styles.flexColumn}>\n        {fields.map((annotationField, index) => {\n          const isUrl = annotations[index]?.key?.toLocaleLowerCase().endsWith('url');\n          const ValueInputComponent = isUrl ? Input : TextArea;\n\n          return (\n            <div key={annotationField.id} className={styles.flexRow}>\n              <Field\n                className={styles.field}\n                invalid={!!errors.annotations?.[index]?.key?.message}\n                error={errors.annotations?.[index]?.key?.message}\n                data-testid={`annotation-key-${index}`}\n              >\n                <InputControl\n                  name={`annotations.${index}.key`}\n                  defaultValue={annotationField.key}\n                  render={({ field: { ref, ...field } }) => (\n                    <AnnotationKeyInput\n                      {...field}\n                      aria-label={`Annotation detail ${index + 1}`}\n                      existingKeys={existingKeys(index)}\n                      width={18}\n                    />\n                  )}\n                  control={control}\n                  rules={{ required: { value: !!annotations[index]?.value, message: 'Required.' } }}\n                />\n              </Field>\n              <Field\n                className={cx(styles.flexRowItemMargin, styles.field)}\n                invalid={!!errors.annotations?.[index]?.value?.message}\n                error={errors.annotations?.[index]?.value?.message}\n              >\n                <ValueInputComponent\n                  data-testid={`annotation-value-${index}`}\n                  className={cx(styles.annotationValueInput, { [styles.textarea]: !isUrl })}\n                  {...register(`annotations.${index}.value`)}\n                  placeholder={isUrl ? 'https://' : `Text`}\n                  defaultValue={annotationField.value}\n                />\n              </Field>\n              <Button\n                type=\"button\"\n                className={styles.flexRowItemMargin}\n                aria-label=\"delete annotation\"\n                icon=\"trash-alt\"\n                variant=\"secondary\"\n                onClick={() => remove(index)}\n              />\n            </div>\n          );\n        })}\n        <Button\n          className={styles.addAnnotationsButton}\n          icon=\"plus-circle\"\n          type=\"button\"\n          variant=\"secondary\"\n          onClick={() => {\n            append({ key: '', value: '' });\n          }}\n        >\n          Add info\n        </Button>\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  annotationValueInput: css`\n    width: 426px;\n  `,\n  textarea: css`\n    height: 76px;\n  `,\n  addAnnotationsButton: css`\n    flex-grow: 0;\n    align-self: flex-start;\n    margin-left: 148px;\n  `,\n  flexColumn: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  field: css`\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n  flexRowItemMargin: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nexport default AnnotationsField;\n","import React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, Field } from '@grafana/ui';\n\nexport interface AlertLabelDropdownProps {\n  onChange: (newValue: SelectableValue<string>) => void;\n  onOpenMenu?: () => void;\n  options: SelectableValue[];\n  defaultValue?: SelectableValue;\n  type: 'key' | 'value';\n}\n\nconst AlertLabelDropdown: FC<AlertLabelDropdownProps> = React.forwardRef<HTMLDivElement, AlertLabelDropdownProps>(\n  function labelPicker({ onChange, options, defaultValue, type, onOpenMenu = () => {} }, ref) {\n    return (\n      <div ref={ref}>\n        <Field disabled={false} data-testid={`alertlabel-${type}-picker`}>\n          <Select\n            placeholder={`Choose ${type}`}\n            width={29}\n            className=\"ds-picker select-container\"\n            backspaceRemovesValue={false}\n            onChange={onChange}\n            onOpenMenu={onOpenMenu}\n            options={options}\n            maxMenuHeight={500}\n            noOptionsMessage=\"No labels found\"\n            defaultValue={defaultValue}\n            allowCustomValue\n          />\n        </Field>\n      </div>\n    );\n  }\n);\n\nexport default AlertLabelDropdown;\n","import { css, cx } from '@emotion/css';\nimport { flattenDeep, compact } from 'lodash';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { FieldArrayMethodProps, useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Field, InlineLabel, Label, useStyles2, Tooltip, Icon, Input, LoadingPlaceholder } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { RulerRuleGroupDTO } from 'app/types/unified-alerting-dto';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesIfNotFetchedYet } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\nimport AlertLabelDropdown from '../AlertLabelDropdown';\n\ninterface Props {\n  className?: string;\n  dataSourceName?: string | null;\n}\n\nconst useGetCustomLabels = (dataSourceName: string): { loading: boolean; labelsByKey: Record<string, string[]> } => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchRulerRulesIfNotFetchedYet(dataSourceName));\n  }, [dispatch, dataSourceName]);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const rulerRequest = rulerRuleRequests[dataSourceName];\n\n  const result = rulerRequest?.result || {};\n\n  //store all labels in a flat array and remove empty values\n  const labels = compact(\n    flattenDeep(\n      Object.keys(result).map((ruleGroupKey) =>\n        result[ruleGroupKey].map((ruleItem: RulerRuleGroupDTO) => ruleItem.rules.map((item) => item.labels))\n      )\n    )\n  );\n\n  const labelsByKey: Record<string, string[]> = {};\n\n  labels.forEach((label: Record<string, string>) => {\n    Object.entries(label).forEach(([key, value]) => {\n      labelsByKey[key] = [...new Set([...(labelsByKey[key] || []), value])];\n    });\n  });\n\n  return { loading: rulerRequest?.loading, labelsByKey };\n};\n\nfunction mapLabelsToOptions(items: string[] = []): Array<SelectableValue<string>> {\n  return items.map((item) => ({ label: item, value: item }));\n}\n\nconst RemoveButton: FC<{\n  remove: (index?: number | number[] | undefined) => void;\n  className: string;\n  index: number;\n}> = ({ remove, className, index }) => (\n  <Button\n    className={className}\n    aria-label=\"delete label\"\n    icon=\"trash-alt\"\n    data-testid={`delete-label-${index}`}\n    variant=\"secondary\"\n    onClick={() => {\n      remove(index);\n    }}\n  />\n);\n\nconst AddButton: FC<{\n  append: (\n    value: Partial<{ key: string; value: string }> | Array<Partial<{ key: string; value: string }>>,\n    options?: FieldArrayMethodProps | undefined\n  ) => void;\n  className: string;\n}> = ({ append, className }) => (\n  <Button\n    className={className}\n    icon=\"plus-circle\"\n    type=\"button\"\n    variant=\"secondary\"\n    onClick={() => {\n      append({ key: '', value: '' });\n    }}\n  >\n    Add label\n  </Button>\n);\n\nconst LabelsWithSuggestions: FC<{ dataSourceName: string }> = ({ dataSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const labels = watch('labels');\n  const { fields, remove, append } = useFieldArray({ control, name: 'labels' });\n\n  const { loading, labelsByKey } = useGetCustomLabels(dataSourceName);\n\n  const [selectedKey, setSelectedKey] = useState('');\n\n  const keys = useMemo(() => {\n    return mapLabelsToOptions(Object.keys(labelsByKey));\n  }, [labelsByKey]);\n\n  const getValuesForLabel = useCallback(\n    (key: string) => {\n      return mapLabelsToOptions(labelsByKey[key]);\n    },\n    [labelsByKey]\n  );\n\n  const values = useMemo(() => {\n    return getValuesForLabel(selectedKey);\n  }, [selectedKey, getValuesForLabel]);\n\n  return (\n    <>\n      {loading && <LoadingPlaceholder text=\"Loading\" />}\n      {!loading && (\n        <>\n          {fields.map((field, index) => {\n            return (\n              <div key={field.id}>\n                <div className={cx(styles.flexRow, styles.centerAlignRow)}>\n                  <Field\n                    className={styles.labelInput}\n                    invalid={Boolean(errors.labels?.[index]?.key?.message)}\n                    error={errors.labels?.[index]?.key?.message}\n                    data-testid={`label-key-${index}`}\n                  >\n                    <AlertLabelDropdown\n                      {...register(`labels.${index}.key`, {\n                        required: { value: Boolean(labels[index]?.value), message: 'Required.' },\n                      })}\n                      defaultValue={field.key ? { label: field.key, value: field.key } : undefined}\n                      options={keys}\n                      onChange={(newValue: SelectableValue) => {\n                        setValue(`labels.${index}.key`, newValue.value);\n                        setSelectedKey(newValue.value);\n                      }}\n                      type=\"key\"\n                    />\n                  </Field>\n                  <InlineLabel className={styles.equalSign}>=</InlineLabel>\n                  <Field\n                    className={styles.labelInput}\n                    invalid={Boolean(errors.labels?.[index]?.value?.message)}\n                    error={errors.labels?.[index]?.value?.message}\n                    data-testid={`label-value-${index}`}\n                  >\n                    <AlertLabelDropdown\n                      {...register(`labels.${index}.value`, {\n                        required: { value: Boolean(labels[index]?.key), message: 'Required.' },\n                      })}\n                      defaultValue={field.value ? { label: field.value, value: field.value } : undefined}\n                      options={values}\n                      onChange={(newValue: SelectableValue) => {\n                        setValue(`labels.${index}.value`, newValue.value);\n                      }}\n                      onOpenMenu={() => {\n                        setSelectedKey(labels[index].key);\n                      }}\n                      type=\"value\"\n                    />\n                  </Field>\n\n                  <RemoveButton className={styles.deleteLabelButton} index={index} remove={remove} />\n                </div>\n              </div>\n            );\n          })}\n          <AddButton className={styles.addLabelButton} append={append} />\n        </>\n      )}\n    </>\n  );\n};\n\nconst LabelsWithoutSuggestions: FC = () => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const labels = watch('labels');\n  const { fields, remove, append } = useFieldArray({ control, name: 'labels' });\n\n  return (\n    <>\n      {fields.map((field, index) => {\n        return (\n          <div key={field.id}>\n            <div className={cx(styles.flexRow, styles.centerAlignRow)} data-testid=\"alertlabel-input-wrapper\">\n              <Field\n                className={styles.labelInput}\n                invalid={!!errors.labels?.[index]?.key?.message}\n                error={errors.labels?.[index]?.key?.message}\n              >\n                <Input\n                  {...register(`labels.${index}.key`, {\n                    required: { value: !!labels[index]?.value, message: 'Required.' },\n                  })}\n                  placeholder=\"key\"\n                  data-testid={`label-key-${index}`}\n                  defaultValue={field.key}\n                />\n              </Field>\n              <InlineLabel className={styles.equalSign}>=</InlineLabel>\n              <Field\n                className={styles.labelInput}\n                invalid={!!errors.labels?.[index]?.value?.message}\n                error={errors.labels?.[index]?.value?.message}\n              >\n                <Input\n                  {...register(`labels.${index}.value`, {\n                    required: { value: !!labels[index]?.key, message: 'Required.' },\n                  })}\n                  placeholder=\"value\"\n                  data-testid={`label-value-${index}`}\n                  defaultValue={field.value}\n                />\n              </Field>\n              <RemoveButton className={styles.deleteLabelButton} index={index} remove={remove} />\n            </div>\n          </div>\n        );\n      })}\n      <AddButton className={styles.addLabelButton} append={append} />\n    </>\n  );\n};\n\nconst LabelsField: FC<Props> = ({ className, dataSourceName }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Label>\n        <Stack gap={0.5}>\n          <span>Custom Labels</span>\n          <Tooltip\n            content={\n              <div>\n                The dropdown only displays labels that you have previously used for alerts. Select a label from the\n                dropdown or type in a new one.\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </Tooltip>\n        </Stack>\n      </Label>\n      <>\n        <div className={styles.flexRow}>\n          <InlineLabel width={18}>Labels</InlineLabel>\n          <div className={styles.flexColumn}>\n            {dataSourceName && <LabelsWithSuggestions dataSourceName={dataSourceName} />}\n            {!dataSourceName && <LabelsWithoutSuggestions />}\n          </div>\n        </div>\n      </>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n    wrapper: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    flexColumn: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n\n      & + button {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    deleteLabelButton: css`\n      margin-left: ${theme.spacing(0.5)};\n      align-self: flex-start;\n    `,\n    addLabelButton: css`\n      flex-grow: 0;\n      align-self: flex-start;\n    `,\n    centerAlignRow: css`\n      align-items: baseline;\n    `,\n    equalSign: css`\n      align-self: flex-start;\n      width: 28px;\n      justify-content: center;\n      margin-left: ${theme.spacing(0.5)};\n    `,\n    labelInput: css`\n      width: 175px;\n      margin-bottom: ${theme.spacing(1)};\n      & + & {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n  };\n};\n\nexport default LabelsField;\n"],"names":["AlertingPageWrapper","children","pageId","pageNav","isLoading","navId","SelectWithAdd","value","onChange","options","className","placeholder","width","custom","onCustomChange","disabled","addLabel","ariaLabel","isCustom","setIsCustom","useState","useEffect","_options","useMemo","label","Input","I","autoFocus","e","currentTarget","Select","val","AnnotationKeyInput","existingKeys","rest","annotationOptions","Object","values","Annotation","filter","key","includes","map","annotationLabels","getStyles","theme","annotationValueInput","css","textarea","addAnnotationsButton","flexColumn","field","spacing","flexRow","flexRowItemMargin","styles","useStyles2","control","register","watch","formState","errors","useFormContext","annotations","useCallback","index","_","idx","fields","append","remove","useFieldArray","name","Label","annotationField","isUrl","toLocaleLowerCase","endsWith","ValueInputComponent","TextArea","Field","invalid","message","error","InputControl","defaultValue","render","rules","required","cx","Button","type","icon","variant","onClick","id","React","ref","onOpenMenu","backspaceRemovesValue","maxMenuHeight","noOptionsMessage","allowCustomValue","mapLabelsToOptions","items","item","RemoveButton","AddButton","LabelsWithSuggestions","dataSourceName","setValue","labels","loading","labelsByKey","dispatch","useDispatch","fetchRulerRulesIfNotFetchedYet","rulerRequest","useUnifiedAlertingSelector","state","rulerRules","result","compact","flattenDeep","keys","ruleGroupKey","ruleItem","forEach","entries","Set","useGetCustomLabels","selectedKey","setSelectedKey","getValuesForLabel","LoadingPlaceholder","text","centerAlignRow","labelInput","Boolean","undefined","newValue","InlineLabel","equalSign","deleteLabelButton","addLabelButton","LabelsWithoutSuggestions","wrapper","Stack","gap","Tooltip","content","Icon","size"],"sourceRoot":""}