{"version":3,"file":"UserInvitePage.c41fb7e1c1bace6f524c.js","mappings":"6WAWA,MAAMA,EAAQ,CACZ,CAAEC,MAAO,SAAUC,MAAOC,EAAAA,GAAAA,QAC1B,CAAEF,MAAO,SAAUC,MAAOC,EAAAA,GAAAA,QAC1B,CAAEF,MAAO,QAASC,MAAOC,EAAAA,GAAAA,QAWrBC,EAA2B,CAC/BC,KAAM,GACNC,MAAO,GACPC,KAAMJ,EAAAA,GAAAA,OACNK,WAAW,GAmDb,EAhD8B,KAC5B,MAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAACC,EAAA,EAAI,CAACP,cAAeA,EAAeQ,SANrBC,gBACTJ,GAASK,EAAAA,EAAAA,IAAWC,IAAWC,SACrCC,EAAAA,GAAAA,KAAqB,cAAc,EAIoB,SACpD,IAAmC,IAAlC,SAAEC,EAAQ,QAAEC,EAAO,OAAEC,GAAQ,EAC7B,OACE,iCACE,UAACC,EAAA,EAAQ,YACP,SAACC,EAAA,EAAK,CACJC,UAAWH,EAAOI,aAClBC,MAASL,EAAOI,aAAe,qCAAkCE,EACjEzB,MAAM,oBAAmB,UAEzB,SAAC0B,EAAAC,EAAK,iBAAKV,EAAS,eAAgB,CAAEW,UAAU,IAAO,CAAEC,YAAY,0BAEvE,SAACR,EAAA,EAAK,CAACC,UAAWH,EAAOf,KAAMJ,MAAM,OAAM,UACzC,SAAC0B,EAAAC,EAAK,iBAAKV,EAAS,QAAO,CAAEY,YAAY,mBAE3C,SAACR,EAAA,EAAK,CAACC,UAAWH,EAAOb,KAAMN,MAAM,OAAM,UACzC,SAAC8B,EAAA,EAAY,CACXC,OAAQ,UAA6B,EAATC,E,oIAAK,GAAtBA,MAAK,UAA0B,SAACC,EAAA,EAAgB,iBAAKD,EAAK,CAAEE,QAASnC,IAAS,EACzFmB,QAASA,EACTd,KAAK,YAGT,SAACiB,EAAA,EAAK,CAACrB,MAAM,oBAAmB,UAC9B,SAACmC,EAAA,EAAM,eAACC,GAAG,qBAAwBnB,EAAS,qBAGhD,UAAC,EAAAoB,MAAK,kBACJ,SAACC,EAAA,GAAM,CAACC,KAAK,SAAQ,sBACrB,SAAC,KAAU,CAACC,KAAMC,EAAAA,EAAAA,eAA2BC,EAAAA,EAAAA,MAAYC,UAAY,cAAeC,QAAQ,YAAW,uBAIxG,GAGF,E,QCrEJ,SAASC,IACd,MAAMC,GACJ,qGAEE,kBAAMC,UAAU,iBAAgB,cAAGC,EAAAA,GAAAA,KAAAA,cAIvC,OACE,SAACC,EAAA,EAAI,CAACC,MAAM,QAAQC,QAAS,CAAEC,KAAM,eAAiBN,SAAUA,EAAS,UACvE,UAACG,EAAA,WAAa,YACZ,UAACA,EAAA,aAAe,kBACd,eAAIF,UAAU,mBAAkB,2BAChC,gBAAKA,UAAU,QAAO,SAAED,OACR,OAClB,SAAC,EAAc,SAIvB,CAEA,S","sources":["webpack://grafana/./public/app/features/org/UserInviteForm.tsx","webpack://grafana/./public/app/features/org/UserInvitePage.tsx"],"sourcesContent":["import React from 'react';\n\nimport { locationUtil } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { locationService } from '@grafana/runtime';\nimport { Button, LinkButton, Input, Switch, RadioButtonGroup, Form, Field, InputControl, FieldSet } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { OrgRole, useDispatch } from 'app/types';\n\nimport { addInvitee } from '../invites/state/actions';\n\nconst roles = [\n  { label: 'Viewer', value: OrgRole.Viewer },\n  { label: 'Editor', value: OrgRole.Editor },\n  { label: 'Admin', value: OrgRole.Admin },\n];\n\nexport interface FormModel {\n  role: OrgRole;\n  name: string;\n  loginOrEmail?: string;\n  sendEmail: boolean;\n  email: string;\n}\n\nconst defaultValues: FormModel = {\n  name: '',\n  email: '',\n  role: OrgRole.Editor,\n  sendEmail: true,\n};\n\nexport const UserInviteForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = async (formData: FormModel) => {\n    await dispatch(addInvitee(formData)).unwrap();\n    locationService.push('/org/users/');\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ register, control, errors }) => {\n        return (\n          <>\n            <FieldSet>\n              <Field\n                invalid={!!errors.loginOrEmail}\n                error={!!errors.loginOrEmail ? 'Email or username is required' : undefined}\n                label=\"Email or username\"\n              >\n                <Input {...register('loginOrEmail', { required: true })} placeholder=\"email@example.com\" />\n              </Field>\n              <Field invalid={!!errors.name} label=\"Name\">\n                <Input {...register('name')} placeholder=\"(optional)\" />\n              </Field>\n              <Field invalid={!!errors.role} label=\"Role\">\n                <InputControl\n                  render={({ field: { ref, ...field } }) => <RadioButtonGroup {...field} options={roles} />}\n                  control={control}\n                  name=\"role\"\n                />\n              </Field>\n              <Field label=\"Send invite email\">\n                <Switch id=\"send-email-switch\" {...register('sendEmail')} />\n              </Field>\n            </FieldSet>\n            <Stack>\n              <Button type=\"submit\">Submit</Button>\n              <LinkButton href={locationUtil.assureBaseUrl(getConfig().appSubUrl + '/org/users')} variant=\"secondary\">\n                Back\n              </LinkButton>\n            </Stack>\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserInviteForm;\n","import React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\n\nimport UserInviteForm from './UserInviteForm';\n\nexport function UserInvitePage() {\n  const subTitle = (\n    <>\n      Send invitation or add existing Grafana user to the organization.\n      <span className=\"highlight-word\"> {contextSrv.user.orgName}</span>\n    </>\n  );\n\n  return (\n    <Page navId=\"users\" pageNav={{ text: 'Invite user' }} subTitle={subTitle}>\n      <Page.Contents>\n        <Page.OldNavOnly>\n          <h3 className=\"page-sub-heading\">Invite user</h3>\n          <div className=\"p-b-2\">{subTitle}</div>\n        </Page.OldNavOnly>\n        <UserInviteForm />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default UserInvitePage;\n"],"names":["roles","label","value","OrgRole","defaultValues","name","email","role","sendEmail","dispatch","useDispatch","Form","onSubmit","async","addInvitee","formData","unwrap","locationService","register","control","errors","FieldSet","Field","invalid","loginOrEmail","error","undefined","Input","I","required","placeholder","InputControl","render","field","RadioButtonGroup","options","Switch","id","Stack","Button","type","href","locationUtil","getConfig","appSubUrl","variant","UserInvitePage","subTitle","className","contextSrv","Page","navId","pageNav","text"],"sourceRoot":""}