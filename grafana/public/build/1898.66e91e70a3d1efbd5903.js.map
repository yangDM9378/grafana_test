{"version":3,"file":"1898.66e91e70a3d1efbd5903.js","mappings":"sMAoBO,SAASA,EAAkB,GAAqC,UAArC,QAAEC,EAAO,gBAAEC,GAAwB,EACnE,OACE,iBAAKC,UAAWC,EAAOC,UAAU,iBAC/B,eAAIF,UAAU,eAAc,0BAC5B,SAAC,IAAc,CAACA,UAAWC,EAAOE,IAAI,UACpC,SAAC,IAAW,CACVC,QAAQ,4DACRC,MAAM,oBACNC,WAAY,GAAG,UAEf,SAAC,IAAY,CACXC,GAAG,kBACHC,MAAiC,QAA5B,EAAEV,EAAQW,SAASC,iBAAS,aAA1B,EAA4BC,QACnCC,SAAWC,IACTC,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,YAAa,OAAF,UACzEA,EAAQW,SAASC,UAAS,CAC7BC,QAASE,EAAME,cAAcC,mBAQ7C,CAEA,MAAMf,EAAS,CACbC,UAAWe,EAAAA,GAAI;;;IAIfd,IAAKc,EAAAA,GAAI;;;8HC7CX,MA2FA,EAjFsB,IAMT,IANU,OACrBC,EAAM,SACNN,EAAQ,GACRL,EAAE,eACFY,EAAiB,MAAK,iBACtBC,EAAmB,oBACb,EACN,MAAMnB,GAASoB,EAAAA,EAAAA,IAAWC,GAE1B,OACE,gBAAKtB,UAAWC,EAAOsB,QAAQ,SAC5BL,EAAOM,OACNN,EAAOO,KAAI,CAACjB,EAAOkB,KACjB,iBAAK1B,UAAWC,EAAO0B,KAAK,WAC1B,SAAC,IAAY,CACXpB,GAAK,GAAEA,SAAUmB,IACjBE,YAAaT,EACbX,MAAOA,EAAMqB,IACbjB,SAAWkB,IACTlB,EACEM,EAAOO,KAAI,CAACM,EAAGC,KACTA,IAAMN,IACRK,EAAEF,IAAMI,OAAOH,IAEVC,KAEV,KAGL,SAAC,IAAW,CAAC,aAAW,SAAS/B,UAAWC,EAAOiC,SAAUC,MAvCxD,EAuCwE,gBAG7E,SAAC,IAAY,CACX5B,GAAK,GAAEA,WAAYmB,IACnBE,YAAaR,EACbZ,MAAOA,EAAMA,MACbI,SAAWkB,IACTlB,EACEM,EAAOO,KAAI,CAACM,EAAGC,KACTA,IAAMN,IACRK,EAAEvB,MAAQyB,OAAOH,IAEZC,KAEV,KAGL,mBACEK,QAAS,IAAMxB,EAAS,IAAIM,EAAOmB,MAAM,EAAGX,MAASR,EAAOmB,MAAMX,EAAM,KACxE1B,UAAU,2BACV,aAAW,aACXsC,KAAK,SAAQ,gBAEb,SAAC,IAAI,CAACC,KAAK,aAEZb,IAAQR,EAAOM,OAAS,GACvB,mBACEY,QAAS,IAAMxB,EAAS,IAAIM,EAAQ,CAAEW,IAAK,GAAIrB,MAAO,MACtDR,UAAU,2BACV,aAAW,UACXsC,KAAK,SAAQ,gBAEb,SAAC,IAAI,CAACC,KAAK,YAEX,OAnD4Bb,MAuDpC,mBACEU,QAAS,IAAMxB,EAAS,IAAIM,EAAQ,CAAEW,IAAK,GAAIrB,MAAO,MACtDR,UAAU,2BACV,aAAW,UACXsC,KAAK,SAAQ,gBAEb,SAAC,IAAI,CAACC,KAAK,aAGX,EAMJjB,EAAakB,IAAoB,CACrCjB,QAASN,EAAAA,GAAI;;;WAGJuB,EAAMC,QAAQ;IAEvBd,KAAMV,EAAAA,GAAI;;;;IAKViB,SAAUjB,EAAAA,GAAI;aACHuB,EAAME,GAAGC,QAAQC;iLC7EvB,SAASC,EAAoB,GAAqC,oCAArC,QAAE/C,EAAO,gBAAEC,GAAwB,EACrE,MAAME,GAASoB,EAAAA,EAAAA,IAAWC,GACpBwB,EAA2B,CAC/B,OACA,gBACA,4BACA,iCAGF,OACE,iBAAK9C,WAAWiB,EAAAA,EAAAA,KAAI,CAAEkB,MAAO,SAAU,iBACrC,eAAInC,UAAU,eAAc,6BAE5B,gBAAKA,UAAWC,EAAO8C,SAAS,oGAIhC,SAAC,IAAc,WACb,SAAC,IAAW,CAAC3C,QAAQ,oDAAoDC,MAAM,cAAcC,WAAY,GAAG,UAC1G,SAAC,IAAgB,CACf0C,QAAQ,mCACRC,OAASC,GAAOJ,EAAyBK,SAASD,EAAGZ,MACrDc,QAAsC,QAA/B,EAAEtD,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BC,cACxCC,WAAW,EACXpB,MAAO,GACPvB,SAAWsC,IAA8B,aACvCpC,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCC,cAAeJ,EAAGM,IAClBC,KAAmC,QAA/B,EAAE3D,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BI,OACrC,QAMoB,QAA7B,EAAA3D,EAAQW,SAAS4C,oBAAY,OAA7B,EAA+BK,oBAC9B,SAAC,IAAc,WACb,SAAC,IAAW,CACVtD,QAAQ,oGACRC,MAAM,OACNC,WAAY,GAAG,UAEf,SAAC,IAAa,CACZa,eAAe,MACfD,OAEmE,QAF7D,EACqC,QADrC,EACyB,QADzB,EACJpB,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BM,kBAAU,QACZ,QADY,EACzC7D,EAAQW,SAAS4C,oBAAY,OAAM,QAAN,EAA7B,EAA+BI,YAAI,WAAN,EAA7B,EAAqChC,KAAKmC,IAAG,CAAQ/B,IAAK+B,aAAO,QACjE,GAEFhD,SAAWmB,IACTjB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCM,WAAY5B,YAOtB,SAAC,IAAc,WACb,SAAC,IAAW,CACV3B,QAAQ,oGACRC,MAAM,OACNC,WAAY,GAAG,UAEf,SAAC,IAAS,CACRmD,KAAmC,QAA/B,EAAE3D,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BI,KACrCtB,MAAO,GACPvB,SAAW6C,IACT3C,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCI,KAAMA,YAQlB,SAAC,IAAc,WACb,SAAC,IAAW,CACVpD,MAAM,gBACNC,WAAY,GACZuD,MAAI,EACJzD,QAAQ,kEAAiE,UAEzE,SAAC,IAAY,CACXG,GAAG,cACHC,MAAwD,QAAnD,EAA+B,QAA/B,EAAEV,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BK,0BAAkB,SACxD9C,SAAWC,IACTC,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCK,mBAAoB7C,EAAME,cAAcC,kBAOlD,SAAC,IAAc,WACb,SAAC,IAAW,CACVX,MAAM,wBACNC,WAAY,GACZuD,MAAI,EACJzD,QAAQ,sGAAqG,UAE7G,SAAC,EAAA0D,EAAK,CACJxB,KAAK,OACLV,YAAY,KACZO,MAAO,GACPvB,SAAWmB,IACTjB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCU,mBAAoBhC,EAAEhB,cAAcP,SAGxCA,OAAoC,QAA7B,EAAAV,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BU,qBAAsB,UAKlE,SAAC,IAAc,WACb,SAAC,IAAW,CACV1D,MAAM,sBACNC,WAAY,GACZuD,MAAI,EACJzD,QAAQ,kGAAiG,UAEzG,SAAC,EAAA0D,EAAK,CACJxB,KAAK,OACLV,YAAY,KACZO,MAAO,GACPvB,SAAWmB,IACTjB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCW,iBAAkBjC,EAAEhB,cAAcP,SAGtCA,OAAoC,QAA7B,EAAAV,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BW,mBAAoB,UAKhE,SAAC,IAAc,WACb,SAAC,IAAW,CACV3D,MAAM,qBACNC,WAAY,GACZuD,MAAI,EACJzD,QAAQ,iEAAgE,UAExE,SAAC,IAAY,CACXG,GAAG,kBACHC,MAAoC,QAA/B,EAAEV,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+BY,gBACtCrD,SAAWC,IACTC,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCY,gBAAiBpD,EAAME,cAAcC,kBAO/C,SAAC,IAAc,WACb,SAAC,IAAW,CACVX,MAAM,oBACNC,WAAY,GACZuD,MAAI,EACJzD,QAAQ,+DAA8D,UAEtE,SAAC,IAAY,CACXG,GAAG,iBACHC,MAAoC,QAA/B,EAAEV,EAAQW,SAAS4C,oBAAY,aAA7B,EAA+Ba,eACtCtD,SAAWC,IACTC,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,eAAgB,OAAF,UAC5EA,EAAQW,SAAS4C,aAAY,CAChCa,eAAgBrD,EAAME,cAAcC,mBAQpD,CAEA,MAAMM,EAAakB,IAAoB,CACrCO,SAAU9B,EAAAA,GAAI;sBACMuB,EAAMC,QAAQ;aACvBD,EAAM2B,OAAOC,KAAKC;qKC9LxB,SAASC,EAAuB,GAAqC,wBAArC,QAAExE,EAAO,gBAAEC,GAAwB,EACxE,MAAME,GAASoB,EAAAA,EAAAA,IAAWC,GAE1B,OACE,iBAAKtB,WAAWiB,EAAAA,EAAAA,KAAI,CAAEkB,MAAO,SAAU,iBACrC,eAAInC,UAAU,eAAc,gCAE5B,gBAAKA,UAAWC,EAAO8C,SAAS,gGAIhC,UAAC,IAAc,CAAC/C,UAAWC,EAAOE,IAAI,WACpC,SAAC,IAAW,CAACC,QAAQ,oDAAoDC,MAAM,cAAcC,WAAY,GAAG,UAC1G,SAAC,IAAgB,CACf0C,QAAQ,sCACRuB,SAAS,aACTnB,QAAyC,QAAlC,EAAEtD,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkClB,cAC3CC,WAAW,EACXpB,MAAO,GACPvB,SAAWsC,IACTpC,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnClB,cAAeJ,EAAGM,WAKO,QAAhC,EAAA1D,EAAQW,SAAS+D,uBAAe,OAAhC,EAAkClB,eACjC,SAAC,KAAM,CACLhB,KAAK,SACLmC,QAAQ,YACRC,KAAK,KACLC,KAAK,OACLvC,QAAS,MACPtB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnClB,mBAAesB,IACf,EACF,mBAIF,SAGN,SAAC,IAAc,WACb,SAAC,IAAW,CAACxE,QAAQ,+CAA+CC,MAAM,OAAOC,WAAY,GAAG,UAC9F,SAAC,IAAa,CACZa,eAAe,MACfD,OAA8C,QAAxC,EAAkC,QAAlC,EAAEpB,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkCf,YAAI,QAAI,GAClD7C,SAAWmB,IACTjB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnCf,KAAM1B,YAOhB,SAAC,IAAc,WACb,SAAC,IAAW,CACV1B,MAAM,wBACNC,WAAY,GACZuD,MAAI,EACJzD,QAAQ,sGAAqG,UAE7G,SAAC,EAAA0D,EAAK,CACJxB,KAAK,OACLV,YAAY,MACZO,MAAO,GACPvB,SAAWmB,IACTjB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnCT,mBAAoBhC,EAAEhB,cAAcP,SAGxCA,OAAuC,QAAhC,EAAAV,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkCT,qBAAsB,UAKrE,SAAC,IAAc,WACb,SAAC,IAAW,CACV1D,MAAM,sBACNC,WAAY,GACZuD,MAAI,EACJzD,QAAQ,kGAAiG,UAEzG,SAAC,EAAA0D,EAAK,CACJxB,KAAK,OACLV,YAAY,KACZO,MAAO,GACPvB,SAAWmB,IACTjB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnCR,iBAAkBjC,EAAEhB,cAAcP,SAGtCA,OAAuC,QAAhC,EAAAV,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkCR,mBAAoB,SAKlC,QAFhB,EAEhBlE,EAAQW,SAAS+D,uBAAe,OAAS,QAAT,EAAhC,EAAkCK,eAAO,WAAT,EAAhC,EAA2CpD,KAAI,CAACqD,EAAO9C,KACtD,iBAAahC,UAAWC,EAAO8E,SAAS,WACtC,SAAC,IAAW,CAAC1E,MAAM,aAAaC,WAAY,GAAG,UAC7C,SAAC,EAAAwD,EAAK,CACJzD,MAAM,aACNiC,KAAK,OACL0C,iBAAe,EACfxE,MAAOsE,EAAMvC,KACb3B,SAAWkB,IAAM,QACf,IAAImD,EAA8D,QAApD,EAAmC,QAAnC,EAAGnF,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkCK,QAAQxC,eAAO,QAAI,GACtE4C,EAAWjD,GAAGO,KAAOT,EAAEf,cAAcP,OACrCM,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnCK,QAASI,IACT,OAIR,SAAC,IAAW,CACV5E,MAAM,QACNC,WAAY,GACZF,QAAQ,4HACRyD,MAAI,YAEJ,SAAC,EAAAC,EAAK,CACJzD,MAAM,QACNiC,KAAK,OACL0C,iBAAe,EACfxE,MAAOsE,EAAMA,MACblE,SAAWkB,IAAM,QACf,IAAImD,EAA8D,QAApD,EAAmC,QAAnC,EAAGnF,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkCK,QAAQxC,eAAO,QAAI,GACtE4C,EAAWjD,GAAG8C,MAAQhD,EAAEf,cAAcP,OACtCM,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnCK,QAASI,IACT,OAKR,SAAC,KAAM,CACLR,QAAQ,cACRS,MAAM,eACNC,KAAK,QACL7C,KAAK,SACLF,QAAS,KAAM,MACb,IAAI6C,EAA6C,QAAnC,EAAGnF,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkCK,QAAQxC,QAC3D4C,SAAAA,EAAYG,OAAOpD,EAAG,IACtBlB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnCK,QAASI,IACT,MAlDEjD,MAwDZ,SAAC,KAAM,CACLyC,QAAQ,YACRS,MAAM,YACNC,KAAK,OACL7C,KAAK,SACLF,QAAS,KAAM,SACbtB,EAAAA,EAAAA,IAAqC,CAAEf,kBAAiBD,WAAW,kBAAmB,OAAF,UAC/EA,EAAQW,SAAS+D,gBAAe,CACnCK,QAAS,IAA8C,QAA7C,EAAoC,QAApC,EAAI/E,EAAQW,SAAS+D,uBAAe,aAAhC,EAAkCK,eAAO,QAAI,GAAK,CAAEC,MAAO,OACzE,EACF,yBAMV,CAEA,MAAMxD,EAAakB,IAAoB,CACrCO,SAAU9B,EAAAA,GAAI;sBACMuB,EAAMC,QAAQ;aACvBD,EAAM2B,OAAOC,KAAKC;IAE7BlE,IAAKc,EAAAA,GAAI;;;IAIT8D,SAAU9D,EAAAA,GAAI","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/KeyValueInput.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/TraceToLogsSettings.tsx","webpack://grafana/./public/app/core/components/TraceToMetrics/TraceToMetricsSettings.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst styles = {\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, KeyValue } from '@grafana/data';\nimport { SegmentInput, useStyles2, InlineLabel, Icon } from '@grafana/ui';\n\nconst EQ_WIDTH = 3; // = 24px in inline label\n\ninterface Props {\n  values: Array<KeyValue<string>>;\n  onChange: (values: Array<KeyValue<string>>) => void;\n  id?: string;\n  keyPlaceholder?: string;\n  valuePlaceholder?: string;\n}\n\nconst KeyValueInput = ({\n  values,\n  onChange,\n  id,\n  keyPlaceholder = 'Key',\n  valuePlaceholder = 'Value (optional)',\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {values.length ? (\n        values.map((value, idx) => (\n          <div className={styles.pair} key={idx}>\n            <SegmentInput\n              id={`${id}-key-${idx}`}\n              placeholder={keyPlaceholder}\n              value={value.key}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.key = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <InlineLabel aria-label=\"equals\" className={styles.operator} width={EQ_WIDTH}>\n              =\n            </InlineLabel>\n            <SegmentInput\n              id={`${id}-value-${idx}`}\n              placeholder={valuePlaceholder}\n              value={value.value}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.value = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <button\n              onClick={() => onChange([...values.slice(0, idx), ...values.slice(idx + 1)])}\n              className=\"gf-form-label query-part\"\n              aria-label=\"Remove tag\"\n              type=\"button\"\n            >\n              <Icon name=\"times\" />\n            </button>\n            {idx === values.length - 1 ? (\n              <button\n                onClick={() => onChange([...values, { key: '', value: '' }])}\n                className=\"gf-form-label query-part\"\n                aria-label=\"Add tag\"\n                type=\"button\"\n              >\n                <Icon name=\"plus\" />\n              </button>\n            ) : null}\n          </div>\n        ))\n      ) : (\n        <button\n          onClick={() => onChange([...values, { key: '', value: '' }])}\n          className=\"gf-form-label query-part\"\n          aria-label=\"Add tag\"\n          type=\"button\"\n        >\n          <Icon name=\"plus\" />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default KeyValueInput;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(0.5)} 0;\n  `,\n  pair: css`\n    display: flex;\n    justify-content: start;\n    align-items: center;\n  `,\n  operator: css`\n    color: ${theme.v1.palette.orange};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles2, InlineSwitch } from '@grafana/ui';\n\nimport KeyValueInput from './KeyValueInput';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  mappedTags?: Array<KeyValue<string>>;\n  mapTagNamesEnabled?: boolean;\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean; // legacy\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n  const supportedDataSourceTypes = [\n    'loki',\n    'elasticsearch',\n    'grafana-splunk-datasource', // external\n    'grafana-opensearch-datasource', // external\n  ];\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs lets you navigate from a trace span to the selected data source&apos;s logs.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            filter={(ds) => supportedDataSourceTypes.includes(ds.type)}\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToLogs?.mapTagNamesEnabled ? (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <KeyValueInput\n              keyPlaceholder=\"Tag\"\n              values={\n                options.jsonData.tracesToLogs?.mappedTags ??\n                options.jsonData.tracesToLogs?.tags?.map((tag) => ({ key: tag })) ??\n                []\n              }\n              onChange={(v) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  mappedTags: v,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <TagsInput\n              tags={options.jsonData.tracesToLogs?.tags}\n              width={40}\n              onChange={(tags) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  tags: tags,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Map tag names\"\n          labelWidth={26}\n          grow\n          tooltip=\"Map trace tag names to log label names. Ex: k8s.pod.name -> pod\"\n        >\n          <InlineSwitch\n            id=\"mapTagNames\"\n            value={options.jsonData.tracesToLogs?.mapTagNamesEnabled ?? false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                mapTagNamesEnabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterByTraceID\"\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterBySpanID\"\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles2 } from '@grafana/ui';\n\nimport KeyValueInput from '../TraceToLogs/KeyValueInput';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<KeyValue<string>>;\n  queries: TraceToMetricQuery[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to metrics</h3>\n\n      <div className={styles.infoText}>\n        Trace to metrics lets you navigate from a trace span to the selected data source.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.tracesToMetrics?.datasourceUid ? (\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            fill=\"text\"\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query.\" label=\"Tags\" labelWidth={26}>\n          <KeyValueInput\n            keyPlaceholder=\"Tag\"\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"-1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToMetrics?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToMetrics?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={10}>\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].name = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword.\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].query = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              let newQueries = options.jsonData.tracesToMetrics?.queries.slice();\n              newQueries?.splice(i, 1);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    display: flex;\n  `,\n});\n"],"names":["NodeGraphSettings","options","onOptionsChange","className","styles","container","row","tooltip","label","labelWidth","id","value","jsonData","nodeGraph","enabled","onChange","event","updateDatasourcePluginJsonDataOption","currentTarget","checked","css","values","keyPlaceholder","valuePlaceholder","useStyles2","getStyles","wrapper","length","map","idx","pair","placeholder","key","e","v","i","String","operator","width","onClick","slice","type","name","theme","spacing","v1","palette","orange","TraceToLogsSettings","supportedDataSourceTypes","infoText","inputId","filter","ds","includes","current","tracesToLogs","datasourceUid","noDefault","uid","tags","mapTagNamesEnabled","mappedTags","tag","grow","I","spanStartTimeShift","spanEndTimeShift","filterByTraceID","filterBySpanID","colors","text","secondary","TraceToMetricsSettings","pluginId","tracesToMetrics","variant","size","fill","undefined","queries","query","queryRow","allowFullScreen","newQueries","title","icon","splice"],"sourceRoot":""}