{"version":3,"file":"PluginListPage.765dd0531a0252fd23f4.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/HorizontalGroup.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemBadges.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginLogo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginList.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/pages/Browse.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import React from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return <Badge icon=\"exclamation-triangle\" text=\"Disabled\" color=\"red\" tooltip={tooltip} />;\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    case null:\n    case undefined:\n      return 'Plugin disabled';\n    default:\n      return `Plugin disabled due to unknown error${error ? `: ${error}` : ''}`;\n  }\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) => css`\n  background: ${theme.colors.background.primary};\n  border-color: ${theme.colors.border.strong};\n  color: ${theme.colors.text.secondary};\n`;\n","import React from 'react';\n\nimport { Badge, useStyles2 } from '@grafana/ui';\n\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return <Badge text=\"Installed\" color=\"orange\" className={customBadgeStyles} />;\n}\n","import React from 'react';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Badge, Button, HorizontalGroup, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { getBadgeColor } from './sharedStyles';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  const onClick = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    ev.preventDefault();\n    window.open(\n      `https://grafana.com/grafana/plugins/${plugin.id}?utm_source=grafana_catalog_learn_more`,\n      '_blank',\n      'noopener,noreferrer'\n    );\n  };\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text=\"Enterprise\" color=\"blue\" />;\n  }\n\n  return (\n    <HorizontalGroup>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge icon=\"lock\" aria-label=\"lock icon\" text=\"Enterprise\" color=\"blue\" className={customBadgeStyles} />\n      <Button size=\"sm\" fill=\"text\" icon=\"external-link-alt\" onClick={onClick}>\n        Learn more\n      </Button>\n    </HorizontalGroup>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginType } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  // Currently renderer plugins are not supported by the catalog due to complications related to installation / update / uninstall.\n  if (plugin.hasUpdate && !plugin.isCore && plugin.type !== PluginType.renderer) {\n    return <p className={styles.hasUpdate}>Update available!</p>;\n  }\n\n  return null;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ninterface HorizontalGroupProps {\n  children: React.ReactNode;\n  wrap?: boolean;\n  className?: string;\n}\n\nexport const HorizontalGroup = ({ children, wrap, className }: HorizontalGroupProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, wrap);\n\n  return <div className={cx(styles.container, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2, wrap?: boolean) => ({\n  container: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: ${wrap ? 'wrap' : 'no-wrap'};\n    & > * {\n      margin-bottom: ${theme.spacing()};\n      margin-right: ${theme.spacing()};\n    }\n    & > *:last-child {\n      margin-right: 0;\n    }\n  `,\n});\n","import React from 'react';\n\nimport { HorizontalGroup, PluginSignatureBadge } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../types';\n\nimport { PluginEnterpriseBadge, PluginDisabledBadge, PluginInstalledBadge, PluginUpdateAvailableBadge } from './Badges';\n\ntype PluginBadgeType = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginListItemBadges({ plugin }: PluginBadgeType) {\n  if (plugin.isEnterprise) {\n    return (\n      <HorizontalGroup height=\"auto\" wrap>\n        <PluginEnterpriseBadge plugin={plugin} />\n        {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n        <PluginUpdateAvailableBadge plugin={plugin} />\n      </HorizontalGroup>\n    );\n  }\n\n  return (\n    <HorizontalGroup height=\"auto\" wrap>\n      <PluginSignatureBadge status={plugin.signature} />\n      {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n      {plugin.isInstalled && <PluginInstalledBadge />}\n      <PluginUpdateAvailableBadge plugin={plugin} />\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\n\ntype PluginLogoProps = {\n  alt: string;\n  className?: string;\n  src: string;\n  height?: string | number;\n};\n\nexport function PluginLogo({ alt, className, src, height }: PluginLogoProps): React.ReactElement {\n  // @ts-ignore - react doesn't know about loading attr.\n  return <img src={src} className={className} alt={alt} loading=\"lazy\" height={height} />;\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin, PluginIconName, PluginListDisplayMode } from '../types';\n\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { PluginLogo } from './PluginLogo';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n  displayMode?: PluginListDisplayMode;\n};\n\nexport function PluginListItem({ plugin, pathName, displayMode = PluginListDisplayMode.Grid }: Props) {\n  const styles = useStyles2(getStyles);\n  const isList = displayMode === PluginListDisplayMode.List;\n\n  return (\n    <a href={`${pathName}/${plugin.id}`} className={cx(styles.container, { [styles.list]: isList })}>\n      <PluginLogo src={plugin.info.logos.small} className={styles.pluginLogo} height={LOGO_SIZE} alt=\"\" />\n      <h2 className={cx(styles.name, 'plugin-name')}>{plugin.name}</h2>\n      <div className={cx(styles.content, 'plugin-content')}>\n        <p>By {plugin.orgName}</p>\n        <PluginListItemBadges plugin={plugin} />\n      </div>\n      <div className={styles.pluginType}>\n        {plugin.type && <Icon name={PluginIconName[plugin.type]} title={`${plugin.type} plugin`} />}\n      </div>\n    </a>\n  );\n}\n\n// Styles shared between the different type of list items\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: ${LOGO_SIZE} 1fr ${theme.spacing(3)};\n      grid-template-rows: auto;\n      gap: ${theme.spacing(2)};\n      grid-auto-flow: row;\n      background: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n      padding: ${theme.spacing(3)};\n      transition: ${theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.emphasize(theme.colors.background.secondary, 0.03)};\n      }\n    `,\n    list: css`\n      row-gap: 0px;\n\n      > img {\n        align-self: start;\n      }\n\n      > .plugin-content {\n        min-height: 0px;\n        grid-area: 2 / 2 / 4 / 3;\n\n        > p {\n          margin: ${theme.spacing(0, 0, 0.5, 0)};\n        }\n      }\n\n      > .plugin-name {\n        align-self: center;\n        grid-area: 1 / 2 / 2 / 3;\n      }\n    `,\n    pluginType: css`\n      grid-area: 1 / 3 / 2 / 4;\n      color: ${theme.colors.text.secondary};\n    `,\n    pluginLogo: css`\n      grid-area: 1 / 1 / 3 / 2;\n      max-width: 100%;\n      align-self: center;\n      object-fit: contain;\n    `,\n    content: css`\n      grid-area: 3 / 1 / 4 / 3;\n      color: ${theme.colors.text.secondary};\n    `,\n    name: css`\n      grid-area: 1 / 2 / 3 / 3;\n      align-self: center;\n      font-size: ${theme.typography.h4.fontSize};\n      color: ${theme.colors.text.primary};\n      margin: 0;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { PluginListItem } from './PluginListItem';\n\ninterface Props {\n  plugins: CatalogPlugin[];\n  displayMode: PluginListDisplayMode;\n}\n\nexport const PluginList = ({ plugins, displayMode }: Props) => {\n  const isList = displayMode === PluginListDisplayMode.List;\n  const styles = useStyles2(getStyles);\n  const location = useLocation();\n  const pathName = config.appSubUrl + location.pathname;\n\n  return (\n    <div className={cx(styles.container, { [styles.list]: isList })} data-testid=\"plugin-list\">\n      {plugins.map((plugin) => (\n        <PluginListItem key={plugin.id} plugin={plugin} pathName={pathName} displayMode={displayMode} />\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(288px, 1fr));\n      gap: ${theme.spacing(3)};\n    `,\n    list: css`\n      grid-template-columns: 1fr;\n    `,\n  };\n};\n","import React, { useState, useRef } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { FilterInput } from '@grafana/ui';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => any, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder=\"Search Grafana plugins\"\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { ReactElement } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { LoadingPlaceholder, Select, RadioButtonGroup, useStyles2, Tooltip } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'app/types';\n\nimport { HorizontalGroup } from '../components/HorizontalGroup';\nimport { PluginList } from '../components/PluginList';\nimport { SearchField } from '../components/SearchField';\nimport { Sorters } from '../helpers';\nimport { useHistory } from '../hooks/useHistory';\nimport { useGetAllWithFilters, useIsRemotePluginsAvailable, useDisplayMode } from '../state/hooks';\nimport { PluginListDisplayMode } from '../types';\n\nexport default function Browse({ route }: GrafanaRouteComponentProps): ReactElement | null {\n  const location = useLocation();\n  const locationSearch = locationSearchToObject(location.search);\n  const navModel = useSelector((state) => getNavModel(state.navIndex, 'plugins'));\n  const { displayMode, setDisplayMode } = useDisplayMode();\n  const styles = useStyles2(getStyles);\n  const history = useHistory();\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n  const query = (locationSearch.q as string) || '';\n  const filterBy = (locationSearch.filterBy as string) || 'installed';\n  const filterByType = (locationSearch.filterByType as string) || 'all';\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const { isLoading, error, plugins } = useGetAllWithFilters({\n    query,\n    filterBy,\n    filterByType,\n    sortBy,\n  });\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n  ];\n\n  const onSortByChange = (value: SelectableValue<string>) => {\n    history.push({ query: { sortBy: value.value } });\n  };\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const onFilterByTypeChange = (value: string) => {\n    history.push({ query: { filterByType: value } });\n  };\n\n  const onSearch = (q: string) => {\n    history.push({ query: { filterBy: 'all', filterByType: 'all', q } });\n  };\n\n  // How should we handle errors?\n  if (error) {\n    console.error(error.message);\n    return null;\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <HorizontalGroup wrap>\n          <SearchField value={query} onSearch={onSearch} />\n          <HorizontalGroup wrap className={styles.actionBar}>\n            {/* Filter by type */}\n            <div>\n              <RadioButtonGroup\n                value={filterByType}\n                onChange={onFilterByTypeChange}\n                options={[\n                  { value: 'all', label: 'All' },\n                  { value: 'datasource', label: 'Data sources' },\n                  { value: 'panel', label: 'Panels' },\n                  { value: 'app', label: 'Applications' },\n                ]}\n              />\n            </div>\n\n            {/* Filter by installed / all */}\n            {remotePluginsAvailable ? (\n              <div>\n                <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n              </div>\n            ) : (\n              <Tooltip\n                content=\"This filter has been disabled because the Grafana server cannot access grafana.com\"\n                placement=\"top\"\n              >\n                <div>\n                  <RadioButtonGroup\n                    disabled={true}\n                    value={filterBy}\n                    onChange={onFilterByChange}\n                    options={filterByOptions}\n                  />\n                </div>\n              </Tooltip>\n            )}\n\n            {/* Sorting */}\n            <div>\n              <Select\n                aria-label=\"Sort Plugins List\"\n                width={24}\n                value={sortBy}\n                onChange={onSortByChange}\n                options={[\n                  { value: 'nameAsc', label: 'Sort by name (A-Z)' },\n                  { value: 'nameDesc', label: 'Sort by name (Z-A)' },\n                  { value: 'updated', label: 'Sort by updated date' },\n                  { value: 'published', label: 'Sort by published date' },\n                  { value: 'downloads', label: 'Sort by downloads' },\n                ]}\n              />\n            </div>\n\n            {/* Display mode */}\n            <div>\n              <RadioButtonGroup<PluginListDisplayMode>\n                className={styles.displayAs}\n                value={displayMode}\n                onChange={setDisplayMode}\n                options={[\n                  {\n                    value: PluginListDisplayMode.Grid,\n                    icon: 'table',\n                    description: 'Display plugins in a grid layout',\n                  },\n                  { value: PluginListDisplayMode.List, icon: 'list-ul', description: 'Display plugins in list' },\n                ]}\n              />\n            </div>\n          </HorizontalGroup>\n        </HorizontalGroup>\n        <div className={styles.listWrap}>\n          {isLoading ? (\n            <LoadingPlaceholder\n              className={css`\n                margin-bottom: 0;\n              `}\n              text=\"Loading results\"\n            />\n          ) : (\n            <PluginList plugins={plugins} displayMode={displayMode} />\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.up('xl')} {\n      margin-left: auto;\n    }\n  `,\n  listWrap: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  displayAs: css`\n    svg {\n      margin-right: 0;\n    }\n  `,\n});\n","import { locationService } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: any) => {\n      locationService.partial(query);\n    },\n  };\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginErrorCode, unEscapeStringFromRegex } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(unEscapeStringFromRegex(searchBy).toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\n\nimport { PluginError } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters } from '../helpers';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall } from './actions';\nimport { setDisplayMode } from './reducer';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n} from './selectors';\n\ntype Filters = {\n  query?: string; // Note: this will be an escaped regex string as it comes from `FilterInput`\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors);\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["PluginDisabledBadge","error","tooltip","PluginErrorCode","undefined","errorCodeToTooltip","Badge","icon","text","color","getBadgeColor","theme","css","colors","background","primary","border","strong","secondary","PluginInstalledBadge","customBadgeStyles","useStyles2","className","PluginEnterpriseBadge","plugin","featureEnabled","PluginSignatureBadge","status","signature","Button","size","fill","onClick","ev","preventDefault","window","open","id","PluginUpdateAvailableBadge","styles","getStyles","hasUpdate","isCore","type","PluginType","typography","bodySmall","fontSize","HorizontalGroup","children","wrap","useTheme2","cx","container","spacing","PluginListItemBadges","isEnterprise","height","isDisabled","isInstalled","PluginLogo","alt","src","loading","LOGO_SIZE","PluginListItem","pathName","displayMode","PluginListDisplayMode","isList","href","list","info","logos","small","pluginLogo","name","content","orgName","pluginType","Icon","PluginIconName","title","shape","borderRadius","transitions","create","duration","short","emphasize","h4","PluginList","plugins","location","useLocation","config","pathname","map","SearchField","value","onSearch","query","setQuery","useState","callBack","delay","deps","isFirstRender","useRef","debounceDeps","useDebounce","current","useDebounceWithoutFirstRender","FilterInput","onKeyDown","e","key","keyCode","currentTarget","placeholder","onChange","width","Browse","route","locationSearch","locationSearchToObject","search","navModel","useSelector","state","getNavModel","navIndex","setDisplayMode","useDisplayMode","history","push","locationService","remotePluginsAvailable","useIsRemotePluginsAvailable","q","filterBy","filterByType","sortBy","Sorters","isLoading","useGetAllWithFilters","filterByOptions","label","onFilterByChange","console","message","Page","actionBar","RadioButtonGroup","options","Tooltip","placement","disabled","Select","displayAs","description","listWrap","LoadingPlaceholder","breakpoints","up","selectRoot","selectItems","createSelector","items","selectDisplayMode","settings","selectAll","selectById","pluginsAdapter","findByInstallAndType","filter","selectInstalled","find","searchBy","fields","toLowerCase","some","f","includes","unEscapeStringFromRegex","findByKeyword","filteredPlugins","searchedPlugins","selectPluginErrors","p","Boolean","pluginId","errorCode","selectRequest","actionType","requests","selectIsRequestPending","request","RequestStatus","selectRequestError","useFetchAll","filtered","useFetchStatus","sortPlugins","useGetSingle","useFetchDetails","useGetErrors","useInstall","dispatch","useDispatch","version","isUpdating","install","useUninstall","uninstall","fetchRemotePlugins","fetchAll","useFetchDetailsStatus","fetchDetails","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","useEffect","shouldFetch","details","v"],"sourceRoot":""}