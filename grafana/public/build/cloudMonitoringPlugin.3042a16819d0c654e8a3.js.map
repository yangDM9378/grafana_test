{"version":3,"file":"cloudMonitoringPlugin.3042a16819d0c654e8a3.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/CloudMonitoringCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/ConfigEditor/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/annotationSupport.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/module.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { CloudMonitoringQuery } from '../types';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <span>Patterns:</span>\n          <br />\n          <ul\n            className={css`\n              list-style: none;\n            `}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConnectionConfig } from '@grafana/google-sdk';\n\nimport { CloudMonitoringOptions, CloudMonitoringSecureJsonData } from '../../types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudMonitoringOptions, CloudMonitoringSecureJsonData>;\n\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return (\n      <>\n        <ConnectionConfig {...this.props}></ConnectionConfig>\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  MetricFindQueryTypes,\n  VariableQueryData,\n} from '../types';\n\nimport { VariableQueryField } from './';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(this.defaults, this.props.query);\n  }\n\n  async componentDidMount() {\n    await this.props.datasource.ensureGCEDefaultProject();\n    const projectName = this.props.datasource.getDefaultProject();\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, projectName)),\n      sloServices,\n      loading: false,\n      projectName,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { QueryEditorProps, toOption } from '@grafana/data';\nimport { EditorField, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport {\n  EditorMode,\n  MetricKind,\n  AnnotationMetricQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  AlignmentTypes,\n} from '../types';\n\nimport { MetricQueryEditor } from './MetricQueryEditor';\n\nimport { AnnotationsHelp } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const defaultQuery: (datasource: CloudMonitoringDatasource) => AnnotationMetricQuery = (datasource) => ({\n  editorMode: EditorMode.Visual,\n  projectName: datasource.getDefaultProject(),\n  projects: [],\n  metricType: '',\n  filters: [],\n  metricKind: MetricKind.GAUGE,\n  valueType: '',\n  refId: 'annotationQuery',\n  title: '',\n  text: '',\n  labels: {},\n  variableOptionGroup: {},\n  variableOptions: [],\n  query: '',\n  crossSeriesReducer: 'REDUCE_NONE',\n  perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n  alignmentPeriod: 'grafana-auto',\n});\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { datasource, query, onRunQuery, data, onChange } = props;\n  const meta = data?.series.length ? data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const metricQuery = { ...defaultQuery(datasource), ...query.metricQuery };\n  const [title, setTitle] = useState(metricQuery.title || '');\n  const [text, setText] = useState(metricQuery.text || '');\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map(toOption),\n  };\n\n  const handleQueryChange = (metricQuery: AnnotationMetricQuery) => onChange({ ...query, metricQuery });\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  };\n\n  useDebounce(\n    () => {\n      onChange({ ...query, metricQuery: { ...metricQuery, title } });\n    },\n    1000,\n    [title, onChange]\n  );\n  useDebounce(\n    () => {\n      onChange({ ...query, metricQuery: { ...metricQuery, text } });\n    },\n    1000,\n    [text, onChange]\n  );\n\n  return (\n    <EditorRows>\n      <>\n        <MetricQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={handleQueryChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={metricQuery}\n        />\n        <EditorField label=\"Title\" htmlFor=\"annotation-query-title\">\n          <Input id=\"annotation-query-title\" value={title} onChange={handleTitleChange} />\n        </EditorField>\n        <EditorField label=\"Text\" htmlFor=\"annotation-query-text\">\n          <Input id=\"annotation-query-text\" value={text} onChange={handleTextChange} />\n        </EditorField>\n      </>\n      <AnnotationsHelp />\n    </EditorRows>\n  );\n};\n","import { isString } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { ALIGNMENT_PERIODS, SELECTORS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\nimport { CloudMonitoringVariableQuery, MetricDescriptor, MetricFindQueryTypes, MetricKind, ValueTypes } from './types';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: MetricDescriptor[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    // REDUCE_MEAN is needed so the groupBy is not ignored\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, {\n      groupBys: [labelKey],\n      crossSeriesReducer: 'REDUCE_MEAN',\n    });\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return SELECTORS.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return ALIGNMENT_PERIODS.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import { chunk, flatten, isString, isArray } from 'lodash';\nimport { from, lastValueFrom, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudMonitoringAnnotationSupport } from './annotationSupport';\nimport { SLO_BURN_RATE_SELECTOR_NAME } from './constants';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  EditorMode,\n  Filter,\n  MetricDescriptor,\n  QueryType,\n  PostResponse,\n  Aggregation,\n} from './types';\nimport { CloudMonitoringVariableSupport } from './variables';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  authenticationType: string;\n  intervalMs: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n    this.annotations = CloudMonitoringAnnotationSupport(this);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  applyTemplateVariables(target: CloudMonitoringQuery, scopedVars: ScopedVars): Record<string, any> {\n    const { metricQuery, sloQuery } = target;\n    return {\n      ...target,\n      datasource: this.getRef(),\n      intervalMs: this.intervalMs,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode,\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, aggregation?: Aggregation) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasource: this.getRef(),\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(aggregation?.groupBys || [], {}),\n            crossSeriesReducer: aggregation?.crossSeriesReducer ?? 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>;\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({ results: [] }));\n    }\n\n    return lastValueFrom(\n      from(this.ensureGCEDefaultProject()).pipe(\n        mergeMap(() => {\n          return getBackendSrv().fetch<PostResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            headers: this.getRequestHeaders(),\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries,\n            },\n          });\n        }),\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const labels = dataQueryResponse?.data\n            .map((f) => f.meta?.custom?.labels)\n            .filter((p) => !!p)\n            .reduce((acc, labels) => {\n              for (let key in labels) {\n                if (!acc[key]) {\n                  acc[key] = new Set<string>();\n                }\n                if (labels[key]) {\n                  acc[key].add(labels[key]);\n                }\n              }\n              return acc;\n            }, {});\n          return Object.fromEntries(\n            Object.entries(labels).map((l: any) => {\n              l[1] = Array.from(l[1]);\n              return l;\n            })\n          );\n        })\n      )\n    );\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(\n      `metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`\n    ) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`projects`);\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n      return {\n        refId,\n        intervalMs,\n        hide,\n        queryType: type === 'annotationQuery' ? QueryType.ANNOTATION : QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName, lookbackPeriod } = query.sloQuery;\n      return (\n        !!selectorName &&\n        !!serviceId &&\n        !!sloId &&\n        !!projectName &&\n        (selectorName !== SLO_BURN_RATE_SELECTOR_NAME || !!lookbackPeriod)\n      );\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(\n      (query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars) as CloudMonitoringQuery\n    );\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .filter((item) => item.value);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, (value: string | string[]) => {\n          return isArray(value) && value.length ? `(${value.join('|')})` : value;\n        }),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import { AnnotationSupport, AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport {\n  AlignmentTypes,\n  CloudMonitoringQuery,\n  EditorMode,\n  LegacyCloudMonitoringAnnotationQuery,\n  MetricKind,\n  QueryType,\n} from './types';\n\n// The legacy query format sets the title and text values to empty strings by default.\n// If the title or text is not undefined at the top-level of the annotation target,\n// then it is a legacy query.\nconst isLegacyCloudMonitoringAnnotation = (\n  query: unknown\n): query is AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> =>\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.title !== undefined ||\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.text !== undefined;\n\nexport const CloudMonitoringAnnotationSupport: (\n  ds: CloudMonitoringDatasource\n) => AnnotationSupport<CloudMonitoringQuery> = (ds: CloudMonitoringDatasource) => {\n  return {\n    prepareAnnotation: (\n      query: AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> | AnnotationQuery<CloudMonitoringQuery>\n    ): AnnotationQuery<CloudMonitoringQuery> => {\n      if (!isLegacyCloudMonitoringAnnotation(query)) {\n        return query;\n      }\n\n      const { enable, name, iconColor } = query;\n      const { target } = query;\n      const result: AnnotationQuery<CloudMonitoringQuery> = {\n        datasource: query.datasource,\n        enable,\n        name,\n        iconColor,\n        target: {\n          intervalMs: ds.intervalMs,\n          refId: target?.refId || 'annotationQuery',\n          queryType: QueryType.ANNOTATION,\n          metricQuery: {\n            projectName: target?.projectName || ds.getDefaultProject(),\n            editorMode: EditorMode.Visual,\n            metricType: target?.metricType || '',\n            filters: target?.filters || [],\n            metricKind: target?.metricKind || MetricKind.GAUGE,\n            query: '',\n            crossSeriesReducer: 'REDUCE_NONE',\n            perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n            title: target?.title || '',\n            text: target?.text || '',\n          },\n        },\n      };\n      return result;\n    },\n    prepareQuery: (anno: AnnotationQuery<CloudMonitoringQuery>) => {\n      if (!anno.target) {\n        return undefined;\n      }\n\n      return {\n        ...anno.target,\n        queryType: QueryType.METRICS,\n        type: 'annotationQuery',\n        metricQuery: {\n          ...anno.target.metricQuery,\n        },\n      };\n    },\n    QueryEditor: AnnotationQueryEditor,\n  };\n};\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport CloudMonitoringCheatSheet from './components/CloudMonitoringCheatSheet';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditorHelp(CloudMonitoringCheatSheet)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"names":["CloudMonitoringCheatSheet","PureComponent","render","className","css","ConfigEditor","ConnectionConfig","this","props","CloudMonitoringVariableQueryEditor","constructor","super","value","MetricFindQueryTypes","label","selectedQueryType","queryTypes","metricDescriptors","selectedService","selectedMetricType","labels","labelKey","metricTypes","services","sloServices","selectedSLOService","projects","projectName","loading","queryModel","state","onChange","refId","Object","assign","defaults","query","async","datasource","ensureGCEDefaultProject","getDefaultProject","getProjects","getMetricTypes","extractServicesFromMetricDescriptors","map","m","service","serviceShortName","some","s","getTemplateSrv","replace","length","getSLOServices","getLabels","setState","onPropsChange","queryType","metricType","onLabelKeyChange","componentDidUpdate","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","result","getLabelKeys","l","renderQueryTypeSwitch","variableOptionGroup","expanded","options","getVariables","v","name","allowCustomValue","onProjectChange","onServiceChange","onMetricTypeChange","onQueryTypeChange","AnnotationQueryEditor","onRunQuery","data","meta","series","customMetaData","custom","metricQuery","editorMode","EditorMode","filters","metricKind","MetricKind","valueType","title","text","variableOptions","crossSeriesReducer","perSeriesAligner","AlignmentTypes","alignmentPeriod","defaultQuery","setTitle","useState","setText","toOption","useDebounce","EditorRows","MetricQueryEditor","EditorField","htmlFor","Input","I","id","e","target","CloudMonitoringMetricFindQuery","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","error","console","expandable","getMetricTypesByService","templateSrv","displayName","type","toFindQueryResult","groupBys","interpolatedKey","hasOwnProperty","descriptor","find","getAlignmentOptionsByMetric","getAggregationOptionsByMetric","getServiceLevelObjectives","SELECTORS","ALIGNMENT_PERIODS","x","isString","CloudMonitoringVariableSupport","CustomVariableSupport","metricFindQuery","bind","request","executeObservable","from","execute","targets","pipe","mergeMap","CloudMonitoringDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","ds","authenticationType","jsonData","variables","intervalMs","annotations","prepareAnnotation","undefined","isLegacyCloudMonitoringAnnotation","enable","iconColor","QueryType","prepareQuery","anno","QueryEditor","t","migrateQuery","applyTemplateVariables","scopedVars","sloQuery","getRef","interpolateProps","interpolateFilters","interpolateGroupBys","view","aggregation","range","timeRange","queries","lastValueFrom","getBackendSrv","fetch","url","method","headers","getRequestHeaders","valueOf","toString","to","dataQueryResponse","toDataQueryResponse","f","filter","p","reduce","acc","key","Set","add","fromEntries","entries","Array","of","results","getResource","defaultProject","gceDefaultProject","getGCEDefaultProject","serviceId","Promise","resolve","hide","rest","object","filterQuery","selectorName","sloId","lookbackPeriod","SLO_BURN_RATE_SELECTOR_NAME","interpolateVariablesInQueries","completeFilter","chunk","operator","condition","item","flatten","isArray","join","interpolatedGroupBys","forEach","gb","interpolated","split","concat","push","plugin","DataSourcePlugin","setQueryEditorHelp","setQueryEditor","setConfigEditor","setVariableQueryEditor"],"sourceRoot":""}