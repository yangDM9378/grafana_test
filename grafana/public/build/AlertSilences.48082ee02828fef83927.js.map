{"version":3,"file":"AlertSilences.48082ee02828fef83927.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchedSilencedRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useSilenceNavData.ts","webpack://grafana/./public/app/features/alerting/unified/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertmanagerApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRuleNamespaces.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useDebounce } from 'react-use';\n\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { Alert, AlertingRule } from 'app/types/unified-alerting';\n\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { fetchAllPromAndRulerRulesAction } from '../../state/actions';\nimport { MatcherFieldValue, SilenceFormFields } from '../../types/silence-form';\nimport { findAlertInstancesWithMatchers } from '../../utils/matchers';\nimport { isAlertingRule } from '../../utils/rules';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AlertStateTag } from '../rules/AlertStateTag';\n\ntype MatchedRulesTableItemProps = DynamicTableItemProps<{\n  matchedInstance: Alert;\n}>;\ntype MatchedRulesTableColumnProps = DynamicTableColumnProps<{ matchedInstance: Alert }>;\n\nexport const MatchedSilencedRules = () => {\n  const [matchedAlertRules, setMatchedAlertRules] = useState<MatchedRulesTableItemProps[]>([]);\n  const formApi = useFormContext<SilenceFormFields>();\n  const dispatch = useDispatch();\n  const { watch } = formApi;\n  const matchers: MatcherFieldValue[] = watch('matchers');\n  const styles = useStyles2(getStyles);\n  const columns = useColumns();\n\n  useEffect(() => {\n    dispatch(fetchAllPromAndRulerRulesAction());\n  }, [dispatch]);\n\n  const combinedNamespaces = useCombinedRuleNamespaces();\n  useDebounce(\n    () => {\n      const matchedInstances = combinedNamespaces.flatMap((namespace) => {\n        return namespace.groups.flatMap((group) => {\n          return group.rules\n            .map((combinedRule) => combinedRule.promRule)\n            .filter((rule): rule is AlertingRule => isAlertingRule(rule))\n            .flatMap((rule) => findAlertInstancesWithMatchers(rule.alerts ?? [], matchers));\n        });\n      });\n      setMatchedAlertRules(matchedInstances);\n    },\n    500,\n    [combinedNamespaces, matchers]\n  );\n\n  return (\n    <div>\n      <h4 className={styles.title}>\n        Affected alert instances\n        {matchedAlertRules.length > 0 ? (\n          <Badge className={styles.badge} color=\"blue\" text={matchedAlertRules.length} />\n        ) : null}\n      </h4>\n      <div className={styles.table}>\n        {matchers.every((matcher) => !matcher.value && !matcher.name) ? (\n          <span>Add a valid matcher to see affected alerts</span>\n        ) : (\n          <DynamicTable\n            items={matchedAlertRules}\n            isExpandable={false}\n            cols={columns}\n            pagination={{ itemsPerPage: 5 }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction useColumns(): MatchedRulesTableColumnProps[] {\n  return [\n    {\n      id: 'state',\n      label: 'State',\n      renderCell: function renderStateTag({ data: { matchedInstance } }) {\n        return <AlertStateTag state={matchedInstance.state} />;\n      },\n      size: '160px',\n    },\n    {\n      id: 'labels',\n      label: 'Labels',\n      renderCell: function renderName({ data: { matchedInstance } }) {\n        return <AlertLabels labels={matchedInstance.labels} />;\n      },\n      size: 'auto',\n    },\n    {\n      id: 'created',\n      label: 'Created',\n      renderCell: function renderSummary({ data: { matchedInstance } }) {\n        return (\n          <>\n            {matchedInstance.activeAt.startsWith('0001')\n              ? '-'\n              : dateTime(matchedInstance.activeAt).format('YYYY-MM-DD HH:mm:ss')}\n          </>\n        );\n      },\n      size: '180px',\n    },\n  ];\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    max-width: ${theme.breakpoints.values.lg}px;\n  `,\n  moreMatches: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  title: css`\n    display: flex;\n    align-items: center;\n  `,\n  badge: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Input, IconButton, InputControl, useStyles2, Select } from '@grafana/ui';\nimport { MatcherOperator } from 'app/plugins/datasource/alertmanager/types';\n\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField: FC<Props> = ({ className }) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = formApi;\n\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`} data-testid=\"matcher\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <InputControl\n                      control={control}\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          onChange={(value) => onChange(value.value)}\n                          className={styles.matcherOptions}\n                          options={matcherFieldOptions}\n                          aria-label=\"operator\"\n                        />\n                      )}\n                      defaultValue={matcher.operator || matcherFieldOptions[0].value}\n                      name={`matchers.${index}.operator` as const}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name={'trash-alt'}\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher = { name: '', value: '', operator: MatcherOperator.equal };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matcherOptions: css`\n      min-width: 140px;\n    `,\n    matchers: css`\n      max-width: ${theme.breakpoints.values.sm}px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\n\nimport { dateTime } from '@grafana/data';\nimport { Field, TimeRangeInput } from '@grafana/ui';\n\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n        placeholder={'Select time range'}\n      />\n    </Field>\n  );\n};\n\nconst styles = {\n  timeRange: css`\n    width: 400px;\n  `,\n};\n","import { css, cx } from '@emotion/css';\nimport { pickBy } from 'lodash';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { useDebounce } from 'react-use';\n\nimport {\n  DefaultTimeZone,\n  parseDuration,\n  intervalToAbbreviatedDurationString,\n  addDurationToDate,\n  dateTime,\n  isValidDate,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { MatcherOperator, Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { matcherToMatcherField, matcherFieldToMatcher } from '../../utils/alertmanager';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\nimport { makeAMLink } from '../../utils/misc';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { MatchedSilencedRules } from './MatchedSilencedRules';\nimport MatchersField from './MatchersField';\nimport { SilencePeriod } from './SilencePeriod';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (searchParams: URLSearchParams): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const comment = searchParams.get('comment');\n  const matchers = searchParams.getAll('matcher');\n\n  const formMatchers = parseQueryParamMatchers(matchers);\n  if (formMatchers.length) {\n    defaults.matchers = formMatchers.map(matcherToMatcherField);\n  }\n\n  if (comment) {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (searchParams: URLSearchParams, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers?.map(matcherToMatcherField) || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: `created ${dateTime().format('YYYY-MM-DD HH:mm')}`,\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', operator: MatcherOperator.equal }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(searchParams),\n    };\n  }\n};\n\nexport const SilencesEditor: FC<Props> = ({ silence, alertManagerSourceName }) => {\n  const [urlSearchParams] = useURLSearchParams();\n\n  const defaultValues = useMemo(() => getDefaultFormValues(urlSearchParams, silence), [silence, urlSearchParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => (state.unifiedAlerting.updateSilence = initialAsyncRequestState));\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers: matchersFields } = data;\n    const matchers = matchersFields.map(matcherFieldToMatcher);\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n  const userLogged = Boolean(config.bootData.user.isSignedIn && config.bootData.user.name);\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={cx(styles.flexRow, styles.silencePeriod)}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea\n              {...register('comment', { required: { value: true, message: 'Required.' } })}\n              rows={5}\n              placeholder=\"Details about the silence\"\n            />\n          </Field>\n          {!userLogged && (\n            <Field\n              className={cx(styles.field, styles.createdBy)}\n              label=\"Created By\"\n              required\n              error={formState.errors.createdBy?.message}\n              invalid={!!formState.errors.createdBy}\n            >\n              <Input\n                {...register('createdBy', { required: { value: true, message: 'Required.' } })}\n                placeholder=\"Who's creating the silence\"\n              />\n            </Field>\n          )}\n          <MatchedSilencedRules />\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Submit</Button>}\n          <LinkButton\n            href={makeAMLink('alerting/silences', alertManagerSourceName)}\n            variant={'secondary'}\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n  textArea: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n  silencePeriod: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n});\n\nexport default SilencesEditor;\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Button, ButtonProps } from '@grafana/ui/src/components/Button';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton: FC<Props> = ({ className, ...restProps }) => {\n  const styles = useStyles2(getStyle);\n  return <Button variant=\"secondary\" size=\"xs\" className={cx(styles.wrapper, className)} {...restProps} />;\n};\n\nexport const getStyle = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    height: 24px;\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash: FC<Props> = ({ alertManagerSourceName }) => {\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  if (contextSrv.hasAccess(permissions.create, contextSrv.isEditor)) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"New silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { FC, useState } from 'react';\n\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration} seconds</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getAlertTableStyles } from '../../styles/table';\n\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable: FC<Props> = ({ silencedAlerts }) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateMath, GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport SilencedAlertsTable from './SilencedAlertsTable';\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>Comment</div>\n      <div>{comment}</div>\n      <div className={styles.title}>Schedule</div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>Duration</div>\n      <div> {duration}</div>\n      <div className={styles.title}>Created by</div>\n      <div> {createdBy}</div>\n      <div className={styles.title}>Affected alerts</div>\n      <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: grid;\n    grid-template-columns: 1fr 9fr;\n    grid-row-gap: 1rem;\n  `,\n  title: css`\n    color: ${theme.colors.text.primary};\n  `,\n  row: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag: FC<Props> = ({ state }) => (\n  <StateTag state={silenceStateToState[state]}>{state}</StateTag>\n);\n","import { css } from '@emotion/css';\nimport { debounce, uniqueId } from 'lodash';\nimport React, { FormEvent, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Label, Icon, Input, Tooltip, RadioButtonGroup, useStyles2, Button, Field } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\n\nconst stateOptions: SelectableValue[] = Object.entries(SilenceState).map(([key, value]) => ({\n  label: key,\n  value,\n}));\n\nconst getQueryStringKey = () => uniqueId('query-string-');\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(getQueryStringKey());\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const handleSilenceStateChange = (state: string) => {\n    setQueryParams({ silenceState: state });\n  };\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(getQueryStringKey()));\n  };\n\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by matchers using a comma separated list of matchers, ie:\n                    <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder=\"Search\"\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n      <Field className={styles.rowChild} label=\"State\">\n        <RadioButtonGroup options={stateOptions} value={silenceState} onChange={handleSilenceStateChange} />\n      </Field>\n      {(queryString || silenceState) && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    width: 360px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    padding-bottom: ${theme.spacing(2)};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n  rowChild: css`\n    margin-right: ${theme.spacing(1)};\n    margin-bottom: 0;\n    max-height: 52px;\n  `,\n  fieldLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { expireSilenceAction } from '../../state/actions';\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { Matchers } from './Matchers';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { SilenceDetails } from './SilenceDetails';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { SilencesFilter } from './SilencesFilter';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilences = useFilteredSilences(silences);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  const { silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n\n  const showExpiredSilencesBanner =\n    !!filteredSilences.length && (silenceState === undefined || silenceState === SilenceState.Expired);\n\n  const columns = useColumns(alertManagerSourceName);\n\n  const items = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilences.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilences, alertManagerAlerts]);\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <>\n          <SilencesFilter />\n          <Authorize actions={[permissions.create]} fallback={contextSrv.isEditor}>\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          </Authorize>\n          {!!items.length ? (\n            <>\n              <DynamicTable\n                items={items}\n                cols={columns}\n                isExpandable\n                renderExpandedContent={({ data }) => <SilenceDetails silence={data} />}\n              />\n              {showExpiredSilencesBanner && (\n                <div className={styles.callout}>\n                  <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                  <span>Expired silences are automatically deleted after 5 days.</span>\n                </div>\n              )}\n            </>\n          ) : (\n            'No matching silences found'\n          )}\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nconst useFilteredSilences = (silences: Silence[]) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (silenceState) {\n        const stateMatches = silence.status.state === silenceState;\n        if (!stateMatches) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [queryParams, silences]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (id: string) => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n    const showActions = contextSrv.hasAccess(permissions.update, contextSrv.isEditor);\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: '88px',\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          return <Matchers matchers={matchers || []} />;\n        },\n        size: 9,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{silencedAlerts.length}</span>;\n        },\n        size: 1,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return (\n            <>\n              {' '}\n              {startsAtDate?.format(dateDisplayFormat)} {'-'}\n              <br />\n              {endsAtDate?.format(dateDisplayFormat)}\n            </>\n          );\n        },\n        size: '150px',\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          return (\n            <Stack gap={0.5}>\n              {silence.status.state === 'expired' ? (\n                <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                  <ActionButton icon=\"sync\">Recreate</ActionButton>\n                </Link>\n              ) : (\n                <ActionButton icon=\"bell\" onClick={() => handleExpireSilenceClick(silence.id)}>\n                  Unsilence\n                </ActionButton>\n              )}\n              {silence.status.state !== 'expired' && (\n                <ActionIcon\n                  className={styles.editButton}\n                  to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  icon=\"pen\"\n                  tooltip=\"edit\"\n                />\n              )}\n            </Stack>\n          );\n        },\n        size: '147px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles, permissions]);\n}\n\nexport default SilencesTable;\n","import { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { NavModelItem } from '@grafana/data';\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell-slash',\n  breadcrumbs: [{ title: 'Silences', url: 'alerting/silences' }],\n};\n\nexport function useSilenceNavData() {\n  const { isExact, path } = useRouteMatch();\n  const [pageNav, setPageNav] = useState<Pick<NavModelItem, 'id' | 'text' | 'icon'> | undefined>();\n\n  useEffect(() => {\n    if (path === '/alerting/silence/new') {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-new',\n        text: 'Add silence',\n      });\n    } else if (path === '/alerting/silence/:id/edit') {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-edit',\n        text: 'Edit silence',\n      });\n    }\n  }, [path, isExact]);\n\n  return pageNav;\n}\n","import React, { useCallback, useEffect } from 'react';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\n\nimport { Alert, withErrorBoundary } from '@grafana/ui';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { featureDiscoveryApi } from './api/featureDiscoveryApi';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useSilenceNavData } from './hooks/useSilenceNavData';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\n\nconst Silences = () => {\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const pageNav = useSilenceNavData();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  const { currentData: amFeatures } = featureDiscoveryApi.useDiscoverAmFeaturesQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    { skip: !alertManagerSourceName }\n  );\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  const mimirLazyInitError =\n    error?.message?.includes('the Alertmanager is not configured') && amFeatures?.lazyConfigInit;\n\n  if (!alertManagerSourceName) {\n    return isRoot ? (\n      <AlertingPageWrapper pageId=\"silences\" pageNav={pageNav}>\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    ) : (\n      <Redirect to=\"/alerting/silences\" />\n    );\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\" isLoading={loading} pageNav={pageNav}>\n      <AlertManagerPicker\n        disabled={!isRoot}\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={alertManagerSourceName} />\n\n      {mimirLazyInitError && (\n        <Alert title=\"The selected Alertmanager has no configuration\" severity=\"warning\">\n          Create a new contact point to create a configuration using the default values or contact your administrator to\n          set up the Alertmanager.\n        </Alert>\n      )}\n      {error && !loading && !mimirLazyInitError && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && !mimirLazyInitError && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n","import {\n  AlertmanagerChoice,\n  ExternalAlertmanagerConfig,\n  ExternalAlertmanagers,\n  ExternalAlertmanagersResponse,\n} from '../../../../plugins/datasource/alertmanager/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface AlertmanagersChoiceResponse {\n  alertmanagersChoice: AlertmanagerChoice;\n  numExternalAlertmanagers: number;\n}\n\nexport const alertmanagerApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAlertmanagerChoiceStatus: build.query<AlertmanagersChoiceResponse, void>({\n      query: () => ({ url: '/api/v1/ngalert' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagerConfig: build.query<ExternalAlertmanagerConfig, void>({\n      query: () => ({ url: '/api/v1/ngalert/admin_config' }),\n      providesTags: ['AlertmanagerChoice'],\n    }),\n\n    getExternalAlertmanagers: build.query<ExternalAlertmanagers, void>({\n      query: () => ({ url: '/api/v1/ngalert/alertmanagers' }),\n      transformResponse: (response: ExternalAlertmanagersResponse) => response.data,\n    }),\n\n    saveExternalAlertmanagersConfig: build.mutation<{ message: string }, ExternalAlertmanagerConfig>({\n      query: (config) => ({ url: '/api/v1/ngalert/admin_config', method: 'POST', data: config }),\n      invalidatesTags: ['AlertmanagerChoice'],\n    }),\n  }),\n});\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, isLoading }: React.PropsWithChildren<Props>) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const viewingInternalAM = currentAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || !viewingInternalAM) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n","import { isEqual } from 'lodash';\nimport { useMemo, useRef } from 'react';\n\nimport {\n  CombinedRule,\n  CombinedRuleGroup,\n  CombinedRuleNamespace,\n  Rule,\n  RuleGroup,\n  RuleNamespace,\n  RulesSource,\n} from 'app/types/unified-alerting';\nimport { RulerRuleDTO, RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport {\n  getAllRulesSources,\n  getRulesSourceByName,\n  isCloudRulesSource,\n  isGrafanaRulesSource,\n} from '../utils/datasource';\nimport { isAlertingRule, isAlertingRulerRule, isRecordingRulerRule } from '../utils/rules';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface CacheValue {\n  promRules?: RuleNamespace[];\n  rulerRules?: RulerRulesConfigDTO | null;\n  result: CombinedRuleNamespace[];\n}\n\n// this little monster combines prometheus rules and ruler rules to produce a unified data structure\n// can limit to a single rules source\nexport function useCombinedRuleNamespaces(rulesSourceName?: string): CombinedRuleNamespace[] {\n  const promRulesResponses = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRulesResponses = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  // cache results per rules source, so we only recalculate those for which results have actually changed\n  const cache = useRef<Record<string, CacheValue>>({});\n\n  const rulesSources = useMemo((): RulesSource[] => {\n    if (rulesSourceName) {\n      const rulesSource = getRulesSourceByName(rulesSourceName);\n      if (!rulesSource) {\n        throw new Error(`Unknown rules source: ${rulesSourceName}`);\n      }\n      return [rulesSource];\n    }\n    return getAllRulesSources();\n  }, [rulesSourceName]);\n\n  return useMemo(\n    () =>\n      rulesSources\n        .map((rulesSource): CombinedRuleNamespace[] => {\n          const rulesSourceName = isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n          const promRules = promRulesResponses[rulesSourceName]?.result;\n          const rulerRules = rulerRulesResponses[rulesSourceName]?.result;\n\n          const cached = cache.current[rulesSourceName];\n          if (cached && cached.promRules === promRules && cached.rulerRules === rulerRules) {\n            return cached.result;\n          }\n          const namespaces: Record<string, CombinedRuleNamespace> = {};\n\n          // first get all the ruler rules in\n          Object.entries(rulerRules || {}).forEach(([namespaceName, groups]) => {\n            const namespace: CombinedRuleNamespace = {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            };\n            namespaces[namespaceName] = namespace;\n            addRulerGroupsToCombinedNamespace(namespace, groups);\n          });\n\n          // then correlate with prometheus rules\n          promRules?.forEach(({ name: namespaceName, groups }) => {\n            const ns = (namespaces[namespaceName] = namespaces[namespaceName] || {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            });\n\n            addPromGroupsToCombinedNamespace(ns, groups);\n          });\n\n          const result = Object.values(namespaces);\n\n          cache.current[rulesSourceName] = { promRules, rulerRules, result };\n          return result;\n        })\n        .flat(),\n    [promRulesResponses, rulerRulesResponses, rulesSources]\n  );\n}\n\n// merge all groups in case of grafana managed, essentially treating namespaces (folders) as groups\nexport function flattenGrafanaManagedRules(namespaces: CombinedRuleNamespace[]) {\n  return namespaces.map((namespace) => {\n    const newNamespace: CombinedRuleNamespace = {\n      ...namespace,\n      groups: [],\n    };\n\n    // add default group with ungrouped rules\n    newNamespace.groups.push({\n      name: 'default',\n      rules: sortRulesByName(namespace.groups.flatMap((group) => group.rules)),\n    });\n\n    return newNamespace;\n  });\n}\n\nexport function sortRulesByName(rules: CombinedRule[]) {\n  return rules.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nfunction addRulerGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RulerRuleGroupDTO[] = []): void {\n  namespace.groups = groups.map((group) => {\n    const combinedGroup: CombinedRuleGroup = {\n      name: group.name,\n      interval: group.interval,\n      source_tenants: group.source_tenants,\n      rules: [],\n    };\n    combinedGroup.rules = group.rules.map((rule) => rulerRuleToCombinedRule(rule, namespace, combinedGroup));\n    return combinedGroup;\n  });\n}\n\nfunction addPromGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RuleGroup[]): void {\n  const existingGroupsByName = new Map<string, CombinedRuleGroup>();\n  namespace.groups.forEach((group) => existingGroupsByName.set(group.name, group));\n\n  groups.forEach((group) => {\n    let combinedGroup = existingGroupsByName.get(group.name);\n    if (!combinedGroup) {\n      combinedGroup = {\n        name: group.name,\n        rules: [],\n      };\n      namespace.groups.push(combinedGroup);\n      existingGroupsByName.set(group.name, combinedGroup);\n    }\n\n    const combinedRulesByName = new Map<string, CombinedRule[]>();\n    combinedGroup!.rules.forEach((r) => {\n      // Prometheus rules do not have to be unique by name\n      const existingRule = combinedRulesByName.get(r.name);\n      existingRule ? existingRule.push(r) : combinedRulesByName.set(r.name, [r]);\n    });\n\n    (group.rules ?? []).forEach((rule) => {\n      const existingRule = getExistingRuleInGroup(rule, combinedRulesByName, namespace.rulesSource);\n      if (existingRule) {\n        existingRule.promRule = rule;\n      } else {\n        combinedGroup!.rules.push(promRuleToCombinedRule(rule, namespace, combinedGroup!));\n      }\n    });\n  });\n}\n\nfunction promRuleToCombinedRule(rule: Rule, namespace: CombinedRuleNamespace, group: CombinedRuleGroup): CombinedRule {\n  return {\n    name: rule.name,\n    query: rule.query,\n    labels: rule.labels || {},\n    annotations: isAlertingRule(rule) ? rule.annotations || {} : {},\n    promRule: rule,\n    namespace: namespace,\n    group,\n  };\n}\n\nfunction rulerRuleToCombinedRule(\n  rule: RulerRuleDTO,\n  namespace: CombinedRuleNamespace,\n  group: CombinedRuleGroup\n): CombinedRule {\n  return isAlertingRulerRule(rule)\n    ? {\n        name: rule.alert,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : isRecordingRulerRule(rule)\n    ? {\n        name: rule.record,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : {\n        name: rule.grafana_alert.title,\n        query: '',\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      };\n}\n\n// find existing rule in group that matches the given prom rule\nfunction getExistingRuleInGroup(\n  rule: Rule,\n  existingCombinedRulesMap: Map<string, CombinedRule[]>,\n  rulesSource: RulesSource\n): CombinedRule | undefined {\n  // Using Map of name-based rules is important performance optimization for the code below\n  // Otherwise we would perform find method multiple times on (possibly) thousands of rules\n\n  const nameMatchingRules = existingCombinedRulesMap.get(rule.name);\n  if (!nameMatchingRules) {\n    return undefined;\n  }\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    // assume grafana groups have only the one rule. check name anyway because paranoid\n    return nameMatchingRules[0];\n  }\n\n  // try finding a rule that matches name, labels, annotations and query\n  const strictlyMatchingRule = nameMatchingRules.find(\n    (combinedRule) => !combinedRule.promRule && isCombinedRuleEqualToPromRule(combinedRule, rule, true)\n  );\n  if (strictlyMatchingRule) {\n    return strictlyMatchingRule;\n  }\n\n  // if that fails, try finding a rule that only matches name, labels and annotations.\n  // loki & prom can sometimes modify the query so it doesnt match, eg `2 > 1` becomes `1`\n  const looselyMatchingRule = nameMatchingRules.find(\n    (combinedRule) => !combinedRule.promRule && isCombinedRuleEqualToPromRule(combinedRule, rule, false)\n  );\n  if (looselyMatchingRule) {\n    return looselyMatchingRule;\n  }\n\n  return undefined;\n}\n\nfunction isCombinedRuleEqualToPromRule(combinedRule: CombinedRule, rule: Rule, checkQuery = true): boolean {\n  if (combinedRule.name === rule.name) {\n    return isEqual(\n      [checkQuery ? hashQuery(combinedRule.query) : '', combinedRule.labels, combinedRule.annotations],\n      [checkQuery ? hashQuery(rule.query) : '', rule.labels || {}, isAlertingRule(rule) ? rule.annotations || {} : {}]\n    );\n  }\n  return false;\n}\n\n// there can be slight differences in how prom & ruler render a query, this will hash them accounting for the differences\nfunction hashQuery(query: string) {\n  // one of them might be wrapped in parens\n  if (query.length > 1 && query[0] === '(' && query[query.length - 1] === ')') {\n    query = query.slice(1, -1);\n  }\n  // whitespace could be added or removed\n  query = query.replace(/\\s|\\n/g, '');\n  // labels matchers can be reordered, so sort the enitre string, esentially comparing just the character counts\n  return query.split('').sort().join('');\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n});\n"],"names":["MatchedSilencedRules","matchedAlertRules","setMatchedAlertRules","useState","formApi","useFormContext","dispatch","useDispatch","watch","matchers","styles","useStyles2","getStyles","columns","id","label","renderCell","data","matchedInstance","AlertStateTag","state","size","AlertLabels","labels","activeAt","startsWith","dateTime","format","useEffect","fetchAllPromAndRulerRulesAction","combinedNamespaces","useCombinedRuleNamespaces","useDebounce","matchedInstances","flatMap","namespace","groups","group","rules","map","combinedRule","promRule","filter","rule","isAlertingRule","findAlertInstancesWithMatchers","alerts","className","title","length","Badge","badge","color","text","table","every","matcher","value","name","DynamicTable","items","isExpandable","cols","pagination","itemsPerPage","theme","css","breakpoints","values","lg","moreMatches","spacing","wrapper","row","colors","background","secondary","removeButton","matcherOptions","sm","control","register","formState","errors","fields","append","remove","useFieldArray","cx","Field","required","index","invalid","error","message","Input","I","defaultValue","placeholder","InputControl","render","field","onChange","Select","options","matcherFieldOptions","operator","IconButton","tooltip","onClick","Button","type","icon","variant","newMatcher","MatcherOperator","SilencePeriod","getValues","onChangeStartsAt","startsAt","fieldState","startsAtInvalid","useController","validate","endsAt","onChangeEndsAt","endsAtInvalid","onChangeTimeZone","timeZone","from","to","timeRange","TimeRangeInput","raw","newValue","hideTimeZone","hideQuickRanges","getDefaultFormValues","searchParams","silence","now","Date","interval","parse","start","end","addDurationToDate","hours","toISOString","comment","createdBy","duration","intervalToAbbreviatedDurationString","isRegex","matcherToMatcherField","matcherName","matcherValue","DefaultTimeZone","config","defaults","get","getAll","formMatchers","parseQueryParamMatchers","defaultsFromQuery","textArea","flexRow","silencePeriod","alertManagerSourceName","urlSearchParams","useURLSearchParams","defaultValues","useMemo","formAPI","useForm","loading","useUnifiedAlertingSelector","updateSilence","useCleanup","unifiedAlerting","initialAsyncRequestState","handleSubmit","setValue","clearErrors","prevDuration","setPrevDuration","isValidDate","parseDuration","startValue","valueOf","nextDuration","userLogged","Boolean","onSubmit","matchersFields","matcherFieldToMatcher","payload","pickBy","createOrUpdateSilenceAction","exitOnSave","successMessage","FieldSet","Object","keys","undefined","TextArea","rows","disabled","href","makeAMLink","fill","ActionButton","restProps","getStyle","typography","bodySmall","fontSize","NoSilencesSplash","permissions","getInstancesPermissions","contextSrv","create","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","CallToActionCard","callToActionElement","SilencedAlertsTableRow","alert","isCollapsed","setIsCollapsed","alertName","entries","reduce","labelKey","labelValue","CollapseToggle","onToggle","collapsed","AmAlertStateTag","status","colSpan","tableMargin","colState","colName","silencedAlerts","tableStyles","getAlertTableStyles","colExpand","evenRow","fingerprint","SilenceDetails","dateDisplayFormat","startsAtDate","dateMath","endsAtDate","container","primary","silenceStateToState","SilenceState","SilenceStateTag","StateTag","stateOptions","key","getQueryStringKey","uniqueId","SilencesFilter","queryStringKey","setQueryStringKey","queryParams","setQueryParams","useQueryParams","queryString","silenceState","getSilenceFiltersFromUrlParams","handleQueryStringChange","debounce","e","target","inputInvalid","parseMatchers","rowChild","Label","Stack","gap","Tooltip","content","Icon","searchInput","prefix","RadioButtonGroup","setTimeout","border","strong","fieldLabel","useFilteredSilences","silences","silenceIdsString","silenceIds","split","includes","some","isEqual","topButtonContainer","addNewSilence","callout","info","calloutIcon","editButton","alertManagerAlerts","filteredSilences","showExpiredSilencesBanner","handleExpireSilenceClick","expireSilenceAction","Matchers","update","push","Link","ActionIcon","A","useColumns","silencedBy","Authorize","actions","fallback","renderExpandedContent","defaultPageNav","breadcrumbs","url","withErrorBoundary","alertManagers","useAlertManagersByPermission","setAlertManagerSourceName","useAlertManagerSourceName","alertsRequests","amAlerts","alertsRequest","location","useLocation","pageNav","isExact","path","useRouteMatch","setPageNav","useSilenceNavData","isRoot","pathname","endsWith","currentData","amFeatures","featureDiscoveryApi","amSourceName","skip","fetchAll","fetchSilencesAction","fetchAmAlertsAction","setInterval","SILENCES_POLL_INTERVAL_MS","clearInterval","result","getSilenceById","useCallback","find","mimirLazyInitError","lazyConfigInit","AlertingPageWrapper","pageId","isLoading","AlertManagerPicker","current","dataSources","GrafanaAlertmanagerDeliveryWarning","currentAlertmanager","Alert","severity","exact","match","params","NoAlertManagerWarning","availableAlertManagers","style","alertmanagerApi","alertingApi","endpoints","build","getAlertmanagerChoiceStatus","query","providesTags","getExternalAlertmanagerConfig","getExternalAlertmanagers","transformResponse","response","saveExternalAlertmanagersConfig","mutation","method","invalidatesTags","children","navId","action","useGetAlertmanagerChoiceStatusQuery","amChoiceStatus","viewingInternalAM","GRAFANA_RULES_SOURCE_NAME","alertmanagersChoice","AlertmanagerChoice","hasActiveExternalAMs","numExternalAlertmanagers","adminHint","fontWeight","NoAlertManagersAvailable","OtherAlertManagersAvailable","_","hasOtherAMs","tooltipPlacement","rest","ariaLabel","placement","alertStateToState","AlertState","tags","matcherToOperator","updateQueryParams","isAlertManagerAvailable","alertManagerName","am","useIsAlertManagerAvailable","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","accessType","getAlertManagerDataSourcesByPermission","rulesSourceName","promRulesResponses","promRules","rulerRulesResponses","rulerRules","cache","useRef","rulesSources","rulesSource","getRulesSourceByName","Error","getAllRulesSources","isCloudRulesSource","cached","namespaces","forEach","namespaceName","combinedGroup","source_tenants","rulerRuleToCombinedRule","addRulerGroupsToCombinedNamespace","existingGroupsByName","Map","set","combinedRulesByName","r","existingRule","existingCombinedRulesMap","nameMatchingRules","isGrafanaRulesSource","strictlyMatchingRule","isCombinedRuleEqualToPromRule","looselyMatchingRule","getExistingRuleInGroup","annotations","promRuleToCombinedRule","addPromGroupsToCombinedNamespace","flat","flattenGrafanaManagedRules","newNamespace","sort","a","b","localeCompare","isAlertingRulerRule","expr","rulerRule","isRecordingRulerRule","record","grafana_alert","checkQuery","hashQuery","slice","replace","join","search","URLSearchParams","searchValues","locationService","shape","borderRadius","weak","actionsCell"],"sourceRoot":""}