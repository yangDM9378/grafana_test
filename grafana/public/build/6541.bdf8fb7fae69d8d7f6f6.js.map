{"version":3,"file":"6541.bdf8fb7fae69d8d7f6f6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/profile/ChangePasswordForm.tsx","webpack://grafana/./public/app/features/profile/ChangePasswordPage.tsx","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { Button, Field, Form, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { UserDTO } from 'app/types';\n\nimport { PasswordField } from '../../core/components/PasswordField/PasswordField';\n\nimport { ChangePasswordFields } from './types';\n\nexport interface Props {\n  user: UserDTO;\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport const ChangePasswordForm: FC<Props> = ({ user, onChangePassword, isSaving }) => {\n  const { disableLoginForm } = config;\n  const authSource = user.authLabels?.length && user.authLabels[0];\n\n  if (authSource === 'LDAP' || authSource === 'Auth Proxy') {\n    return <p>You cannot change password when signed in with LDAP or auth proxy.</p>;\n  }\n  if (authSource && disableLoginForm) {\n    return <p>Password cannot be changed here.</p>;\n  }\n\n  return (\n    <div\n      className={css`\n        max-width: 400px;\n      `}\n    >\n      <Form onSubmit={onChangePassword}>\n        {({ register, errors, getValues }) => {\n          return (\n            <>\n              <Field label=\"Old password\" invalid={!!errors.oldPassword} error={errors?.oldPassword?.message}>\n                <PasswordField\n                  id=\"current-password\"\n                  autoComplete=\"current-password\"\n                  {...register('oldPassword', { required: 'Old password is required' })}\n                />\n              </Field>\n\n              <Field label=\"New password\" invalid={!!errors.newPassword} error={errors?.newPassword?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('newPassword', {\n                    required: 'New password is required',\n                    validate: {\n                      confirm: (v) => v === getValues().confirmNew || 'Passwords must match',\n                      old: (v) => v !== getValues().oldPassword || `New password can't be the same as the old one.`,\n                    },\n                  })}\n                />\n              </Field>\n\n              <Field label=\"Confirm password\" invalid={!!errors.confirmNew} error={errors?.confirmNew?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirmNew', {\n                    required: 'New password confirmation is required',\n                    validate: (v) => v === getValues().newPassword || 'Passwords must match',\n                  })}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isSaving} type=\"submit\">\n                  Change Password\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/profile`} fill=\"outline\">\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { changePassword, loadUser } from './state/actions';\n\nexport interface OwnProps {}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { isUpdating, user } = userState;\n  return {\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUser,\n  changePassword,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function ChangePasswordPage({ loadUser, isUpdating, user, changePassword }: Props) {\n  useMount(() => loadUser());\n\n  return (\n    <Page navId=\"profile/password\">\n      <Page.Contents isLoading={!Boolean(user)}>\n        {user ? (\n          <>\n            <Page.OldNavOnly>\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\n            </Page.OldNavOnly>\n            <ChangePasswordForm user={user} onChangePassword={changePassword} isSaving={isUpdating} />\n          </>\n        ) : null}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(ChangePasswordPage);\n","import { config } from '@grafana/runtime';\n\nimport { ThunkResult, UserOrg } from '../../../types';\nimport { api } from '../api';\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\n\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["ChangePasswordForm","user","onChangePassword","isSaving","disableLoginForm","config","authSource","authLabels","length","className","css","Form","onSubmit","register","errors","getValues","Field","label","invalid","oldPassword","error","message","PasswordField","id","autoComplete","required","newPassword","validate","confirm","v","confirmNew","old","Button","variant","disabled","type","href","fill","mapDispatchToProps","loadUser","changePassword","ChangePasswordPage","isUpdating","useMount","Page","navId","isLoading","Boolean","connect","state","userState","payload","async","dispatch","setUpdating","updating","api","initUserProfilePage","initLoadTeams","teams","teamsLoaded","initLoadOrgs","orgs","orgsLoaded","initLoadSessions","sessions","sessionsLoaded","userLoaded","revokeUserSession","tokenId","userSessionRevoked","changeUserOrg","org","window","location","updateUserProfile","fn"],"sourceRoot":""}