{"version":3,"file":"AdminListOrgsPage.d5eb89ae2e83a3429767.js","mappings":"2PAWO,SAASA,EAAe,GAA2B,IAA3B,KAAEC,EAAI,SAAEC,GAAiB,EACtD,MAAMC,EAAgBC,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,aAExCC,EAAWC,IAAgBC,EAAAA,EAAAA,YAClC,OACE,mBAAOC,UAAU,+CAA8C,WAC7D,4BACE,iCACE,gCAAW,OACX,mCACA,eAAIC,MAAO,CAAEC,MAAO,cAGxB,2BACGV,EAAKW,KAAKC,IACT,2BACE,eAAIJ,UAAU,UAAS,UACrB,cAAGK,KAAO,mBAAkBD,EAAIE,KAAK,SAAEF,EAAIE,QAE7C,eAAIN,UAAU,UAAS,UACrB,cAAGK,KAAO,mBAAkBD,EAAIE,KAAK,SAAEF,EAAIG,UAE7C,eAAIP,UAAU,aAAY,UACxB,SAACQ,EAAA,GAAM,CACLC,QAAQ,cACRC,KAAK,KACLC,KAAK,QACLC,QAAS,IAAMd,EAAaM,GAC5B,aAAW,aACXS,UAAWnB,QAdP,GAAEU,EAAIE,MAAMF,EAAIG,YAoB7BV,IACC,SAACiB,EAAA,EAAY,CACXC,QAAM,EACNJ,KAAK,YACLK,MAAM,SACNC,MACE,+DACyCpB,EAAUU,KAAI,YACrD,mBAAM,WAAC,yFAGXW,YAAY,SACZC,UAAW,IAAMrB,OAAasB,GAC9BC,UAAW,KACT5B,EAASI,EAAUS,IACnBR,OAAasB,EAAU,MAMnC,CC5Ce,SAASE,IACtB,MAAOC,EAAOC,IAAaC,EAAAA,EAAAA,UAAWC,cATxBA,gBACDC,EAAAA,EAAAA,KAAgBC,IAAI,aAQuBC,IAAW,IAC7DC,EAAenC,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,YAM9C,OAJAmC,EAAAA,EAAAA,YAAU,KACRP,GAAW,GACV,CAACA,KAGF,SAACQ,EAAA,EAAI,CAACC,MAAM,cAAa,UACvB,SAACD,EAAA,WAAa,WACZ,iCACE,iBAAKhC,UAAU,kBAAiB,iBAC9B,gBAAKA,UAAU,8BACf,SAAC,KAAU,CAACW,KAAK,OAAON,KAAK,UAAUQ,UAAWiB,EAAa,wBAIhEP,EAAMW,QAtBQA,EAsBiBX,EAAMW,OArBvCC,EAAAA,EAAAA,IAAaD,GAASA,SAAW,QAAN,EAALA,EAAOE,YAAI,WAAN,EAAL,EAAaC,QAAU,iCAsB3Cd,EAAMe,SAAW,yBACjBf,EAAMgB,QACL,SAAChD,EAAc,CACbC,KAAM+B,EAAMgB,MACZ9C,SAAW+C,IAnCPd,gBACHC,EAAAA,EAAAA,KAAgBc,OAAO,aAAeD,GAmCrC3C,CAAU2C,GAAOE,MAAK,IAAMlB,KAAY,WA5B/BU,MAAiB,CAoC1C,C","sources":["webpack://grafana/./public/app/features/admin/AdminOrgsTable.tsx","webpack://grafana/./public/app/features/admin/AdminListOrgsPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Organization } from 'app/types';\n\ninterface Props {\n  orgs: Organization[];\n  onDelete: (orgId: number) => void;\n}\n\nexport function AdminOrgsTable({ orgs, onDelete }: Props) {\n  const canDeleteOrgs = contextSrv.hasPermission(AccessControlAction.OrgsDelete);\n\n  const [deleteOrg, setDeleteOrg] = useState<Organization>();\n  return (\n    <table className=\"filter-table form-inline filter-table--hover\">\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th style={{ width: '1%' }}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {orgs.map((org) => (\n          <tr key={`${org.id}-${org.name}`}>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.id}</a>\n            </td>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.name}</a>\n            </td>\n            <td className=\"text-right\">\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                icon=\"times\"\n                onClick={() => setDeleteOrg(org)}\n                aria-label=\"Delete org\"\n                disabled={!canDeleteOrgs}\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      {deleteOrg && (\n        <ConfirmModal\n          isOpen\n          icon=\"trash-alt\"\n          title=\"Delete\"\n          body={\n            <div>\n              Are you sure you want to delete &apos;{deleteOrg.name}&apos;?\n              <br /> <small>All dashboards for this organization will be removed!</small>\n            </div>\n          }\n          confirmText=\"Delete\"\n          onDismiss={() => setDeleteOrg(undefined)}\n          onConfirm={() => {\n            onDelete(deleteOrg.id);\n            setDeleteOrg(undefined);\n          }}\n        />\n      )}\n    </table>\n  );\n}\n","import React, { useEffect } from 'react';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { AdminOrgsTable } from './AdminOrgsTable';\n\nconst deleteOrg = async (orgId: number) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId);\n};\n\nconst getOrgs = async () => {\n  return await getBackendSrv().get('/api/orgs');\n};\n\nconst getErrorMessage = (error: Error) => {\n  return isFetchError(error) ? error?.data?.message : 'An unexpected error happened.';\n};\n\nexport default function AdminListOrgsPages() {\n  const [state, fetchOrgs] = useAsyncFn(async () => await getOrgs(), []);\n  const canCreateOrg = contextSrv.hasPermission(AccessControlAction.OrgsCreate);\n\n  useEffect(() => {\n    fetchOrgs();\n  }, [fetchOrgs]);\n\n  return (\n    <Page navId=\"global-orgs\">\n      <Page.Contents>\n        <>\n          <div className=\"page-action-bar\">\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton icon=\"plus\" href=\"org/new\" disabled={!canCreateOrg}>\n              New org\n            </LinkButton>\n          </div>\n          {state.error && getErrorMessage(state.error)}\n          {state.loading && 'Fetching organizations'}\n          {state.value && (\n            <AdminOrgsTable\n              orgs={state.value}\n              onDelete={(orgId) => {\n                deleteOrg(orgId).then(() => fetchOrgs());\n              }}\n            />\n          )}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n}\n"],"names":["AdminOrgsTable","orgs","onDelete","canDeleteOrgs","contextSrv","AccessControlAction","deleteOrg","setDeleteOrg","useState","className","style","width","map","org","href","id","name","Button","variant","size","icon","onClick","disabled","ConfirmModal","isOpen","title","body","confirmText","onDismiss","undefined","onConfirm","AdminListOrgsPages","state","fetchOrgs","useAsyncFn","async","getBackendSrv","get","getOrgs","canCreateOrg","useEffect","Page","navId","error","isFetchError","data","message","loading","value","orgId","delete","then"],"sourceRoot":""}