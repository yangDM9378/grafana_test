{"version":3,"file":"StorageFolderPage.37c101eac943696b36c4.js","mappings":"mUAaO,SAASA,EAAkBC,GAAc,MAC9C,MAAMC,EAA8B,QAA1B,EAAGD,EAAME,MAAMC,OAAOF,YAAI,QAAI,GAClCG,GAAUC,EAAAA,EAAAA,IAAS,KAChBC,EAAAA,EAAAA,KAAoBC,KAAK,WAAaN,IAC5C,CAACA,IAEEO,EAAYP,EAAKQ,OAAS,EAAK,KAAIR,KAAU,KAC7CS,EAAUC,EAAmBV,GA2B7BW,EA8BC,CAAEC,KAAM,CAAEC,KAAM,MAAQC,KAAM,CAAED,KAAM,UAAWE,IAAK,OA5B7D,OACE,UAAC,IAAI,CAACJ,SAAUA,EAAUF,QAASA,EAAQ,WACvCO,EAAAA,EAAAA,eAAAA,SAAiC,IAAL,GAC5B,0BACE,SAAC,IAAK,CAACC,MAAM,mCAAkC,kEA/BjC,MACpB,GAAId,EAAQe,MAAO,CAEjB,OADcf,EAAQe,MAAMC,OAAO,GAAGC,OAAOC,UAChCC,KAAKC,IAChB,IAAIC,EAAOD,EACX,MAAME,EAAWD,EAAKE,QAAQ,KAAO,EAC/BC,GAAUF,GAAYD,EAAKI,SAAS,SACpCb,EAAO,GAAER,IAAYiB,IAE3B,OACE,UAAC,IAAI,CAAYK,KAAMJ,GAAYE,EAASZ,OAAMe,EAAU,WAC1D,SAAC,YAAY,UAAEN,KACf,SAAC,WAAW,WACV,SAAC,IAAI,CAACA,KAAMC,EAAW,SAAWE,EAAS,UAAY,WAAYI,KAAK,WAHjEP,EAKJ,GAGb,CACA,OAAIrB,EAAQ6B,QACH,IAAP,GAAO,SAAC,IAAO,KAEV,IAAP,GAAO,+BAAY,EAYhBC,KAGP,CAEO,SAASvB,EAAmBV,GACjC,MAAMkC,EAAQlC,EAAKmC,MAAM,KACzB,IAEIC,EAFAC,EAA2B,GAC3BtB,EAAM,IAGV,IAAK,IAAIuB,EAAI,EAAGA,EAAIJ,EAAM1B,OAAQ8B,IAChCvB,GAAQ,IAAGmB,EAAMI,KACjBD,EAASE,KAAK,CAAE1B,KAAMqB,EAAMI,GAAIvB,MAAKyB,WAAYJ,IACjDA,EAAcC,EAASA,EAAS7B,OAAS,GAG3C,OAAO4B,CACT,CAEO,SAASK,IACd,MAAO,CAAE7B,KAAM,CAAEC,KAAM,MAAQC,KAAM,CAAED,KAAM,UAAWE,IAAK,MAC/D,CAEA,S","sources":["webpack://grafana/./public/app/features/storage/StorageFolderPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, NavModel, NavModelItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, Card, Icon, Spinner } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getGrafanaStorage } from './storage';\n\nexport interface Props extends GrafanaRouteComponentProps<{ slug: string }> {}\n\nexport function StorageFolderPage(props: Props) {\n  const slug = props.match.params.slug ?? '';\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage().list('content/' + slug);\n  }, [slug]);\n\n  const childRoot = slug.length > 0 ? `g/${slug}/` : 'g/';\n  const pageNav = getPageNavFromSlug(slug);\n\n  const renderListing = () => {\n    if (listing.value) {\n      const names = listing.value.fields[0].values.toArray();\n      return names.map((item: string) => {\n        let name = item;\n        const isFolder = name.indexOf('.') < 0;\n        const isDash = !isFolder && name.endsWith('.json');\n        const url = `${childRoot}${name}`;\n\n        return (\n          <Card key={name} href={isFolder || isDash ? url : undefined}>\n            <Card.Heading>{name}</Card.Heading>\n            <Card.Figure>\n              <Icon name={isFolder ? 'folder' : isDash ? 'gf-grid' : 'file-alt'} size=\"sm\" />\n            </Card.Figure>\n          </Card>\n        );\n      });\n    }\n    if (listing.loading) {\n      return <Spinner />;\n    }\n    return <div>?</div>;\n  };\n\n  const navModel = getRootContentNavModel();\n\n  return (\n    <Page navModel={navModel} pageNav={pageNav}>\n      {!config.featureToggles.topnav && (\n        <div>\n          <Alert title=\"Enable the topnav feature toggle\">This page is designed assuming topnav is enabled</Alert>\n        </div>\n      )}\n      {renderListing()}\n    </Page>\n  );\n}\n\nexport function getPageNavFromSlug(slug: string) {\n  const parts = slug.split('/');\n  let pageNavs: NavModelItem[] = [];\n  let url = 'g';\n  let lastPageNav: NavModelItem | undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    url += `/${parts[i]}`;\n    pageNavs.push({ text: parts[i], url, parentItem: lastPageNav });\n    lastPageNav = pageNavs[pageNavs.length - 1];\n  }\n\n  return lastPageNav;\n}\n\nexport function getRootContentNavModel(): NavModel {\n  return { main: { text: 'C:' }, node: { text: 'Content', url: '/g' } };\n}\n\nexport default StorageFolderPage;\n"],"names":["StorageFolderPage","props","slug","match","params","listing","useAsync","getGrafanaStorage","list","childRoot","length","pageNav","getPageNavFromSlug","navModel","main","text","node","url","config","title","value","fields","values","toArray","map","item","name","isFolder","indexOf","isDash","endsWith","href","undefined","size","loading","renderListing","parts","split","lastPageNav","pageNavs","i","push","parentItem","getRootContentNavModel"],"sourceRoot":""}