{"version":3,"file":"phlarePlugin.10d60476a0926151b2a7.js","mappings":"yPAoBO,MAAMA,EAA+B,CAC1CC,cAAe,KACfC,UAAW,OACXC,QAAS,I,0BCRJ,SAASC,EAAMC,GACpB,MAAMC,GAASC,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,cAAaC,GAAUC,EAAUD,EAAOJ,IAAQ,CAACA,KAC3E,OAAO,gBAAKM,UAAWL,EAAOM,KAAK,SAAEP,EAAMQ,UAC7C,CAEA,MAAMH,EAAY,CAACD,EAAsBJ,KAAiB,gBAAM,CAC9DO,MAAME,EAAAA,EAAAA,KAAI,CACRC,QAAS,OACTC,cAA8B,QAAjB,EAAEX,EAAMY,iBAAS,QAAI,MAClCC,SAAoB,QAAV,EAAAb,EAAMc,YAAI,SAAW,YAASC,EACxCC,WAAYhB,EAAMgB,WAClBC,IAAKb,EAAMc,QAAiB,QAAV,EAAClB,EAAMiB,WAAG,QAAI,GAChCE,SAAUnB,EAAMmB,WAEnB,EChBYC,EAAsC,IAA8B,IAA7B,SAAEZ,EAAQ,WAAEa,GAAY,EAC1E,MAAMpB,GAASC,EAAAA,EAAAA,IAAWG,GAE1B,OACE,gBAAKC,UAAWL,EAAOM,KAAK,UAC1B,SAACR,EAAK,eAACkB,IAAK,GAAOI,EAAU,UAC1Bb,MAEC,EAIJH,EAAaD,IACV,CACLG,MAAME,EAAAA,EAAAA,KAAI,CACRa,QAASlB,EAAMc,QAAQ,GACvBK,gBAAiBnB,EAAMoB,OAAOC,WAAWC,UACzCC,aAAcvB,EAAMwB,MAAMD,aAAa,OCtBhCE,EAAwC,IAAkB,IAAjB,SAAErB,GAAU,EAChE,OACE,SAACT,EAAK,CAACkB,IAAK,GAAKL,UAAU,SAAQ,SAChCJ,GACK,E,yBCVL,MCAMsB,EAAqB,CAChCC,GAAI,SACJC,WAAY,CAAC,WACbC,QAAS,CAAC,OAAQ,UAClBC,UAAW,GACXC,IAAK,CACHC,SDWgD,CAClDC,YAAY,EACZC,aAAc,GACdC,aAAc,UAEdC,SAAU,GACVC,UAAW,GAGXC,QAAS,uBACTC,QAAS,wEACTC,OAAQ,cACRC,YAAa,oBACbC,aAAc,oBACdC,UAAW,iCACXC,cAAe,mCACfC,YAAa,UAEbC,UAAW,CACT3C,KAAM,CAEJ,CAAC,+BAAgC,OAGjC,CAAC,kBAAmB,kBACpB,CAAC,kBAAmB,kBACpB,CAAC,IAAK,SAAU,kBAChB,CAAC,IAAK,SAAU,kBAGhB,CAAE4C,QAAS,eAGX,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CACE,WACA,CACEC,MAAO,CACL,aAAc,YACd,WAAY,MAMlB,CAAC,MAAO,UACR,CAAC,uCAAwC,gBACzC,CAAC,yCAA0C,gBAC3C,CAAC,gDAAiD,cAClD,CAAC,gCAAiC,gBAClC,CAAC,oCAAqC,iBACtC,CAAC,6BAA8B,UAC/B,CAAC,qBAAsB,WAGzBC,cAAe,CACb,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,SAAU,SAGlBC,cAAe,CACb,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,SAAU,SAGlBC,QAAS,CACP,CAAC,SAAU,OACX,CAAC,KAAM,aAAc,SAGvBC,WAAY,CAAC,CAAC,aAAc,YCrF5BC,sBDPkE,CAEpEC,YAAa,6DACbC,SAAU,CAAC,CAAC,IAAK,MACjBC,iBAAkB,CAChB,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAEtBC,iBAAkB,CAChB,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAEtBE,QAAS,CAAC,K,wHELL,MAAMC,EAA2E,yCAClE,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAI,gEAMT,CAAC,EAAC,CAErDC,uBACEC,EACAC,GAC4E,MAE5E,IAAMC,KAAKC,SAAUD,KAAKE,OACxB,MAAM,IAAIC,MAAM,2EAKlB,IAA0B,QAAtB,EAAAH,KAAKE,OAAOE,kBAAU,aAAtB,EAAwB1C,MAAOoC,EAAMpC,GACvC,MAAO,CAAE2C,YAAa,IAGxB,MAAM,MAAEC,EAAK,OAAEC,GAsLnB,SAA2BN,EAAgBH,EAAsCC,GAC/E,MAAMS,EAAOV,EAAMW,kBAAkBV,GAC/BO,EACI,MAARE,EACIP,EAAOS,MAAMC,KAAK,CAChBC,gBAAiBb,EAASc,WAC1BC,cAAef,EAASc,WACxBE,YAAaP,EAAKO,YAClBC,UAAWR,EAAKQ,YAElBf,EAAOS,MAAMO,cAAclB,GAG3BmB,EAAgB,CACpBC,OAAQpB,EAASoB,OACjBN,WAAYd,EAASc,YAIvB,MAAO,CAAEN,OADMT,EAAMsB,YAAYF,GAChBZ,QACnB,CA1M8Be,CAAkBrB,KAAKC,OAAQH,EAAOC,GAC1DuB,EA4IV,SAAsBC,EAAchB,GAClC,GAAa,KAATgB,EACF,MAAO,CACLC,KAAM,SAKV,MAAMC,EAAUF,EAAKG,SAASC,GACxBC,EAAiBC,MAAMC,KAAKL,GAASM,QAAgB,CAACC,EAAKC,KAC/D,MAAOC,EAAGC,EAAMC,GAASH,EAAM,GAE/B,OADAD,EAAIK,KAAK,CAAEF,OAAMC,UACVJ,CAAG,GACT,IAGGM,EAAkBf,EAAKgB,UAAU,EAAGhC,GAAQ0B,MAAMO,GACxD,GAAIF,EACF,MAAO,CACLd,KAAM,iBACNiB,UAAWH,EAAgB,GAC3BI,gBAAiBJ,EAAgB,GACjCK,YAAaf,GAMjB,GADuBL,EAAKgB,UAAU,EAAGhC,GAAQ0B,MAAMW,GAErD,MAAO,CACLpB,KAAM,gBACNmB,YAAaf,GAKjB,MAAO,CACLJ,KAAM,UAEV,CAnLsBqB,CAAa/C,EAAMgD,WAAYvC,GAC3CwC,EAAkB/C,KAAKgD,eAAe1B,GAKtC2B,EAAiBF,EAAgBG,OAAOC,WAAWD,OAQzD,MAAO,CAAE7C,YAPmD0C,EAAgBK,KAAI,CAACC,EAAMC,KAAU,CAC/FC,KAAMC,EAA4BH,EAAK7B,KAAMxB,KAAKC,QAClDwD,MAAOJ,EAAKI,MACZC,WAAYL,EAAKK,WACjBC,SAAUL,EAAMH,WAAWS,SAASX,EAAgB,KACpD3C,YAGJ,CAMAuD,UAAUC,GACR9D,KAAK+D,OAASD,EAAO/B,QAAyC,CAACC,EAAKgC,KAClE,MAAMC,EAAeD,EAAMD,OAAOhC,QAAyC,CAACC,EAAKkC,KAC/ElC,EAAIkC,EAAW/B,MAAQH,EAAIkC,EAAW/B,OAAS,IAAIgC,IACnDnC,EAAIkC,EAAW/B,MAAMiC,IAAIF,EAAW9B,OAC7BJ,IACN,CAAC,GAEJ,IAAK,MAAMyB,KAASY,OAAOC,KAAKL,GAC9BjC,EAAIyB,GAAS,IAAIU,IAAI,IAAKnC,EAAIyB,IAAU,MAAQQ,EAAaR,KAE/D,OAAOzB,CAAG,GACT,CAAC,EACN,CAOQgB,eAAe1B,GACrB,IAAK+C,OAAOC,KAAKtE,KAAK+D,QAAQb,OAC5B,MAAO,GAET,OAAQ5B,EAAUE,MAEhB,IAAK,UACH,MAAO,GAET,IAAK,QACH,OAAO6C,OAAOC,KAAKtE,KAAK+D,QAAQX,KAAKmB,IAC5B,CACLd,MAAOc,EACPb,WAAa,IAAGa,MAChB/C,KAAM,iBAIZ,IAAK,gBACH,OAAO6C,OAAOC,KAAKtE,KAAK+D,QAAQX,KAAKmB,IAC5B,CACLd,MAAOc,EACPb,WAAYa,EACZ/C,KAAM,iBAGZ,IAAK,iBACH,OAAOK,MAAMC,KAAK9B,KAAK+D,OAAOzC,EAAUmB,WAAW+B,UAAUpB,KAAKmB,IACzD,CACLd,MAAOc,EACPb,WAAYpC,EAAUoB,cAAgB6B,EAAO,IAAGA,KAChD/C,KAAM,kBAGZ,QACE,MAAM,IAAIrB,MAAO,wBAAuBmB,KAE9C,EAQF,SAASkC,EAA4BhC,EAAsBvB,GACzD,OAAQuB,GACN,IAAK,aACH,OAAOvB,EAAOwE,UAAUC,mBAAmBC,KAC7C,IAAK,cACH,OAAO1E,EAAOwE,UAAUC,mBAAmBE,WAC7C,QACE,MAAM,IAAIzE,MAAO,8BAA6BqB,KAEpD,CAgCA,MAAMqD,EAAiB,yBACjBC,EAAkB,QAClBnD,EAAkB,IAAIoD,OAAQ,IAAGF,EAAeG,aAAaF,EAAgBE,WAAY,KACzFxC,EAAoB,IAAIuC,OAAQ,IAAGF,EAAeG,eAAeF,EAAgBE,WACjFpC,EAAmB,IAAImC,OAAO,yBCpJ7B,SAASE,EAAatJ,GAC3B,MAAMuJ,EA2ER,SAAyBpB,GACvB,MAAMqB,GAAcC,EAAAA,EAAAA,QAA2B,IAAIxF,IAEnDyF,EAAAA,EAAAA,YAAU,KACJvB,GAEFqB,EAAYG,QAAQzB,UAAUC,EAChC,GACC,CAACA,IAEJ,MAAMyB,GAAyBH,EAAAA,EAAAA,QAA4B,MAS3D,OARAC,EAAAA,EAAAA,YAAU,IAED,KAAM,MACmB,QAA9B,EAAAE,EAAuBD,eAAO,OAA9B,OAAAC,EAAkC,GAEnC,IAGI,CAACrF,EAAkDD,KACxDkF,EAAYG,QAAQpF,OAASA,EAC7BiF,EAAYG,QAAQrF,OAASA,EAE7B,MAAM,QAAEuF,GAAYvF,EAAOwE,UAAUgB,+BAA+BC,EAAQP,EAAYG,SACxFC,EAAuBD,QAAUE,CAAO,CAE5C,CArG8BG,CAAgBhK,EAAMmI,QAC5ClI,GAASC,EAAAA,EAAAA,IAAWG,GAEpB4J,GAAgBC,EAAAA,EAAAA,GAAUlK,EAAMmK,YAChCC,GAAeX,EAAAA,EAAAA,QAAuB,MAE5C,OACE,gBACEnJ,UAAWL,EAAOoK,QAElBC,IAAKF,EAAa,UAElB,SAACG,EAAA,EAAU,CACT9D,MAAOzG,EAAMyG,MACbrE,SAAU2H,EACVS,OAAQxK,EAAMyK,SACdC,gBAAiBzK,EAAO0K,WACxBC,cAAe,CACb5G,SAAS,EACT6G,SAAU,GACVC,YAAa,MACbC,mBAAoB,EACpBC,oBAAqB,OACrBC,UAAW,CACTC,SAAU,SACVC,sBAAuB,EACvBC,WAAY,SACZC,wBAAyB,GAE3BC,sBAAsB,EACtBC,SAAU,KACVjK,QAAS,CACPkK,IAAK,EACLC,OAAQ,IAGZC,oBAAqBC,EACrBC,iBAAkB,CAACrH,EAAQD,KACzBiF,EAAoBhF,EAAQD,GAE5B,MAAMuH,EAAsB,KAC1B,MAAMC,EAAe1B,EAAaT,QAClC,GAAqB,OAAjBmC,EAAuB,CACzB,MAAMC,EAAcxH,EAAOyH,mBAC3BF,EAAaG,MAAMC,OAAU,GAAEH,EAAcI,MAC7CL,EAAaG,MAAMG,MAAQ,OAC3B,MAAMC,EAAaP,EAAaQ,YAChC/H,EAAOgI,OAAO,CAAEH,MAAOC,EAAYH,OAAQH,GAC7C,GAGFxH,EAAOiI,uBAAuBX,GAC9BA,IAEAtH,EAAOkI,WAAWnI,EAAOoI,OAAOC,MAAQrI,EAAOsI,QAAQC,OAAO,KAC5D5C,EAAcN,QAAQpF,EAAO4C,WAAW,GACxC,KAKZ,CASA,MAAMgF,EAAuB,EAkC7B,IAAIW,GAAkB,EACtB,MAAM/C,EAAS,SAEf,SAAS4B,EAAarH,GACpB,IAAwB,IAApBwI,EAA2B,CAC7BA,GAAkB,EAClB,MAAM,QAAE7K,EAAO,WAAED,EAAU,UAAEE,EAAS,IAAEC,GAAQL,EAChDwC,EAAOwE,UAAUiE,SAAS,CAAEhL,GAAIgI,EAAQ9H,UAASD,aAAYE,cAC7DoC,EAAOwE,UAAUkE,yBAAyBjD,EAAQ5H,EAAIC,UACtDkC,EAAOwE,UAAUmE,yBAAyBlD,EAAQ5H,EAAIsB,sBACxD,CACF,CAEA,MAAMpD,EAAaD,IACV,CACLuK,WAAYlK,EAAAA,GAAI;;;;;;MAOhB4J,QAAS5J,EAAAA,GAAI;;;;;8JCpIV,MAAMyM,EAA2ClN,IACtD,MAAM,MAAE8H,EAAK,SAAEqF,EAAQ,QAAEC,EAAO,SAAE5M,EAAQ,MAAE4L,GAAyBpM,EAAfqN,E,oIAAU,CAAKrN,EAAK,GAEpEI,GAAQkN,EAAAA,EAAAA,MACRrN,EAASI,EAAUD,EAAOgM,GAG1BmB,GAAeF,aAAU,EAAVA,EAAYG,WAAWC,aAAU,EAAVA,EAAAA,WAAuBjN,IAE7DkN,GACJ,iCACE,mBAAOpN,UAAWL,EAAO6H,MAAO0F,QAASD,EAAa,UACnDzF,EACAqF,IAAY,iBAAM7M,UAAWL,EAAOkN,SAAS,yBAC7CC,IACC,SAACO,EAAA,EAAO,CAACC,UAAU,MAAMC,QAAST,EAAShN,MAAM,OAAM,UACrD,SAAC0N,EAAA,EAAI,CAACtH,KAAK,cAAcuH,KAAK,KAAKzN,UAAWL,EAAO+N,aAI3D,iBAAM1N,UAAWL,EAAOgO,WAI5B,OACE,gBAAK3N,UAAWL,EAAOM,KAAK,UAC1B,SAAC2N,EAAA,EAAK,eAAC5N,UAAWL,EAAOkO,MAAOrG,MAAO4F,GAAaL,EAAU,UAC3D7M,MAEC,EAIJH,GAAY+N,EAAAA,EAAAA,IAAc,CAAChO,EAAsBgM,KAC9C,CACL6B,OAAOxN,EAAAA,EAAAA,KAAI,CACT4N,aAAcjO,EAAMc,QAAQ,GAC5BoN,cAAelO,EAAMc,QAAQ,MAE/BX,MAAME,EAAAA,EAAAA,KAAI,CACR8N,SAAUnO,EAAMc,QAAQkL,QAAAA,EAAS,KAEnCtE,OAAOrH,EAAAA,EAAAA,KAAI,CACToK,SAAU,GACV2D,WAAYpO,EAAMqO,WAAWC,mBAE/BvB,UAAU1M,EAAAA,EAAAA,KAAI,CACZkO,UAAW,SACXC,MAAOxO,EAAMoB,OAAOoE,KAAKlE,YAE3ByM,OAAO1N,EAAAA,EAAAA,KAAI,CACToO,aAAc,IAEhBb,MAAMvN,EAAAA,EAAAA,KAAI,CACRmO,MAAOxO,EAAMoB,OAAOoE,KAAKlE,UACzBoN,WAAY1O,EAAMc,QAAQ,GAC1B,SAAU,CACR0N,MAAOxO,EAAMoB,OAAOoE,KAAKmJ,eCpD3BC,EAAwF,CAC5F,CAAEvI,MAAO,UAAWqB,MAAO,SAAUmH,YAAa,6BAClD,CAAExI,MAAO,UAAWqB,MAAO,UAAWmH,YAAa,kBACnD,CAAExI,MAAO,OAAQqB,MAAO,OAAQmH,YAAa,wCAG/C,SAASC,EAAeC,GACtB,OAAIA,IAAQC,EAAAA,GAAAA,QACHJ,EAEFA,EAAYK,QAAQC,GAA4B,SAAjBA,EAAO7I,OAC/C,CAmBO,SAAS8I,EAAa,GAA8C,UAA9C,MAAEC,EAAK,cAAEC,EAAa,IAAEN,EAAG,OAAEhH,GAAe,EACvE,MAAOuH,EAAQC,IAAcC,EAAAA,EAAAA,IAAU,GACjC3P,GAASC,EAAAA,EAAAA,IAAWG,GACpB2O,EAAcE,EAAeC,GAC7BU,EArBR,SAA2B1H,GACzB,IAAI2H,EAA6B,GACjC,GAAI3H,EAAQ,CACV,MAAMC,EAASD,EAAO4H,SAASC,GACtBA,EAAI5H,OAAOX,KAAKwI,GAAMA,EAAEzJ,SAEjCsJ,EAAU5J,MAAMC,KAAK,IAAIqC,IAAIJ,IAASX,KAAKwI,IAAC,CAC1CnI,MAAOmI,EACPxJ,MAAOwJ,KAEX,CACA,OAAOH,CACT,CASyBI,CAAkB/H,GAEzC,OACE,UAACpI,EAAK,CAACkB,IAAK,EAAGL,UAAU,SAAQ,WAC/B,iBAAKN,UAAWL,EAAOkQ,OAAQC,QAAST,EAAYU,MAAM,wBAAuB,WAC/E,gBAAK/P,UAAWL,EAAOqQ,OAAO,UAC5B,SAACxC,EAAA,EAAI,CAACtH,KAAMkJ,EAAS,aAAe,mBAEtC,eAAIpP,UAAWL,EAAOoQ,MAAM,sBAC1BX,IACA,gBAAKpP,UAAWL,EAAOgP,YAAY,SAChC,CAAE,SAAQO,EAAM3P,YAA0B,QAAb,EAAA2P,EAAM1P,eAAO,OAAb,EAAeyH,OAAU,aAAYiI,EAAM1P,QAAQyQ,KAAK,aAAUxP,GAC7FsO,QAAQmB,GAAMA,IACd/I,KAAI,CAAC+I,EAAGC,KACP,0BAAeD,GAAJC,UAKpBf,IACC,iBAAKpP,UAAWL,EAAOyQ,KAAK,WAC1B,SAACxD,EAAW,CAACpF,MAAO,aAAa,UAC/B,SAAC6I,EAAA,EAAgB,CACfb,QAASd,EACTvI,MAAO+I,EAAM3P,UACb4K,SAAWhE,GAAUgJ,EAAc,OAAD,UAAMD,EAAO,CAAA3P,UAAW4G,UAG9D,SAACyG,EAAW,CACVpF,MAAO,WACPsF,SACE,yIAGD,UAED,SAAC,KAAW,CACVwD,YAAY,QACZnK,MAAO+I,EAAM1P,QACb+Q,kBAAgB,EAChBf,QAASD,EACTpF,SAAWqG,IACT,MAAMC,EAAUD,EAAOrJ,KAAKuJ,GACnBA,EAAEvK,QAEXgJ,EAAc,OAAD,UAAMD,EAAO,CAAA1P,QAASiR,IAAU,WAQ7D,CAEA,MAAM1Q,EAAaD,IACV,CACL6Q,aAAaxQ,EAAAA,EAAAA,KAAI,CACfmO,MAAOxO,EAAMoB,OAAOoE,KAAKlE,UACzBwP,OAAQ,UACRrG,SAAUzK,EAAMqO,WAAW0C,UAAUtG,SACrC,UAAW,CACT+D,MAAOxO,EAAMoB,OAAOoE,KAAKmJ,WAG7BoB,QAAQ1P,EAAAA,EAAAA,KAAI,CACVC,QAAS,OACTwQ,OAAQ,UACRlQ,WAAY,WACZ4N,MAAOxO,EAAMoB,OAAOoE,KAAKmJ,QACzB,UAAW,CACTtN,WAAYrB,EAAMoB,OAAO4P,UAAUhR,EAAMoB,OAAOC,WAAWsN,QAAS,QAGxEsB,OAAO5P,EAAAA,EAAAA,KAAI,CACTU,SAAU,EACVkQ,SAAU,SACVxG,SAAUzK,EAAMqO,WAAW0C,UAAUtG,SACrC2D,WAAYpO,EAAMqO,WAAWC,iBAC7B4C,OAAQ,IAEVrC,aAAaxO,EAAAA,EAAAA,KAAI,CACfmO,MAAOxO,EAAMoB,OAAOoE,KAAKlE,UACzBmJ,SAAUzK,EAAMqO,WAAW0C,UAAUtG,SACrC0G,YAAanR,EAAMc,QAAQ,GAC3BD,IAAKb,EAAMc,QAAQ,GACnBR,QAAS,SAEXgQ,MAAMjQ,EAAAA,EAAAA,KAAI,CACRC,QAAS,OACT8Q,WAAYpR,EAAMc,QAAQ,GAC1BD,IAAKb,EAAMc,QAAQ,GACnBL,SAAU,SAEZyP,QAAQ7P,EAAAA,EAAAA,KAAI,CACVmO,MAAOxO,EAAMoB,OAAOoE,KAAKlE,UACzB+P,YAAc,GAAErR,EAAMc,QAAQ,SC/B7B,SAASwQ,GAAelC,EAAcL,GAC3C,IAAIwC,GAAaC,EAAAA,EAAAA,UAASpC,EAAO7P,GAMjC,OALIwP,IAAQC,EAAAA,GAAAA,SAA4C,SAAzBuC,EAAW9R,YAGxC8R,EAAW9R,UAAY,WAElB8R,CACT,C,4BCtHO,MAAME,WAAuBC,GAAAA,GAClCC,YAAYC,GACVC,MAAMD,EACR,CAEAxC,MAAM0C,GACJ,MAAMC,EAAeD,EAAQE,QAC1B/C,QAAQgD,GAAMA,EAAEC,gBAChB7K,KAAK4K,GAEoB,KAApBA,EAAEzS,cACG,OAAP,UACKyS,EAAC,CACJzS,cAAe,OAGZ8R,GAAeW,EAAGH,EAAQ/C,OAErC,OAAKgD,EAAa5K,OAGX0K,MAAMzC,MAAM,OAAD,UACb0C,EAAO,CACVE,QAASD,MAJFI,EAAAA,GAAAA,IAAG,CAAEC,KAAM,IAMtB,CAEAC,wBACE,aAAaR,MAAMS,YAAY,eACjC,CAEAD,kBAEE,aAAaR,MAAMS,YAAY,SAAU,CAAEC,SAAU,CAAC,OACxD,CAEAF,sBACE,aAAaR,MAAMS,YAAY,aACjC,ECvCK,MAAME,GAAS,IAAIC,EAAAA,GAA+DhB,IACtFiB,iBCC0B9S,IAC3B,MAAM,QAAE8P,EAAO,gBAAEiD,GAAoB/S,EAErC,OACE,iCACE,SAACgT,EAAA,EAAsB,CACrBC,WAAY,wBACZC,iBAAkBpD,EAClBqD,mBAAmB,EACnB1I,SAAUsI,IACV,OAEF,eAAIzS,UAAU,eAAc,wBAC5B,gBAAKA,UAAU,gBAAe,UAC5B,gBAAKA,UAAU,iBAAgB,UAC7B,gBAAKA,UAAU,UAAS,UACtB,SAAC,gBAAqB,CACpBwH,MAAM,eACNsL,WAAY,GACZC,SACE,SAAC,YAAiB,CAChB/S,UAAU,UACVmG,MAAOqJ,EAAQwD,SAASC,QACxBC,YAAY,EACZ5C,YAAY,MACZnG,SAAWgJ,IACTV,EAAgB,OAAD,UACVjD,EAAO,CACVwD,SAAU,OAAF,UACHxD,EAAQwD,SAAQ,CACnBC,QAASE,EAAMC,cAAcjN,UAE/B,EAEJkN,iBAAkB,CAChB,CAACC,EAAAA,GAAAA,QAA8B,EAC7BC,EAAAA,EAAAA,IACE,yBACA,4FAMVzG,QAAQ,kIAKf,IDjDJ0G,gBFQI,SAAqB9T,GAC1B,MAAM+T,EA2ER,SAAyBC,GACvB,MAAOD,EAAcE,IAAmBC,EAAAA,EAAAA,UAA+B,IAOvE,OANAxK,EAAAA,EAAAA,YAAU,KACR,WACE,MAAMqK,QAAqBC,EAAWG,kBACtCF,EAAgBF,EACjB,EAHD,EAGI,GACH,CAACC,IACGD,CACT,CApFuBK,CAAgBpU,EAAMgU,YAyBrCK,GAAeC,EAAAA,EAAAA,IAAS,IACrBtU,EAAMgU,WAAWO,aACvB,CAACvU,EAAMgU,aAEJQ,EAyBR,SAA4BT,GAC1B,OAAOU,EAAAA,EAAAA,UAAQ,KACb,IAAIC,EAAY,IAAIC,IAEpB,IAAK,IAAIC,KAAeb,EAAc,SAC/BW,EAAUG,IAAID,EAAYpO,OAC7BkO,EAAUI,IAAIF,EAAYpO,KAAM,CAC9BsB,MAAO8M,EAAYpO,KACnBC,MAAOmO,EAAYG,GACnBvU,SAAU,KAGiB,QAA/B,EAAAkU,EAAUM,IAAIJ,EAAYpO,aAAK,OAAU,QAAV,EAA/B,EAAiChG,gBAAQ,OAAzC,EAA2CkG,KAAK,CAC9CoB,MAAO8M,EAAYK,YACnBxO,MAAOmO,EAAYG,IAEvB,CACA,OAAO7O,MAAMC,KAAKuO,EAAU7L,SAAS,GACpC,CAACkL,GACN,CA5C0BmB,CAAmBnB,GACrCoB,EAwDR,SAAwBpB,EAAoCzB,GAC1D,OAAOmC,EAAAA,EAAAA,UAAQ,KACb,IAAKV,EACH,MAAO,UAET,MAAMqB,EAAUrB,EAAasB,MAAMxP,GAASA,EAAKkP,KAAOzC,IACxD,OAAK8C,EAIEA,EAAQ5O,KAAO,MAAQ4O,EAAQH,YAH7B,uBAGwC,GAChD,CAAC3C,EAAeyB,GACrB,CApE8BuB,CAAevB,EAAc/T,EAAMwP,MAAM8C,eACrE,IAAI9C,EAAQkC,GAAe1R,EAAMwP,MAAOxP,EAAMmP,KAE9C,OACE,UAACtN,EAAU,YACT,UAACT,EAAS,CAACC,WAAY,CAAEP,MAAM,EAAOG,IAAK,GAAI,WAC7C,SAACsU,EAAA,EAAc,CAAC9K,SAlCtB,SAA6BhE,EAAiB+O,GAC5C,GAA+B,IAA3BA,EAAgBjO,OAClB,OAGF,MAAMxF,EAAKyT,EAAgBA,EAAgBjO,OAAS,GAAGd,MAEvD,GAAkB,iBAAP1E,EACT,MAAM,IAAIyC,MAAM,oBAGlBxE,EAAMyK,SAAS,OAAD,UAAMzK,EAAMwP,MAAO,CAAA8C,cAAevQ,IAClD,EAsBqD+N,QAAS0E,EAAiBiB,YAAa,CAAEC,QAAS,aAAc,SAC5GP,KAEH,SAAC7L,EAAY,CACX7C,MAAO+I,EAAM5P,cACb6K,SAzBR,SAA+BhE,GAC7BzG,EAAMyK,SAAS,OAAD,UAAMzK,EAAMwP,MAAO,CAAA5P,cAAe6G,IAClD,EAwBQ0D,WAtBR,SAAwB1D,GACtBzG,EAAMyK,SAAS,OAAD,UAAMzK,EAAMwP,MAAO,CAAA5P,cAAe6G,KAChDzG,EAAMmK,YACR,EAoBQhC,OAAQkM,EAAa5N,YAGzB,SAACrF,EAAS,WACR,SAACmO,EAAY,CAACC,MAAOA,EAAOC,cAAezP,EAAMyK,SAAU0E,IAAKnP,EAAMmP,IAAKhH,OAAQkM,EAAa5N,YAIxG,G,iDI/DA,QALgB,SAAUA,GACtB,IAAI6D,GAAM,IAAAb,QAAOhD,GAEjB,OADA6D,EAAIX,QAAUlD,EACP6D,CACX,C","sources":["webpack://grafana/./public/app/plugins/datasource/phlare/types.ts","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/Stack.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/EditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/EditorRows.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/fireql/fireql.ts","webpack://grafana/./public/app/plugins/datasource/phlare/fireql/index.ts","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/autocomplete.ts","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/LabelsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/EditorField.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/QueryOptions.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/datasource.ts","webpack://grafana/./public/app/plugins/datasource/phlare/module.ts","webpack://grafana/./public/app/plugins/datasource/phlare/ConfigEditor.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useLatest.js"],"sourcesContent":["import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport interface Query extends DataQuery {\n  labelSelector: string;\n  profileTypeId: string;\n  queryType: 'metrics' | 'profile' | 'both';\n  groupBy: string[];\n}\n\nexport interface ProfileTypeMessage {\n  ID: string;\n  name: string;\n  period_type: string;\n  period_unit: string;\n  sample_type: string;\n  sample_unit: string;\n}\n\nexport type SeriesMessage = Array<{ labels: Array<{ name: string; value: string }> }>;\n\nexport const defaultQuery: Partial<Query> = {\n  labelSelector: '{}',\n  queryType: 'both',\n  groupBy: [],\n};\n\n/**\n * These are options configured for each DataSource instance.\n */\nexport interface FireDataSourceOptions extends DataSourceJsonData {\n  minStep?: string;\n}\n","import { css } from '@emotion/css';\nimport React, { CSSProperties, useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n  children: React.ReactNode;\n}\n\nexport function Stack(props: StackProps) {\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\n  return <div className={styles.root}>{props.children}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowProps {\n  children: React.ReactNode;\n  stackProps?: Partial<React.ComponentProps<typeof Stack>>;\n}\n\nexport const EditorRow: React.FC<EditorRowProps> = ({ children, stackProps }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={2} {...stackProps}>\n        {children}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowsProps {\n  children: React.ReactNode;\n}\n\nexport const EditorRows: React.FC<EditorRowsProps> = ({ children }) => {\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      {children}\n    </Stack>\n  );\n};\n","import type { languages } from 'monaco-editor';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [['{', '}']],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.fireql',\n\n  keywords: [],\n  operators: [],\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/, 'tag'],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n","import { language, languageConfiguration } from './fireql';\n\nexport const languageDefinition = {\n  id: 'fireql',\n  extensions: ['.fireql'],\n  aliases: ['fire', 'fireql'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import { monacoTypes, Monaco } from '@grafana/ui';\n\nimport { SeriesMessage } from '../types';\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * At this moment we just pass it all the labels/values we get from Fire backend later on we may do something a bit\n * smarter if there will be lots of labels.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  triggerCharacters = ['{', ',', '[', '(', '=', '~', ' ', '\"'];\n\n  // We set these directly and ae required for the provider to function.\n  monaco: Monaco | undefined;\n  editor: monacoTypes.editor.IStandaloneCodeEditor | undefined;\n\n  private labels: { [label: string]: Set<string> } = {};\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // Should not happen, this should not be called before it is initialized\n    if (!(this.monaco && this.editor)) {\n      throw new Error('provideCompletionItems called before CompletionProvider was initialized');\n    }\n\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n    const completionItems = this.getCompletions(situation);\n\n    // monaco by-default alphabetically orders the items.\n    // to stop it, we use a number-as-string sortkey,\n    // so that monaco keeps the order we use\n    const maxIndexDigits = completionItems.length.toString().length;\n    const suggestions: monacoTypes.languages.CompletionItem[] = completionItems.map((item, index) => ({\n      kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n      label: item.label,\n      insertText: item.insertText,\n      sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n      range,\n    }));\n    return { suggestions };\n  }\n\n  /**\n   * We expect the data directly from the request and transform it here. We do some deduplication and turn them into\n   * object for quicker search as we usually need either a list of label names or values or particular label.\n   */\n  setSeries(series: SeriesMessage) {\n    this.labels = series.reduce<{ [label: string]: Set<string> }>((acc, serie) => {\n      const seriesLabels = serie.labels.reduce<{ [label: string]: Set<string> }>((acc, labelValue) => {\n        acc[labelValue.name] = acc[labelValue.name] || new Set();\n        acc[labelValue.name].add(labelValue.value);\n        return acc;\n      }, {});\n\n      for (const label of Object.keys(seriesLabels)) {\n        acc[label] = new Set([...(acc[label] || []), ...seriesLabels[label]]);\n      }\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest label names or values.\n   * @param situation\n   * @private\n   */\n  private getCompletions(situation: Situation): Completion[] {\n    if (!Object.keys(this.labels).length) {\n      return [];\n    }\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: `{${key}=\"`,\n            type: 'LABEL_NAME',\n          };\n        });\n      }\n      case 'IN_LABEL_NAME':\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: key,\n            type: 'LABEL_NAME',\n          };\n        });\n      case 'IN_LABEL_VALUE':\n        return Array.from(this.labels[situation.labelName].values()).map((key) => {\n          return {\n            label: key,\n            insertText: situation.betweenQuotes ? key : `\"${key}\"`,\n            type: 'LABEL_VALUE',\n          };\n        });\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'LABEL_NAME' | 'LABEL_VALUE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Label = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_LABEL_NAME';\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_VALUE';\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\nconst labelNameRegex = /[a-zA-Z_][a-zA-Z0-9_]*/;\nconst labelValueRegex = /[^\"]*/; // anything except a double quote\nconst labelPairsRegex = new RegExp(`(${labelNameRegex.source})=\"(${labelValueRegex.source})\"`, 'g');\nconst inLabelValueRegex = new RegExp(`(${labelNameRegex.source})=(\"?)${labelValueRegex.source}$`);\nconst inLabelNameRegex = new RegExp(/[{,]\\s*[a-zA-Z0-9_]*$/);\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * As currently Fire handles just a simple {foo=\"bar\", baz=\"zyx\"} kind of values we can do with simple regex to figure\n * out where we are with the cursor.\n * @param text\n * @param offset\n */\nfunction getSituation(text: string, offset: number): Situation {\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  // Get all the labels so far in the query, so we can do some more filtering.\n  const matches = text.matchAll(labelPairsRegex);\n  const existingLabels = Array.from(matches).reduce<Label[]>((acc, match) => {\n    const [_, name, value] = match[1];\n    acc.push({ name, value });\n    return acc;\n  }, []);\n\n  // Check if we are editing a label value right now. If so also get name of the label\n  const matchLabelValue = text.substring(0, offset).match(inLabelValueRegex);\n  if (matchLabelValue) {\n    return {\n      type: 'IN_LABEL_VALUE',\n      labelName: matchLabelValue[1],\n      betweenQuotes: !!matchLabelValue[2],\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Check if we are editing a label name\n  const matchLabelName = text.substring(0, offset).match(inLabelNameRegex);\n  if (matchLabelName) {\n    return {\n      type: 'IN_LABEL_NAME',\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Will happen only if user writes something that isn't really a label selector\n  return {\n    type: 'UNKNOWN',\n  };\n}\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\nimport { useLatest } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CodeEditor, Monaco, useStyles2, monacoTypes } from '@grafana/ui';\n\nimport { languageDefinition } from '../fireql';\nimport { SeriesMessage } from '../types';\n\nimport { CompletionProvider } from './autocomplete';\n\ninterface Props {\n  value: string;\n  onChange: (val: string) => void;\n  onRunQuery: (value: string) => void;\n  series?: SeriesMessage;\n}\n\nexport function LabelsEditor(props: Props) {\n  const setupAutocompleteFn = useAutocomplete(props.series);\n  const styles = useStyles2(getStyles);\n\n  const onRunQueryRef = useLatest(props.onRunQuery);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={styles.wrapper}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <CodeEditor\n        value={props.value}\n        language={langId}\n        onBlur={props.onChange}\n        containerStyles={styles.queryField}\n        monacoOptions={{\n          folding: false,\n          fontSize: 14,\n          lineNumbers: 'off',\n          overviewRulerLanes: 0,\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            verticalScrollbarSize: 8, // used as \"padding-right\"\n            horizontal: 'hidden',\n            horizontalScrollbarSize: 0,\n          },\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n          padding: {\n            top: 5,\n            bottom: 6,\n          },\n        }}\n        onBeforeEditorMount={ensureFireQL}\n        onEditorDidMount={(editor, monaco) => {\n          setupAutocompleteFn(editor, monaco);\n\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n        }}\n      />\n    </div>\n  );\n}\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n */\nfunction useAutocomplete(series?: SeriesMessage) {\n  const providerRef = useRef<CompletionProvider>(new CompletionProvider());\n\n  useEffect(() => {\n    if (series) {\n      // When we have the value we will pass it to the CompletionProvider\n      providerRef.current.setSeries(series);\n    }\n  }, [series]);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    providerRef.current.editor = editor;\n    providerRef.current.monaco = monaco;\n\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, providerRef.current);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet fireqlSetupDone = false;\nconst langId = 'fireql';\n\nfunction ensureFireQL(monaco: Monaco) {\n  if (fireqlSetupDone === false) {\n    fireqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    queryField: css`\n      flex: 1;\n      // Not exactly sure but without this the editor doe not shrink after resizing (so you can make it bigger but not\n      // smaller). At the same time this does not actually make the editor 100px because it has flex 1 so I assume\n      // this should sort of act as a flex-basis (but flex-basis does not work for this). So yeah CSS magic.\n      width: 100px;\n    `,\n    wrapper: css`\n      display: flex;\n      flex: 1;\n      border: 1px solid rgba(36, 41, 46, 0.3);\n      border-radius: 2px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ComponentProps } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Icon, PopoverContent, ReactUtils, stylesFactory, Tooltip, useTheme2 } from '@grafana/ui';\n\ninterface EditorFieldProps extends ComponentProps<typeof Field> {\n  label: string;\n  children: React.ReactElement;\n  width?: number | string;\n  optional?: boolean;\n  tooltip?: PopoverContent;\n}\n\nexport const EditorField: React.FC<EditorFieldProps> = (props) => {\n  const { label, optional, tooltip, children, width, ...fieldProps } = props;\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, width);\n\n  // Null check for backward compatibility\n  const childInputId = fieldProps?.htmlFor || ReactUtils?.getChildId(children);\n\n  const labelEl = (\n    <>\n      <label className={styles.label} htmlFor={childInputId}>\n        {label}\n        {optional && <span className={styles.optional}> - optional</span>}\n        {tooltip && (\n          <Tooltip placement=\"top\" content={tooltip} theme=\"info\">\n            <Icon name=\"info-circle\" size=\"sm\" className={styles.icon} />\n          </Tooltip>\n        )}\n      </label>\n      <span className={styles.space} />\n    </>\n  );\n\n  return (\n    <div className={styles.root}>\n      <Field className={styles.field} label={labelEl} {...fieldProps}>\n        {children}\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2, width?: number | string) => {\n  return {\n    space: css({\n      paddingRight: theme.spacing(0),\n      paddingBottom: theme.spacing(0.5),\n    }),\n    root: css({\n      minWidth: theme.spacing(width ?? 0),\n    }),\n    label: css({\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n    }),\n    optional: css({\n      fontStyle: 'italic',\n      color: theme.colors.text.secondary,\n    }),\n    field: css({\n      marginBottom: 0, // GrafanaUI/Field has a bottom margin which we must remove\n    }),\n    icon: css({\n      color: theme.colors.text.secondary,\n      marginLeft: theme.spacing(1),\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Icon, useStyles2, RadioButtonGroup, MultiSelect } from '@grafana/ui';\n\nimport { Query, SeriesMessage } from '../types';\n\nimport { EditorField } from './EditorField';\nimport { Stack } from './Stack';\n\nexport interface Props {\n  query: Query;\n  onQueryChange: (query: Query) => void;\n  app?: CoreApp;\n  series?: SeriesMessage;\n}\n\nconst typeOptions: Array<{ value: Query['queryType']; label: string; description: string }> = [\n  { value: 'metrics', label: 'Metric', description: 'Return aggregated metrics' },\n  { value: 'profile', label: 'Profile', description: 'Return profile' },\n  { value: 'both', label: 'Both', description: 'Return both metric and profile data' },\n];\n\nfunction getTypeOptions(app?: CoreApp) {\n  if (app === CoreApp.Explore) {\n    return typeOptions;\n  }\n  return typeOptions.filter((option) => option.value !== 'both');\n}\n\nfunction getGroupByOptions(series?: SeriesMessage) {\n  let options: SelectableValue[] = [];\n  if (series) {\n    const labels = series.flatMap((val) => {\n      return val.labels.map((l) => l.name);\n    });\n    options = Array.from(new Set(labels)).map((l) => ({\n      label: l,\n      value: l,\n    }));\n  }\n  return options;\n}\n\n/**\n * Base on QueryOptionGroup component from grafana/ui but that is not available yet.\n */\nexport function QueryOptions({ query, onQueryChange, app, series }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n  const typeOptions = getTypeOptions(app);\n  const groupByOptions = getGroupByOptions(series);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>Options</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            {[`Type: ${query.queryType}`, query.groupBy?.length ? `Group by: ${query.groupBy.join(', ')}` : undefined]\n              .filter((v) => v)\n              .map((v, i) => (\n                <span key={i}>{v}</span>\n              ))}\n          </div>\n        )}\n      </div>\n      {isOpen && (\n        <div className={styles.body}>\n          <EditorField label={'Query Type'}>\n            <RadioButtonGroup\n              options={typeOptions}\n              value={query.queryType}\n              onChange={(value) => onQueryChange({ ...query, queryType: value })}\n            />\n          </EditorField>\n          <EditorField\n            label={'Group by'}\n            tooltip={\n              <>\n                Used to group the metric result by a specific label or set of labels. Does not apply to profile query.\n              </>\n            }\n          >\n            <MultiSelect\n              placeholder=\"Label\"\n              value={query.groupBy}\n              allowCustomValue\n              options={groupByOptions}\n              onChange={(change) => {\n                const changes = change.map((c: SelectableValue<string>) => {\n                  return c.value!;\n                });\n                onQueryChange({ ...query, groupBy: changes });\n              }}\n            />\n          </EditorField>\n        </div>\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { defaults } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, QueryEditorProps } from '@grafana/data';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\n\nimport { FireDataSource } from '../datasource';\nimport { defaultQuery, FireDataSourceOptions, ProfileTypeMessage, Query } from '../types';\n\nimport { EditorRow } from './EditorRow';\nimport { EditorRows } from './EditorRows';\nimport { LabelsEditor } from './LabelsEditor';\nimport { QueryOptions } from './QueryOptions';\n\nexport type Props = QueryEditorProps<FireDataSource, Query, FireDataSourceOptions>;\n\nexport function QueryEditor(props: Props) {\n  const profileTypes = useProfileTypes(props.datasource);\n\n  function onProfileTypeChange(value: string[], selectedOptions: CascaderOption[]) {\n    if (selectedOptions.length === 0) {\n      return;\n    }\n\n    const id = selectedOptions[selectedOptions.length - 1].value;\n\n    if (typeof id !== 'string') {\n      throw new Error('id is not string');\n    }\n\n    props.onChange({ ...props.query, profileTypeId: id });\n  }\n\n  function onLabelSelectorChange(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n  }\n\n  function handleRunQuery(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n    props.onRunQuery();\n  }\n\n  const seriesResult = useAsync(() => {\n    return props.datasource.getSeries();\n  }, [props.datasource]);\n\n  const cascaderOptions = useCascaderOptions(profileTypes);\n  const selectedProfileName = useProfileName(profileTypes, props.query.profileTypeId);\n  let query = normalizeQuery(props.query, props.app);\n\n  return (\n    <EditorRows>\n      <EditorRow stackProps={{ wrap: false, gap: 1 }}>\n        <ButtonCascader onChange={onProfileTypeChange} options={cascaderOptions} buttonProps={{ variant: 'secondary' }}>\n          {selectedProfileName}\n        </ButtonCascader>\n        <LabelsEditor\n          value={query.labelSelector}\n          onChange={onLabelSelectorChange}\n          onRunQuery={handleRunQuery}\n          series={seriesResult.value}\n        />\n      </EditorRow>\n      <EditorRow>\n        <QueryOptions query={query} onQueryChange={props.onChange} app={props.app} series={seriesResult.value} />\n      </EditorRow>\n    </EditorRows>\n  );\n}\n\n// Turn profileTypes into cascader options\nfunction useCascaderOptions(profileTypes: ProfileTypeMessage[]) {\n  return useMemo(() => {\n    let mainTypes = new Map<string, CascaderOption>();\n    // Classify profile types by name then sample type.\n    for (let profileType of profileTypes) {\n      if (!mainTypes.has(profileType.name)) {\n        mainTypes.set(profileType.name, {\n          label: profileType.name,\n          value: profileType.ID,\n          children: [],\n        });\n      }\n      mainTypes.get(profileType.name)?.children?.push({\n        label: profileType.sample_type,\n        value: profileType.ID,\n      });\n    }\n    return Array.from(mainTypes.values());\n  }, [profileTypes]);\n}\n\nfunction useProfileTypes(datasource: FireDataSource) {\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>([]);\n  useEffect(() => {\n    (async () => {\n      const profileTypes = await datasource.getProfileTypes();\n      setProfileTypes(profileTypes);\n    })();\n  }, [datasource]);\n  return profileTypes;\n}\n\nfunction useProfileName(profileTypes: ProfileTypeMessage[], profileTypeId: string) {\n  return useMemo(() => {\n    if (!profileTypes) {\n      return 'Loading';\n    }\n    const profile = profileTypes.find((type) => type.ID === profileTypeId);\n    if (!profile) {\n      return 'Select a profile type';\n    }\n\n    return profile.name + ' - ' + profile.sample_type;\n  }, [profileTypeId, profileTypes]);\n}\n\nexport function normalizeQuery(query: Query, app?: CoreApp | string) {\n  let normalized = defaults(query, defaultQuery);\n  if (app !== CoreApp.Explore && normalized.queryType === 'both') {\n    // In dashboards and other places, we can't show both types of graphs at the same time.\n    // This will also be a default when having 'both' query and adding it from explore to dashboard\n    normalized.queryType = 'profile';\n  }\n  return normalized;\n}\n","import { Observable, of } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\n\nimport { normalizeQuery } from './QueryEditor/QueryEditor';\nimport { FireDataSourceOptions, Query, ProfileTypeMessage, SeriesMessage } from './types';\n\nexport class FireDataSource extends DataSourceWithBackend<Query, FireDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<FireDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<Query>): Observable<DataQueryResponse> {\n    const validTargets = request.targets\n      .filter((t) => t.profileTypeId)\n      .map((t) => {\n        // Empty string errors out but honestly seems like we can just normalize it this way\n        if (t.labelSelector === '') {\n          return {\n            ...t,\n            labelSelector: '{}',\n          };\n        }\n        return normalizeQuery(t, request.app);\n      });\n    if (!validTargets.length) {\n      return of({ data: [] });\n    }\n    return super.query({\n      ...request,\n      targets: validTargets,\n    });\n  }\n\n  async getProfileTypes(): Promise<ProfileTypeMessage[]> {\n    return await super.getResource('profileTypes');\n  }\n\n  async getSeries(): Promise<SeriesMessage> {\n    // For now, we send empty matcher to get all the series\n    return await super.getResource('series', { matchers: ['{}'] });\n  }\n\n  async getLabelNames(): Promise<string[]> {\n    return await super.getResource('labelNames');\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor/QueryEditor';\nimport { FireDataSource } from './datasource';\nimport { Query, FireDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<FireDataSource, Query, FireDataSourceOptions>(FireDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings, EventsWithValidation, LegacyForms, regexValidation } from '@grafana/ui';\n\nimport { FireDataSourceOptions } from './types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<FireDataSourceOptions> {}\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:4100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <h3 className=\"page-heading\">Querying</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <LegacyForms.FormField\n              label=\"Minimal step\"\n              labelWidth={13}\n              inputEl={\n                <LegacyForms.Input\n                  className=\"width-6\"\n                  value={options.jsonData.minStep}\n                  spellCheck={false}\n                  placeholder=\"15s\"\n                  onChange={(event) => {\n                    onOptionsChange({\n                      ...options,\n                      jsonData: {\n                        ...options.jsonData,\n                        minStep: event.currentTarget.value,\n                      },\n                    });\n                  }}\n                  validationEvents={{\n                    [EventsWithValidation.onBlur]: [\n                      regexValidation(\n                        /^$|^\\d+(ms|[Mwdhmsy])$/,\n                        'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n                      ),\n                    ],\n                  }}\n                />\n              }\n              tooltip=\"Minimal step used for metric query. Should be the same or higher as the scrape interval setting in the Fire database.\"\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n"],"names":["defaultQuery","labelSelector","queryType","groupBy","Stack","props","styles","useStyles2","useCallback","theme","getStyles","className","root","children","css","display","flexDirection","direction","flexWrap","wrap","undefined","alignItems","gap","spacing","flexGrow","EditorRow","stackProps","padding","backgroundColor","colors","background","secondary","borderRadius","shape","EditorRows","languageDefinition","id","extensions","aliases","mimetypes","def","language","ignoreCase","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","integersuffix","floatsuffix","tokenizer","include","cases","string_double","string_single","clauses","whitespace","languageConfiguration","wordPattern","brackets","autoClosingPairs","open","close","surroundingPairs","folding","CompletionProvider","provideCompletionItems","model","position","this","monaco","editor","Error","getModel","suggestions","range","offset","word","getWordAtPosition","Range","lift","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","fromPositions","positionClone","column","getOffsetAt","getRangeAndOffset","situation","text","type","matches","matchAll","labelPairsRegex","existingLabels","Array","from","reduce","acc","match","_","name","value","push","matchLabelValue","substring","inLabelValueRegex","labelName","betweenQuotes","otherLabels","inLabelNameRegex","getSituation","getValue","completionItems","getCompletions","maxIndexDigits","length","toString","map","item","index","kind","getMonacoCompletionItemKind","label","insertText","sortText","padStart","setSeries","series","labels","serie","seriesLabels","labelValue","Set","add","Object","keys","key","values","languages","CompletionItemKind","Enum","EnumMember","labelNameRegex","labelValueRegex","RegExp","source","LabelsEditor","setupAutocompleteFn","providerRef","useRef","useEffect","current","autocompleteDisposeFun","dispose","registerCompletionItemProvider","langId","useAutocomplete","onRunQueryRef","useLatest","onRunQuery","containerRef","wrapper","ref","CodeEditor","onBlur","onChange","containerStyles","queryField","monacoOptions","fontSize","lineNumbers","overviewRulerLanes","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","scrollBeyondLastLine","wordWrap","top","bottom","onBeforeEditorMount","ensureFireQL","onEditorDidMount","updateElementHeight","containerDiv","pixelHeight","getContentHeight","style","height","EDITOR_HEIGHT_OFFSET","width","pixelWidth","clientWidth","layout","onDidContentSizeChange","addCommand","KeyMod","Shift","KeyCode","Enter","fireqlSetupDone","register","setMonarchTokensProvider","setLanguageConfiguration","EditorField","optional","tooltip","fieldProps","useTheme2","childInputId","htmlFor","ReactUtils","labelEl","Tooltip","placement","content","Icon","size","icon","space","Field","field","stylesFactory","paddingRight","paddingBottom","minWidth","fontWeight","typography","fontWeightMedium","fontStyle","color","marginBottom","marginLeft","primary","typeOptions","description","getTypeOptions","app","CoreApp","filter","option","QueryOptions","query","onQueryChange","isOpen","toggleOpen","useToggle","groupByOptions","options","flatMap","val","l","getGroupByOptions","header","onClick","title","toggle","join","v","i","body","RadioButtonGroup","placeholder","allowCustomValue","change","changes","c","switchLabel","cursor","bodySmall","emphasize","overflow","margin","paddingLeft","paddingTop","marginRight","normalizeQuery","normalized","defaults","FireDataSource","DataSourceWithBackend","constructor","instanceSettings","super","request","validTargets","targets","t","profileTypeId","of","data","async","getResource","matchers","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","labelWidth","inputEl","jsonData","minStep","spellCheck","event","currentTarget","validationEvents","EventsWithValidation","regexValidation","setQueryEditor","profileTypes","datasource","setProfileTypes","useState","getProfileTypes","useProfileTypes","seriesResult","useAsync","getSeries","cascaderOptions","useMemo","mainTypes","Map","profileType","has","set","ID","get","sample_type","useCascaderOptions","selectedProfileName","profile","find","useProfileName","ButtonCascader","selectedOptions","buttonProps","variant"],"sourceRoot":""}