{"version":3,"file":"5316.a4938647554648d57248.js","mappings":"6IAGO,MAAMA,EACX,wIAOK,MAAMC,EAAiB,IALvB,WAAmB,MACxB,MAAMC,EAA2B,QAArB,EAAGC,EAAAA,EAAAA,mBAAkB,aAAlB,EAAoBC,YACnC,SAAUF,GAAUA,EAAS,EAC/B,CAEoCG,IAAaF,EAAAA,EAAAA,eAAAA,iB,mPCL1C,MAyCMG,EAAyBC,UAEpC,IACE,YApB8BA,WAChC,MAAMC,QAAiBC,EAAAA,EAAAA,IACrBC,EAAAA,EAAAA,KAAgBC,MAA0B,CACxCC,OAAQ,MACRC,IAAM,wBAAuBC,IAC7BC,QAAQC,EAAAA,EAAAA,KACRC,gBAAgB,KAIpB,GAAIT,EAASU,GACX,OAAOV,EAASW,KAGlB,MAAMC,MAAO,uCAAsCN,KAAO,EAM3CO,CAAmBC,EAGlC,CAFE,MAAOC,GACPC,QAAQC,IAAK,2CAA0CH,KACzD,CAGA,IACE,YA5C6Bf,WAC/B,MAAMC,QAAiBC,EAAAA,EAAAA,IACrBC,EAAAA,EAAAA,KAAgBC,MAA0B,CACxCC,OAAQ,MACRC,IAAM,oBAAmBa,IACzBX,QAAQC,EAAAA,EAAAA,KACRC,gBAAgB,KAIpB,GAAIT,EAASU,GACX,OAAOV,EAASW,KAGlB,MAAMC,MAAO,sCAAqCM,KAAM,EA8BzCC,CAAkBL,EAGjC,CAFE,MAAOC,GACPC,QAAQC,IAAK,0CAAyCH,KACxD,CAEA,MAAMF,MAAM,6BAA6B,EAG9BQ,EAAoBC,IAC/BnB,EAAAA,EAAAA,KAAgBoB,KAAK,mBAAoBD,G,0BCpDpC,MAAME,EAA0BC,KACrCC,EAAAA,EAAAA,IAAkB,oCAAqCD,EAAM,EAwBlDE,EAAyBF,KACpCC,EAAAA,EAAAA,IAAkB,qCAAsCD,EAAM,ECpCzD,SAASG,EAAUC,EAA6BC,GACrD,OACED,EAAYE,QAAQT,GACXA,EAAWQ,KAAKE,gBAAkBF,EAAKE,gBAC7CC,OAAS,CAEhB,CAEO,SAASC,EAAYL,EAA6BC,GAGvD,KAAOF,EAAUC,EAAaC,IAU1BA,EAPGK,EAAcL,GAOT,GAAEM,EAAWN,KAeCO,EAf0BC,EAAaR,GAgB1DS,MAAMF,GAAS,EAAIA,EAAQ,IAtBtB,GAAEP,MAqBhB,IAA4BO,EAX1B,OAAOP,CACT,CAEA,SAASK,EAAcL,GACrB,OAAOA,EAAKU,SAAS,IAAKV,EAAKG,OAAS,EAC1C,CAEA,SAASK,EAAaR,GACpB,OAAOW,SAASX,EAAKY,OAAO,GAAI,GAClC,CAMA,SAASN,EAAWN,GAClB,OAAOA,EAAKY,MAAM,EAAGZ,EAAKG,OAAS,EACrC,C,0BC1CO,SAASU,EAAgBC,GAC9B,MAAMC,EAAyC,CAC7C,CAAE1B,GAAI,OAAQ2B,MAAO,wBAAyBF,QAAS,IACvD,CAAEzB,GAAI,UAAW2B,MAAO,+BAAgCF,QAAS,IACjE,CAAEzB,GAAI,UAAW2B,MAAO,sBAAuBF,QAAS,IACxD,CAAEzB,GAAI,YAAa2B,MAAO,YAAaF,QAAS,IAChD,CAAEzB,GAAI,MAAO2B,MAAO,MAAOF,QAAS,IACpC,CAAEzB,GAAI,QAAS2B,MAAO,QAASF,QAAS,IACxC,CAAEzB,GAAI,aAAc2B,MAAO,qBAAsBF,QAAS,IAC1D,CAAEzB,GAAI,MAAO2B,MAAO,mBAAoBF,QAAS,IACjD,CAAEzB,GAAI,QAAS2B,MAAO,SAAUF,QAAS,KACzCb,QAAQgB,GAASA,IAEbC,EAA0D,CAAC,EAC3DC,EAAoD,CAAC,EACrDC,EA6EC,CACLC,EAAiB,CACfhC,GAAI,4BACJW,KAAM,SACNsB,YAAa,oCACbC,OAAQ,2CAEVF,EAAiB,CACfhC,GAAI,4BACJW,KAAM,SACNsB,YAAa,mCACbC,OAAQ,kCAEVF,EAAiB,CACfhC,GAAI,+BACJW,KAAM,YACNsB,YAAa,uCACbC,OAAQ,qCAEVF,EAAiB,CACfhC,GAAI,gCACJiC,YAAa,yCACbtB,KAAM,aACNuB,OAAQ,sCAEVF,EAAiB,CACfhC,GAAI,6BACJiC,YAAa,sCACbtB,KAAM,UACNuB,OAAQ,mCAEVF,EAAiB,CACfhC,GAAI,8BACJiC,YAAa,wCACbtB,KAAM,YACNuB,OAAQ,oCAEVF,EAAiB,CACfhC,GAAI,6BACJiC,YAAa,sCACbtB,KAAM,UACNuB,OAAQ,mCAEVF,EAAiB,CACfhC,GAAI,+BACJiC,YAAa,wCACbtB,KAAM,YACNuB,OAAQ,qCAEVF,EAAiB,CACfhC,GAAI,+BACJiC,YAAa,wCACbtB,KAAM,YACNuB,OAAQ,qCAEVF,EAAiB,CACfhC,GAAI,iCACJiC,YAAa,0CACbtB,KAAM,cACNuB,OAAQ,uCAEVF,EAAiB,CACfhC,GAAI,6BACJiC,YAAa,wCACbtB,KAAM,YACNuB,OAAQ,oCAEVF,EAAiB,CACfhC,GAAI,+BACJiC,YAAa,uCACbtB,KAAM,YACNuB,OAAQ,qCAEVF,EAAiB,CACfhC,GAAI,gCACJiC,YAAa,wCACbtB,KAAM,aACNuB,OAAQ,sCAEVF,EAAiB,CACfhC,GAAI,0BACJiC,YAAa,kCACbtB,KAAM,OACNuB,OAAQ,qCAEVF,EAAiB,CACfhC,GAAI,4BACJiC,YAAa,oCACbtB,KAAM,SACNuB,OAAQ,kCAEVF,EAAiB,CACfhC,GAAI,uCACJiC,YAAa,sCACbtB,KAAM,mCACNuB,OAAQ,yCAEVF,EAAiB,CACfhC,GAAI,iCACJiC,YAAa,0BACbtB,KAAM,eACNuB,OAAQ,yCA/KZ,IAAK,MAAMC,KAAYT,EACrBG,EAAcM,EAASnC,IAAMmC,EAG/B,IAAK,MAAMC,KAAUX,EAAS,CAC5B,MAAMY,EAAmBN,EAAkBO,MAAMV,GAASA,EAAK5B,KAAOoC,EAAOpC,KAElC,MAA3C,GAAIoC,EAAOG,YAAcF,EACvBD,EAAOD,SAAW,aAClBC,EAAOI,aAAcC,EAAAA,EAAAA,GAAe,sBACpCL,EAAOM,KAAKC,OAAQN,SAAsB,QAAN,EAAhBA,EAAkBK,YAAI,WAAN,EAAhB,EAAwBC,QAASP,EAAOM,KAAKC,MAInE,GAAIP,EAAOM,KAAKC,MACd,IAAK,MAAMC,KAAQR,EAAOM,KAAKC,MAC7BC,EAAKjC,KAAO,cAICe,EAAWY,MAAMV,GAASA,EAAK5B,KAAOoC,EAAOD,YAAaN,EAAqB,OACvFJ,QAAQoB,KAAKT,GAEtBN,EAAYM,EAAOpC,IAAMoC,CAC3B,CAEA,IAAK,MAAMD,KAAYT,EAAY,CAOjC,GALoB,UAAhBS,EAASnC,IACXmC,EAASV,QAAQoB,KAwJd,CACL7C,GAAI,SACJW,KAAM,gBACNmC,KAAMC,EAAAA,GAAAA,WACNC,OAAQ,UACRC,QAAS,GACTP,KAAM,CACJT,YAAa,wCACbiB,MAAO,CAAEC,MAAO,8BAA+BC,MAAO,OACtDC,OAAQ,CAAE1C,KAAM,gBAChBgC,MAAO,CACL,CACExD,IAAK,sCACLwB,KAAM,eAGV2C,YAAa,GACbC,QAAS,aACTC,QAAS,WAtKS,eAAhBrB,EAASnC,GACX,IAAK,MAAMoC,KAAUL,EACdD,EAAYM,EAAOpC,KACtBmC,EAASV,QAAQoB,KAAKT,GAK5BqB,EAAYtB,EAASV,QACvB,CAGA,OAAOC,EAAWd,QAAQ8C,GAAMA,EAAEjC,QAAQX,OAAS,GACrD,CAEA,SAAS2C,EAAYhC,GACnB,MAAMkC,EAAyC,CAC7CC,WAAY,IACZC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,OAAQ,IACRC,SAAU,GACVC,QAAS,GAGXzC,EAAQ0C,MAAK,CAACC,EAAGC,KACf,MAAMC,EAAQX,EAAaS,EAAEpE,KAAO,EAC9BuE,EAAQZ,EAAaU,EAAErE,KAAO,EACpC,OAAIsE,EAAQC,GACF,EAEND,EAAQC,GAILH,EAAEzD,KAAO0D,EAAE1D,KAHT,GAGqB,CAAC,GAEnC,CA4IA,SAASqB,EAAiBwC,GACxB,MAAO,CACLxE,GAAIwE,EAAQxE,GACZW,KAAM6D,EAAQ7D,KACdmC,KAAMC,EAAAA,GAAAA,WACNC,OAAQ,UACRC,QAAS,GACTP,KAAM,CACJT,YAAauC,EAAQvC,YACrBiB,MAAO,CAAEC,MAAOqB,EAAQtC,OAAQkB,MAAOoB,EAAQtC,QAC/CmB,OAAQ,CAAE1C,KAAM,gBAChBgC,MAAO,CACL,CACExD,IAAKV,EAAAA,EAAAA,iBAA0B+F,EAAQxE,GACvCW,KAAM,gBAGV2C,YAAa,GACbC,QAAS,aACTC,QAAS,SAGf,C,qCCtMO,MAAMiB,EAAyB,SACpCrF,GAQsB,IAPtBsF,EAAkD,UAAH,6CAAG,CAChDC,iBACAC,qBACAC,cAAa,KACbC,kBAAiB,KACjBC,uBAAsBA,EAAAA,IAGxB,OAAOlG,MAAOmG,EAAUC,KACtB,GAAK7F,EAKL,IACE,MAAM8F,QAAyBF,EAASN,EAAaC,eAAevF,UAC9D4F,EAASN,EAAaE,mBAAmBM,IAE/C,MAAM/E,EAAauE,EAAaG,cAAcI,IAAWvE,YAAatB,GAChE+F,EAAiBT,EAAaI,kBAAkBG,IAAWvE,YAAaP,EAAY2C,MACpFsC,QAAuBV,EAAaK,uBAAuBI,GAEjEH,GAASK,EAAAA,EAAAA,IAAgCD,GAK3C,CAJE,MAAOvF,GACHA,aAAeH,OACjBsF,GAASM,EAAAA,EAAAA,IAA6BzF,GAE1C,MAjBEmF,GAASM,EAAAA,EAAAA,IAA6B,IAAI5F,MAAM,gBAiBlD,CAEJ,EAEa6F,EAAiB,SAC5BC,GAKsB,IAJtBd,EAA2C,UAAH,6CAAG,CACzCe,iBAAgB,KAChBzG,cAAaA,EAAAA,GAGf,OAAOH,MAAOmG,EAAyBC,KACrC,MAAMS,QAAchB,EAAae,mBAAmBE,IAAIH,GAEnDE,EAAME,iBAIXZ,GAASa,EAAAA,EAAAA,OAETnB,EAAa1F,gBAAgB8G,oBAAmBjH,UAC9C,IACE,MAAMkH,QAAeL,EAAME,iBAE3BZ,GAASgB,EAAAA,EAAAA,IAAwBD,IACjCvF,EAAsB,CACpByF,gBAAiBxH,EAAAA,EAAAA,UAAAA,QACjByH,UAAWR,EAAM5C,KACjBqD,eAAgBT,EAAMtG,IACtBgH,SAAS,GAsBb,CApBE,MAAOvG,GACP,IAAIwG,EACAC,EAEJ,GAAIzG,aAAe0G,EAAAA,GACjBF,EAAUxG,EAAIwG,QACdC,EAAUzG,EAAIyG,aACT,IAAIE,EAAAA,EAAAA,IAAa3G,GAAM,OAC5BwG,EAA0B,QAAnB,EAAGxG,EAAIJ,KAAK4G,eAAO,QAAK,cAAaxG,EAAI4G,YAClD,MAAW5G,aAAeH,QACxB2G,EAAUxG,EAAIwG,SAGhBrB,GAAS0B,EAAAA,EAAAA,IAAqB,CAAEL,UAASC,aACzC9F,EAAsB,CACpByF,gBAAiBxH,EAAAA,EAAAA,UAAAA,QACjByH,UAAWR,EAAM5C,KACjBqD,eAAgBT,EAAMtG,IACtBgH,SAAS,GAEb,KACA,CAEN,EAEO,SAASO,IACd,OAAO9H,UACL,MAAMC,OJ1IoBD,gBACfG,EAAAA,EAAAA,KAAgB2G,IAAI,oBIyIRiB,GACvB5B,GAAS6B,EAAAA,EAAAA,IAAkB/H,GAAU,CAEzC,CAEO,SAAS6F,EAAevF,GAC7B,OAAOP,UACL,IAAIsB,QAAmByG,EAA2BxH,GAmBlD,OATIA,IAAQe,EAAWf,MACrB0H,OAAOC,SAASC,KAAOC,EAAAA,EAAAA,cAA4B,qBAAoB9G,EAAWf,OAGlFe,EAAa,CAAC,GAGhB6E,GAASkC,EAAAA,EAAAA,IAAiB/G,IAEnBA,CAAU,CAErB,CAEO,SAASyE,EAAmBzE,GACjC,OAAOtB,UACL,MAAMsI,QAAoBC,EAAAA,EAAAA,GAAkBjH,EAAW2C,MACjDV,QAAe2C,EAAAA,EAAAA,IAAuBoC,GACtCE,EAAYjF,EAAOkF,gBAAgBC,qBAAqBC,EAAAA,GACxDC,EAAO,OAAH,UACLN,EAAU,CACbE,UAAWF,EAAWO,SAAWL,IAGnCrC,GAAS2C,EAAAA,EAAAA,IAAqBF,IAE9BrF,EAAOqF,KAAOA,EACdzC,GAAS4C,EAAAA,EAAAA,KAAeC,EAAAA,EAAAA,IAAc1H,EAAYiC,IAAS,CAE/D,CAEO,SAAS0F,EAAc1F,GAAqF,IAAvD2F,EAAW,UAAH,6CAAGC,EAAAA,EAAAA,KACrE,OAAOnJ,MAAOmG,EAAUiD,KAAa,cAC7BjD,EAAS2B,KAEf,MAAMjG,EAAcuH,IAAWvH,YAAYA,YACrCwH,EAA2C,IAAvBxH,EAAYI,OAChCqH,EAAc,CAClBxH,KAAMyB,EAAOzB,KACbmC,KAAMV,EAAOpC,GACboI,OAAQ,QACRC,UAAWH,GAGTzH,EAAUC,EAAayH,EAAYxH,QACrCwH,EAAYxH,KAAOI,EAAYL,EAAayH,EAAYxH,OAG1D,MAAMoF,QAAea,EAAqBuB,SAEpC1C,EAAAA,EAAAA,MAAmB6C,eACnBC,EAAAA,GAAAA,uBAENlI,EAAuB,CACrB4F,gBAAiBxH,EAAAA,EAAAA,UAAAA,QACjByH,UAAW9D,EAAOpC,GAClBmG,eAAgBJ,EAAOyC,WAAWpJ,IAClCqJ,eAA2B,QAAb,EAAE1C,EAAO0B,YAAI,OAAM,QAAN,EAAX,EAAa/E,YAAI,WAAN,EAAX,EAAmBc,UAGrCkF,EAAAA,GAAAA,KAAqBX,EAASY,QAAQ,SAAU5C,EAAOyC,WAAWpJ,KAAK,CAE3E,CAEO,SAASwJ,IACd,OAAO/J,UACLmG,GAAS6D,EAAAA,EAAAA,OACT,MAAMpH,QJ/JgCzC,EAAAA,EAAAA,KAAgB2G,IAAI,eAAgB,CAAEmD,QAAS,EAAGhG,KAAM,eIgKxFpB,EAAaF,EAAgBC,GACnCuD,GAAS+D,EAAAA,EAAAA,IAAwB,CAAEtH,UAASC,eAAc,CAE9D,CAEO,SAASsH,EAAiB7I,GAC/B,OAAOtB,eJpKwBsB,KAC/BnB,EAAAA,EAAAA,KAAgBiK,IAAK,wBAAuB9I,EAAWf,MAAOe,GIoKtDyG,CAAqBzG,SACrBsF,EAAAA,EAAAA,MAAmB6C,SAClBtD,EAASL,EAAexE,EAAWf,MAE9C,CAEO,SAAS8J,IACd,OAAOrK,MAAOmG,EAAUiD,KACtB,MAAM,IAAE7I,GAAQ6I,IAAWvH,YAAYP,gBJ1KVf,KAAgBJ,EAAAA,EAAAA,KAAgBmK,OAAQ,wBAAuB/J,KI4KtFwH,CAAqBxH,SACrBqG,EAAAA,EAAAA,MAAmB6C,SAEzBI,EAAAA,GAAAA,KAAqB,eAAe,CAExC,C,uIChPA,MAAMU,EAAgB,UAEf,SAASvB,EAAc1H,EAAgCiC,GAC5D,MAAMiH,EAAajH,EAAOqF,KACpB6B,EAAoB7K,EAAAA,GAAAA,eAAAA,kBACpB8K,EAAyB,CAC7BC,IAAKH,EAAW3G,KAAKQ,MAAME,MAC3BpD,GAAI,cAAgBG,EAAWf,IAC/BqK,SAAW,SAAQJ,EAAW1I,OAC9BxB,IAAK,GACLuK,KAAMvJ,EAAWQ,KACjBgJ,YAAa,CAAC,CAAEhI,MAAO,eAAgBxC,IAAK,gBAC5CyK,SAAU,CACR,CACEC,QAAQ,EACRC,KAAM,gBACN9J,GAAK,uBAAsBG,EAAWf,MACtCsK,KAAM,WACNvK,IAAM,oBAAmBgB,EAAWf,UAK1C,GAAIgD,EAAO2H,YACT,IAAK,MAAMC,KAAQ5H,EAAO2H,YACxBR,EAASK,SAAU/G,KAAK,CACtBgH,QAAQ,EACRH,KAAMM,EAAKrI,MACXmI,KAAME,EAAKF,KACX3K,IAAM,oBAAmBgB,EAAWf,aAAa4K,EAAKhK,KACtDA,GAAK,mBAAkBgK,EAAKhK,OAK9BqJ,EAAWY,eAqKNC,IArKgCb,EAAWY,SAmKzC3H,MAAM6H,GACW,cAAjBA,EAAQrH,QApK8CyF,EAAAA,GAAAA,QAAmB,UAClFgB,EAASK,SAAU/G,KAAK,CACtBgH,QAAQ,EACRC,KAAM,OACN9J,GAAK,yBAAwBG,EAAWf,MACxCsK,KAAM,aACNvK,IAAM,oBAAmBgB,EAAWf,mBAIxC,MAAMgL,EAAejK,EAAW2C,OAASsG,EAEnCiB,EAA0B,mDAC1BC,EAA8B,CAClCT,QAAQ,EACRC,KAAM,OACN9J,GAAK,0BAAyBG,EAAWf,MACzCsK,KAAM,cACNvK,IAAM,oBAAmBgB,EAAWf,oBAGlCb,EAAAA,EAAAA,QAAqB6L,IACvBE,EAAcC,UAAY,KAAMC,EAAAA,EAAAA,GAAS,CAAEC,aAAcJ,EAAyBK,aAAc,YAG9FjI,EAAAA,EAAAA,GAAe,6BACb8F,EAAAA,GAAAA,cAAyBoC,EAAAA,GAAAA,6BAC3BpB,EAASK,SAAU/G,KAAKyH,GAEjBhB,IAAsBc,GAC/Bb,EAASK,SAAU/G,KAAK,OAAD,UAClByH,EAAa,CAChBnL,IAAKmL,EAAcnL,IAAM,WACzBoL,UAAW,KAAMC,EAAAA,EAAAA,GAAS,CAAEC,aAAcJ,OAI9C,MAAMO,EAAwB,gDACxBC,EAA0B,CAC9BhB,QAAQ,EACRC,KAAM,cACN9J,GAAK,uBAAsBG,EAAWf,MACtCsK,KAAM,WACNvK,IAAM,oBAAmBgB,EAAWf,iBAGlCb,EAAAA,EAAAA,QAAqB6L,IACvBS,EAAUN,UAAY,KAAMC,EAAAA,EAAAA,GAAS,CAAEC,aAAcG,EAAuBF,aAAc,YAGxFjI,EAAAA,EAAAA,GAAe,aACb8F,EAAAA,GAAAA,cAAyBoC,EAAAA,GAAAA,0BAC3BpB,EAASK,SAAU/G,KAAKgI,GAEjBvB,IAAsBc,GAC/Bb,EAASK,SAAU/G,KAAK,OAAD,UAClBgI,EAAS,CACZ1L,IAAK0L,EAAU1L,IAAM,WACrBoL,UAAW,KAAMC,EAAAA,EAAAA,GAAS,CAAEC,aAAcG,OAI9C,MAAME,EAAsB,yCAEtBC,EAAwB,CAC5BlB,QAAQ,EACRC,KAAM,WACN9J,GAAK,oBAAmBG,EAAWf,MACnCsK,KAAM,QACNvK,IAAM,oBAAmBgB,EAAWf,YACpC4L,cAAe3B,EAAWhC,YAAc5I,EAAAA,GAAAA,QAAAA,SAmB1C,OAhBIF,EAAAA,EAAAA,QAAqB6L,IACvBW,EAAQR,UAAY,KAAMC,EAAAA,EAAAA,GAAS,CAAEC,aAAcK,EAAqBJ,aAAc,YAGpFjI,EAAAA,EAAAA,GAAe,WACb8F,EAAAA,GAAAA,wBAAmCoC,EAAAA,GAAAA,uBAA4CxK,IACjFoJ,EAASK,SAAU/G,KAAKkI,GAEjBzB,IAAsBc,GAC/Bb,EAASK,SAAU/G,KAAK,OAAD,UAClBkI,EAAO,CACV5L,IAAK4L,EAAQ5L,IAAM,WACnBoL,UAAW,KAAMC,EAAAA,EAAAA,GAAS,CAAEC,aAAcK,OAIvCvB,CACT,CAEO,SAAS0B,EAAiBC,EAAoBC,GACnD,IAAIC,EAAqB,CAAE1B,KAAM,IAGjC,IAAK,MAAM2B,KAASH,EAAKtB,SACvB,GAAIyB,EAAMrL,GAAIsL,QAAQH,GAAY,EAAG,CACnCE,EAAMxB,QAAS,EACfuB,EAAOC,EACP,KACF,CAGF,MAAO,CACLH,KAAMA,EACNE,KAAMA,EAEV,CACO,SAASG,EAAwBJ,GAiDtC,OAAOF,EAhDMpD,EACX,CACEO,OAAQ,GACRoD,WAAW,EACXC,cAAe,GACfC,iBAAiB,EACjBC,SAAU,GACV3L,GAAI,EACJZ,IAAK,IACLiJ,WAAW,EACXuD,SAAU,CAAEC,SAAU,cAAeC,cAAe,aACpDnL,KAAM,UACNoL,MAAO,EACPC,UAAU,EACVlJ,KAAMsG,EACN6C,SAAU7C,EACV8C,YAAa,gCACb/M,IAAK,GACLgN,KAAM,GACNC,iBAAkB,CAAC,GAErB,CACE3E,KAAM,CACJzH,GAAI,IACJ8C,KAAMC,EAAAA,GAAAA,WACNpC,KAAM,GACN+B,KAAM,CACJW,OAAQ,CACN1C,KAAM,GACNxB,IAAK,IAEP8C,YAAa,GACbU,MAAO,CAAC,CAAEhC,KAAM,GAAIxB,IAAK,KACzB+D,MAAO,CACLE,MAAO,GACPD,MAAO,IAETG,YAAa,GACbC,QAAS,GACTC,QAAS,IAEXyG,SAAU,GACVjH,OAAQ,GACRC,QAAS,MAKekI,EAChC,C,iFCzMO,MAAMkB,EAAkBC,IAC7B,MAAMC,EAAQ,IAAIC,OAAOF,EAAMG,YAAa,KAE5C,OAAOH,EAAM5L,YAAYE,QAAQT,GACxBoM,EAAMG,KAAKvM,EAAWQ,OAAS4L,EAAMG,KAAKvM,EAAWwL,WAAaY,EAAMG,KAAKvM,EAAW2C,OAC/F,EAGS6J,EAAgCL,IAC3C,MAAMC,EAAQ,IAAIC,OAAOF,EAAMM,0BAA2B,KAE1D,OAAON,EAAM7K,QAAQb,QAAQkC,GACpByJ,EAAMG,KAAK5J,EAAKnC,OACvB,EAGSkE,EAAgB,CAACyH,EAAyBO,IACjDP,EAAMnM,WAAWf,MAAQyN,EACpBP,EAAMnM,WAER,CAAC,EAGG2E,EAAoB,CAACwH,EAAyBxJ,IACrDwJ,EAAMnH,eAAenF,KAAO8C,EACvBwJ,EAAMnH,eAGR,CAAC,EAGG2H,EAA6BR,GAA4BA,EAAMG,YAE/DM,EAAuBT,GAA4BA,EAAMU,gB","sources":["webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/features/datasources/api.ts","webpack://grafana/./public/app/features/datasources/tracking.ts","webpack://grafana/./public/app/features/datasources/utils.ts","webpack://grafana/./public/app/features/datasources/state/buildCategories.ts","webpack://grafana/./public/app/features/datasources/state/actions.ts","webpack://grafana/./public/app/features/datasources/state/navModel.ts","webpack://grafana/./public/app/features/datasources/state/selectors.ts"],"sourcesContent":["import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { lastValueFrom } from 'rxjs';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\n\nexport const getDataSources = async (): Promise<DataSourceSettings[]> => {\n  return await getBackendSrv().get('/api/datasources');\n};\n\n/**\n * @deprecated Use `getDataSourceByUid` instead.\n */\nexport const getDataSourceById = async (id: string) => {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<DataSourceSettings>({\n      method: 'GET',\n      url: `/api/datasources/${id}`,\n      params: accessControlQueryParam(),\n      showErrorAlert: false,\n    })\n  );\n\n  if (response.ok) {\n    return response.data;\n  }\n\n  throw Error(`Could not find data source by ID: \"${id}\"`);\n};\n\nexport const getDataSourceByUid = async (uid: string) => {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<DataSourceSettings>({\n      method: 'GET',\n      url: `/api/datasources/uid/${uid}`,\n      params: accessControlQueryParam(),\n      showErrorAlert: false,\n    })\n  );\n\n  if (response.ok) {\n    return response.data;\n  }\n\n  throw Error(`Could not find data source by UID: \"${uid}\"`);\n};\n\nexport const getDataSourceByIdOrUid = async (idOrUid: string) => {\n  // Try with UID first, as we are trying to migrate to that\n  try {\n    return await getDataSourceByUid(idOrUid);\n  } catch (err) {\n    console.log(`Failed to lookup data source using UID \"${idOrUid}\"`);\n  }\n\n  // Try using ID\n  try {\n    return await getDataSourceById(idOrUid);\n  } catch (err) {\n    console.log(`Failed to lookup data source using ID \"${idOrUid}\"`);\n  }\n\n  throw Error('Could not find data source');\n};\n\nexport const createDataSource = (dataSource: Partial<DataSourceSettings>) =>\n  getBackendSrv().post('/api/datasources', dataSource);\n\nexport const getDataSourcePlugins = () => getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n\nexport const updateDataSource = (dataSource: DataSourceSettings) =>\n  getBackendSrv().put(`/api/datasources/uid/${dataSource.uid}`, dataSource);\n\nexport const deleteDataSource = (uid: string) => getBackendSrv().delete(`/api/datasources/uid/${uid}`);\n","import { reportInteraction } from '@grafana/runtime';\n\n/**\n * Used to track data source creation via either the specific plugin page `/plugins/<the-data-source>`\n * or the general datasources page `/datasources/new`\n *\n * This event corresponds to the start event of our data source creation funnel.\n * Combined with the end event, it allows answering questions about:\n * - Conversion (percentage of user that successfully set up a data source)\n * - Time spent on the config page\n *\n * Changelog:\n * - v9.1.7 : logging datasource, datasource_uid, grafana version\n */\nexport const trackDataSourceCreated = (props: DataSourceCreatedProps) => {\n  reportInteraction('grafana_ds_add_datasource_clicked', props);\n};\n\ntype DataSourceCreatedProps = {\n  grafana_version?: string;\n  /** The unique id of the newly created data source */\n  datasource_uid: string;\n  /** The datasource id (e.g. Cloudwatch, Loki, Prometheus) */\n  plugin_id: string;\n  /** The plugin version (especially interesting in external plugins - core plugins are aligned with grafana version) */\n  plugin_version?: string;\n};\n\n/**\n * Used to track data source testing\n *\n * This event corresponds to the end event of our data source creation funnel.\n * Combined with the start event, it allows answering questions about:\n * - Conversion (percentage of user that successfully set up a data source)\n * - Time spent on the config page\n *\n * Changelog:\n * - v9.1.7 : logging datasource, datasource_uid, grafana version and success\n */\nexport const trackDataSourceTested = (props: DataSourceTestedProps) => {\n  reportInteraction('grafana_ds_test_datasource_clicked', props);\n};\n\ntype DataSourceTestedProps = {\n  grafana_version?: string;\n  /** The unique id of the newly created data source */\n  datasource_uid: string;\n  /** The datasource id (e.g. Cloudwatch, Loki, Prometheus) */\n  plugin_id: string;\n  /** The plugin version (especially interesting in external plugins - core plugins are aligned with grafana version) */\n  plugin_version?: string;\n  /** Whether or not the datasource test succeeded = the datasource was successfully configured */\n  success: boolean;\n};\n","interface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter((dataSource) => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { config, featureEnabled } from '@grafana/runtime';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'profiling', title: 'Profiling', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = !featureEnabled('enterprise.plugins');\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? 1 : -1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-honeycomb-datasource',\n      description: 'Honeycomb integration and datasource',\n      name: 'Honeycomb',\n      imgUrl: 'public/img/plugins/honeycomb.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-salesforce-datasource',\n      description: 'Salesforce integration and datasource',\n      name: 'Salesforce',\n      imgUrl: 'public/img/plugins/salesforce.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-jira-datasource',\n      description: 'Jira integration and datasource',\n      name: 'Jira',\n      imgUrl: 'public/img/plugins/jira_logo.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-gitlab-datasource',\n      description: 'GitLab integration and datasource',\n      name: 'GitLab',\n      imgUrl: 'public/img/plugins/gitlab.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-splunk-monitoring-datasource',\n      description: 'SignalFx integration and datasource',\n      name: 'Splunk Infrastructure Monitoring',\n      imgUrl: 'public/img/plugins/signalfx-logo.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-azuredevops-datasource',\n      description: 'Azure Devops datasource',\n      name: 'Azure Devops',\n      imgUrl: 'public/img/plugins/azure-devops.png',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.pluginCatalogURL + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import { DataSourcePluginMeta, DataSourceSettings, locationUtil } from '@grafana/data';\nimport {\n  config,\n  DataSourceWithBackend,\n  getDataSourceSrv,\n  HealthCheckError,\n  HealthCheckResultDetails,\n  isFetchError,\n  locationService,\n} from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getPluginSettings } from 'app/features/plugins/pluginSettings';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport * as api from '../api';\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { trackDataSourceCreated, trackDataSourceTested } from '../tracking';\nimport { findNewName, nameExits } from '../utils';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  loadDataSourceMeta: typeof loadDataSourceMeta;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  uid: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    loadDataSourceMeta,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!uid) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid UID')));\n      return;\n    }\n\n    try {\n      const loadedDataSource = await dispatch(dependencies.loadDataSource(uid));\n      await dispatch(dependencies.loadDataSourceMeta(loadedDataSource));\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, uid);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(initDataSourceSettingsFailed(err));\n      }\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n        trackDataSourceTested({\n          grafana_version: config.buildInfo.version,\n          plugin_id: dsApi.type,\n          datasource_uid: dsApi.uid,\n          success: true,\n        });\n      } catch (err) {\n        let message: string | undefined;\n        let details: HealthCheckResultDetails;\n\n        if (err instanceof HealthCheckError) {\n          message = err.message;\n          details = err.details;\n        } else if (isFetchError(err)) {\n          message = err.data.message ?? `HTTP error ${err.statusText}`;\n        } else if (err instanceof Error) {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message, details }));\n        trackDataSourceTested({\n          grafana_version: config.buildInfo.version,\n          plugin_id: dsApi.type,\n          datasource_uid: dsApi.uid,\n          success: false,\n        });\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await api.getDataSources();\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<Promise<DataSourceSettings>> {\n  return async (dispatch) => {\n    let dataSource = await api.getDataSourceByIdOrUid(uid);\n\n    // Reload route to use UID instead\n    // -------------------------------\n    // In case we were trying to fetch and reference a data-source with an old numeric ID\n    // (which can happen by referencing it with a \"old\" URL), we would like to automatically redirect\n    // to the new URL format using the UID.\n    // [Please revalidate the following]: Unfortunately we can update the location using react router, but need to fully reload the\n    // route as the nav model page index is not matching with the url in that case.\n    // And react router has no way to unmount remount a route.\n    if (uid !== dataSource.uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${dataSource.uid}`);\n\n      // Avoid a flashing error while the reload happens\n      dataSource = {} as DataSourceSettings;\n    }\n\n    dispatch(dataSourceLoaded(dataSource));\n\n    return dataSource;\n  };\n}\n\nexport function loadDataSourceMeta(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: pluginInfo.backend || isBackend,\n    };\n\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta, editLink = DATASOURCES_ROUTES.Edit): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n    const isFirstDataSource = dataSources.length === 0;\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: isFirstDataSource,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await api.createDataSource(newInstance);\n\n    await getDatasourceSrv().reload();\n    await contextSrv.fetchUserPermissions();\n\n    trackDataSourceCreated({\n      grafana_version: config.buildInfo.version,\n      plugin_id: plugin.id,\n      datasource_uid: result.datasource.uid,\n      plugin_version: result.meta?.info?.version,\n    });\n\n    locationService.push(editLink.replace(/:uid/gi, result.datasource.uid));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await api.getDataSourcePlugins();\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings) {\n  return async (dispatch: (dataSourceSettings: ThunkResult<Promise<DataSourceSettings>>) => DataSourceSettings) => {\n    await api.updateDataSource(dataSource);\n    await getDatasourceSrv().reload();\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteLoadedDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { uid } = getStore().dataSources.dataSource;\n\n    await api.deleteDataSource(uid);\n    await getDatasourceSrv().reload();\n\n    locationService.push('/datasources');\n  };\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction } from 'app/types';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nconst loadingDSType = 'Loading';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n  const highlightsEnabled = config.featureToggles.featureHighlights;\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes) && contextSrv.hasRole('Admin')) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  const isLoadingNav = dataSource.type === loadingDSType;\n\n  const permissionsExperimentId = 'feature-highlights-data-source-permissions-badge';\n  const dsPermissions: NavModelItem = {\n    active: false,\n    icon: 'lock',\n    id: `datasource-permissions-${dataSource.uid}`,\n    text: 'Permissions',\n    url: `datasources/edit/${dataSource.uid}/permissions`,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    dsPermissions.tabSuffix = () => ProBadge({ experimentId: permissionsExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('dspermissions.enforcement')) {\n    if (contextSrv.hasPermission(AccessControlAction.DataSourcesPermissionsRead)) {\n      navModel.children!.push(dsPermissions);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...dsPermissions,\n      url: dsPermissions.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: permissionsExperimentId }),\n    });\n  }\n\n  const analyticsExperimentId = 'feature-highlights-data-source-insights-badge';\n  const analytics: NavModelItem = {\n    active: false,\n    icon: 'info-circle',\n    id: `datasource-insights-${dataSource.uid}`,\n    text: 'Insights',\n    url: `datasources/edit/${dataSource.uid}/insights`,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    analytics.tabSuffix = () => ProBadge({ experimentId: analyticsExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('analytics')) {\n    if (contextSrv.hasPermission(AccessControlAction.DataSourcesInsightsRead)) {\n      navModel.children!.push(analytics);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...analytics,\n      url: analytics.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: analyticsExperimentId }),\n    });\n  }\n\n  const cachingExperimentId = 'feature-highlights-query-caching-badge';\n\n  const caching: NavModelItem = {\n    active: false,\n    icon: 'database',\n    id: `datasource-cache-${dataSource.uid}`,\n    text: 'Cache',\n    url: `datasources/edit/${dataSource.uid}/cache`,\n    hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    caching.tabSuffix = () => ProBadge({ experimentId: cachingExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('caching')) {\n    if (contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingRead, dataSource)) {\n      navModel.children!.push(caching);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...caching,\n      url: caching.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: cachingExperimentId }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem = { text: '' };\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      readOnly: false,\n      type: loadingDSType,\n      typeName: loadingDSType,\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from 'app/types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getFilteredDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"names":["w3cStandardEmailValidator","highlightTrial","expiry","config","trialExpiry","isTrial","getDataSourceByIdOrUid","async","response","lastValueFrom","getBackendSrv","fetch","method","url","uid","params","accessControlQueryParam","showErrorAlert","ok","data","Error","getDataSourceByUid","idOrUid","err","console","log","id","getDataSourceById","createDataSource","dataSource","post","trackDataSourceCreated","props","reportInteraction","trackDataSourceTested","nameExits","dataSources","name","filter","toLowerCase","length","findNewName","nameHasSuffix","getNewName","digit","getLastDigit","isNaN","endsWith","parseInt","slice","buildCategories","plugins","categories","title","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","description","imgUrl","category","plugin","enterprisePlugin","find","enterprise","unlicensed","featureEnabled","info","links","link","push","type","PluginType","module","baseUrl","logos","small","large","author","screenshots","updated","version","sortPlugins","c","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","dependencies","loadDataSource","loadDataSourceMeta","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","loadedDataSource","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","initDataSourceSettingsFailed","testDataSource","dataSourceName","getDatasourceSrv","dsApi","get","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","grafana_version","plugin_id","datasource_uid","success","message","details","HealthCheckError","isFetchError","statusText","testDataSourceFailed","loadDataSources","api","dataSourcesLoaded","window","location","href","locationUtil","dataSourceLoaded","pluginInfo","getPluginSettings","isBackend","DataSourceClass","prototype","DataSourceWithBackend","meta","backend","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","editLink","DATASOURCES_ROUTES","getStore","isFirstDataSource","newInstance","access","isDefault","reload","contextSrv","datasource","plugin_version","locationService","replace","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","deleteLoadedDataSource","delete","loadingDSType","pluginMeta","highlightsEnabled","navModel","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","isLoadingNav","permissionsExperimentId","dsPermissions","tabSuffix","ProBadge","experimentId","eventVariant","AccessControlAction","analyticsExperimentId","analytics","cachingExperimentId","caching","hideFromTabs","getDataSourceNav","main","pageName","node","child","indexOf","getDataSourceLoadingNav","basicAuth","basicAuthUser","withCredentials","database","jsonData","authType","defaultRegion","orgId","readOnly","typeName","typeLogoUrl","user","secureJsonFields","getDataSources","state","regex","RegExp","searchQuery","test","getFilteredDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesCount","dataSourcesCount"],"sourceRoot":""}