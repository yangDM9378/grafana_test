{"version":3,"file":"ServiceAccountPage.85676c83cd074ded5ac3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountPermissions.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountProfileRow.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountRoleRow.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountProfile.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountTokensTable.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actionsServiceAccountPage.ts","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/CreateTokenModal.tsx","webpack://grafana/./public/app/features/serviceaccounts/constants.ts","webpack://grafana/./public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import React from 'react';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, ServiceAccountDTO } from '../../types';\n\ntype ServiceAccountPermissionsProps = {\n  serviceAccount: ServiceAccountDTO;\n};\n\nexport const ServiceAccountPermissions = (props: ServiceAccountPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ServiceAccountsPermissionsWrite,\n    props.serviceAccount\n  );\n\n  return (\n    <Permissions\n      title=\"Permissions\"\n      addPermissionTitle=\"Add permission\"\n      buttonLabel=\"Add permission\"\n      resource=\"serviceaccounts\"\n      resourceId={props.serviceAccount.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmButton, Input, Label, LegacyInputStatus, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  value?: string;\n  inputType?: string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n}\n\nexport const ServiceAccountProfileRow = ({ label, value, inputType, disabled, onChange }: Props): JSX.Element => {\n  const inputElem = useRef<HTMLInputElement>(null);\n  const [inputValue, setInputValue] = useState(value);\n  const [isEditing, setIsEditing] = useState(false);\n  const styles = useStyles2(getStyles);\n  const inputId = `${label}-input`;\n\n  useEffect(() => {\n    if (isEditing) {\n      focusInput();\n    }\n  }, [isEditing]);\n\n  const onEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setInputValue(value || '');\n  };\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const onInputBlur = (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const focusInput = () => {\n    inputElem?.current?.focus();\n  };\n\n  const onSave = () => {\n    setIsEditing(false);\n    if (onChange) {\n      onChange(inputValue!);\n    }\n  };\n\n  return (\n    <tr>\n      <td>\n        <Label htmlFor={inputId}>{label}</Label>\n      </td>\n      <td className=\"width-25\" colSpan={2}>\n        {!disabled && isEditing ? (\n          <Input\n            id={inputId}\n            type={inputType}\n            defaultValue={value}\n            onBlur={onInputBlur}\n            onChange={onInputChange}\n            ref={inputElem}\n            width={30}\n          />\n        ) : (\n          <span className={cx({ [styles.disabled]: disabled })}>{value}</span>\n        )}\n      </td>\n      <td>\n        {onChange && (\n          <ConfirmButton\n            closeOnConfirm\n            confirmText=\"Save\"\n            onConfirm={onSave}\n            onClick={onEditClick}\n            onCancel={onCancelClick}\n            disabled={disabled}\n          >\n            Edit\n          </ConfirmButton>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    disabled: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { Label } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountDTO } from 'app/types';\n\ninterface Props {\n  label: string;\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole) => void;\n  roleOptions: Role[];\n}\n\nexport const ServiceAccountRoleRow = ({ label, serviceAccount, roleOptions, onRoleChange }: Props): JSX.Element => {\n  const inputId = `${label}-input`;\n  const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n\n  return (\n    <tr>\n      <td>\n        <Label htmlFor={inputId}>{label}</Label>\n      </td>\n      {contextSrv.licensedAccessControlEnabled() ? (\n        <td colSpan={3}>\n          <UserRolePicker\n            userId={serviceAccount.id}\n            orgId={serviceAccount.orgId}\n            basicRole={serviceAccount.role}\n            onBasicRoleChange={onRoleChange}\n            roleOptions={roleOptions}\n            basicRoleDisabled={!canUpdateRole}\n            disabled={serviceAccount.isDisabled}\n          />\n        </td>\n      ) : (\n        <>\n          <td>\n            <OrgRolePicker\n              width={24}\n              inputId={inputId}\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={serviceAccount.isDisabled}\n              onChange={onRoleChange}\n            />\n          </td>\n          <td colSpan={2}></td>\n        </>\n      )}\n    </tr>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2, OrgRole, TimeZone } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\nimport { ServiceAccountProfileRow } from './ServiceAccountProfileRow';\nimport { ServiceAccountRoleRow } from './ServiceAccountRoleRow';\n\ninterface Props {\n  serviceAccount: ServiceAccountDTO;\n  timeZone: TimeZone;\n  roleOptions: Role[];\n  onChange: (serviceAccount: ServiceAccountDTO) => void;\n}\n\nexport function ServiceAccountProfile({ serviceAccount, timeZone, roleOptions, onChange }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n\n  const onRoleChange = (role: OrgRole) => {\n    onChange({ ...serviceAccount, role: role });\n  };\n\n  const onNameChange = (newValue: string) => {\n    onChange({ ...serviceAccount, name: newValue });\n  };\n\n  return (\n    <div className={styles.section}>\n      <h3>Information</h3>\n      <table className=\"filter-table\">\n        <tbody>\n          <ServiceAccountProfileRow\n            label=\"Name\"\n            value={serviceAccount.name}\n            onChange={onNameChange}\n            disabled={!ableToWrite || serviceAccount.isDisabled}\n          />\n          <ServiceAccountProfileRow label=\"ID\" value={serviceAccount.login} disabled={serviceAccount.isDisabled} />\n          <ServiceAccountRoleRow\n            label=\"Roles\"\n            serviceAccount={serviceAccount}\n            onRoleChange={onRoleChange}\n            roleOptions={roleOptions}\n          />\n          <ServiceAccountProfileRow\n            label=\"Creation date\"\n            value={dateTimeFormat(serviceAccount.createdAt, { timeZone })}\n            disabled={serviceAccount.isDisabled}\n          />\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  section: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2, TimeZone } from '@grafana/data';\nimport { DeleteButton, Icon, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport { ApiKey } from 'app/types';\n\ninterface Props {\n  tokens: ApiKey[];\n  timeZone: TimeZone;\n  tokenActionsDisabled?: boolean;\n  onDelete: (token: ApiKey) => void;\n}\n\nexport const ServiceAccountTokensTable = ({ tokens, timeZone, tokenActionsDisabled, onDelete }: Props): JSX.Element => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <table className={cx(styles.section, 'filter-table')}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Expires</th>\n          <th>Created</th>\n          <th>Last used at</th>\n          <th />\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        {tokens.map((key) => {\n          return (\n            <tr key={key.id} className={styles.tableRow(key.hasExpired || key.isRevoked)}>\n              <td>{key.name}</td>\n              <td>\n                <TokenExpiration timeZone={timeZone} token={key} />\n              </td>\n              <td>{formatDate(timeZone, key.created)}</td>\n              <td>{formatLastUsedAtDate(timeZone, key.lastUsedAt)}</td>\n              <td className=\"width-1 text-center\">{key.isRevoked && <TokenRevoked />}</td>\n              <td>\n                <DeleteButton\n                  aria-label={`Delete service account token ${key.name}`}\n                  size=\"sm\"\n                  onConfirm={() => onDelete(key)}\n                  disabled={tokenActionsDisabled}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nfunction formatLastUsedAtDate(timeZone: TimeZone, lastUsedAt?: string): string {\n  if (!lastUsedAt) {\n    return 'Never';\n  }\n  return dateTimeFormat(lastUsedAt, { timeZone });\n}\n\nfunction formatDate(timeZone: TimeZone, expiration?: string): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n\nfunction formatSecondsLeftUntilExpiration(secondsUntilExpiration: number): string {\n  const days = Math.ceil(secondsUntilExpiration / (3600 * 24));\n  const daysFormat = days > 1 ? `${days} days` : `${days} day`;\n  return `Expires in ${daysFormat}`;\n}\n\nconst TokenRevoked = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <span className={styles.hasExpired}>\n      Revoked\n      <span className={styles.tooltipContainer}>\n        <Tooltip content=\"This token has been publicly exposed. Please rotate this token\">\n          <Icon name=\"exclamation-triangle\" className={styles.toolTipIcon} />\n        </Tooltip>\n      </span>\n    </span>\n  );\n};\n\ninterface TokenExpirationProps {\n  timeZone: TimeZone;\n  token: ApiKey;\n}\n\nconst TokenExpiration = ({ timeZone, token }: TokenExpirationProps) => {\n  const styles = useStyles2(getStyles);\n  if (!token.expiration) {\n    return <span className={styles.neverExpire}>Never</span>;\n  }\n  if (token.secondsUntilExpiration) {\n    return (\n      <span className={styles.secondsUntilExpiration}>\n        {formatSecondsLeftUntilExpiration(token.secondsUntilExpiration)}\n      </span>\n    );\n  }\n  if (token.hasExpired) {\n    return (\n      <span className={styles.hasExpired}>\n        Expired\n        <span className={styles.tooltipContainer}>\n          <Tooltip content=\"This token has expired\">\n            <Icon name=\"exclamation-triangle\" className={styles.toolTipIcon} />\n          </Tooltip>\n        </span>\n      </span>\n    );\n  }\n  return <span>{formatDate(timeZone, token.expiration)}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableRow: (hasExpired: boolean | undefined) => css`\n    color: ${hasExpired ? theme.colors.text.secondary : theme.colors.text.primary};\n  `,\n  tooltipContainer: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  toolTipIcon: css`\n    color: ${theme.colors.error.text};\n  `,\n  secondsUntilExpiration: css`\n    color: ${theme.colors.warning.text};\n  `,\n  hasExpired: css`\n    color: ${theme.colors.error.text};\n  `,\n  neverExpire: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  section: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { ServiceAccountDTO, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  serviceAccountFetchBegin,\n  serviceAccountFetchEnd,\n  serviceAccountLoaded,\n  serviceAccountTokensLoaded,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function loadServiceAccount(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(serviceAccountFetchBegin());\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}`, accessControlQueryParam());\n      dispatch(serviceAccountLoaded(response));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountFetchEnd());\n    }\n  };\n}\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(loadServiceAccount(serviceAccount.id));\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async () => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    locationService.push('/org/serviceaccounts');\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function deleteServiceAccountToken(saID: number, id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${saID}/tokens/${id}`);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function loadServiceAccountTokens(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}/tokens`);\n      dispatch(serviceAccountTokensLoaded(response));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { getTimeZone, NavModelItem } from '@grafana/data';\nimport { Button, ConfirmModal, HorizontalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AccessControlAction, ApiKey, Role, ServiceAccountDTO, StoreState } from 'app/types';\n\nimport { ServiceAccountPermissions } from './ServiceAccountPermissions';\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport { ServiceAccountProfile } from './components/ServiceAccountProfile';\nimport { ServiceAccountTokensTable } from './components/ServiceAccountTokensTable';\nimport { fetchACOptions } from './state/actions';\nimport {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n} from './state/actionsServiceAccountPage';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{ id: string }> {\n  serviceAccount?: ServiceAccountDTO;\n  tokens: ApiKey[];\n  isLoading: boolean;\n  roleOptions: Role[];\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    serviceAccount: state.serviceAccountProfile.serviceAccount,\n    tokens: state.serviceAccountProfile.tokens,\n    isLoading: state.serviceAccountProfile.isLoading,\n    roleOptions: state.serviceAccounts.roleOptions,\n    timezone: getTimeZone(state.user),\n  };\n}\n\nconst mapDispatchToProps = {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport const ServiceAccountPageUnconnected = ({\n  match,\n  serviceAccount,\n  tokens,\n  timezone,\n  isLoading,\n  roleOptions,\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n}: Props): JSX.Element => {\n  const [newToken, setNewToken] = useState('');\n  const [isTokenModalOpen, setIsTokenModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n\n  const serviceAccountId = parseInt(match.params.id, 10);\n  const tokenActionsDisabled =\n    !contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) || serviceAccount.isDisabled;\n\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n  const canReadPermissions = contextSrv.hasAccessInMetadata(\n    AccessControlAction.ServiceAccountsPermissionsRead,\n    serviceAccount!,\n    false\n  );\n\n  const pageNav: NavModelItem = {\n    text: serviceAccount.name,\n    img: serviceAccount.avatarUrl,\n    breadcrumbs: [{ title: 'Service accounts', url: 'org/serviceaccounts' }],\n    subTitle: 'Manage settings for an individual service account.',\n  };\n\n  useEffect(() => {\n    loadServiceAccount(serviceAccountId);\n    loadServiceAccountTokens(serviceAccountId);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [loadServiceAccount, loadServiceAccountTokens, serviceAccountId]);\n\n  const onProfileChange = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount(serviceAccount);\n  };\n\n  const showDeleteServiceAccountModal = (show: boolean) => () => {\n    setIsDeleteModalOpen(show);\n  };\n\n  const showDisableServiceAccountModal = (show: boolean) => () => {\n    setIsDisableModalOpen(show);\n  };\n\n  const handleServiceAccountDelete = () => {\n    deleteServiceAccount(serviceAccount.id);\n  };\n\n  const handleServiceAccountDisable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: true });\n    setIsDisableModalOpen(false);\n  };\n\n  const handleServiceAccountEnable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onDeleteServiceAccountToken = (key: ApiKey) => {\n    deleteServiceAccountToken(serviceAccount?.id, key.id!);\n  };\n\n  const onCreateToken = (token: ServiceAccountToken) => {\n    createServiceAccountToken(serviceAccount?.id, token, setNewToken);\n  };\n\n  const onTokenModalClose = () => {\n    setIsTokenModalOpen(false);\n    setNewToken('');\n  };\n\n  return (\n    <Page navId=\"serviceaccounts\" pageNav={pageNav}>\n      <Page.Contents isLoading={isLoading}>\n        <div>\n          {serviceAccount && (\n            <HorizontalGroup spacing=\"md\" height=\"auto\" justify=\"flex-end\">\n              <Button\n                type={'button'}\n                variant=\"destructive\"\n                onClick={showDeleteServiceAccountModal(true)}\n                disabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsDelete)}\n              >\n                Delete service account\n              </Button>\n              {serviceAccount.isDisabled ? (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={handleServiceAccountEnable}\n                  disabled={!ableToWrite}\n                >\n                  Enable service account\n                </Button>\n              ) : (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={showDisableServiceAccountModal(true)}\n                  disabled={!ableToWrite}\n                >\n                  Disable service account\n                </Button>\n              )}\n            </HorizontalGroup>\n          )}\n          {serviceAccount && (\n            <ServiceAccountProfile\n              serviceAccount={serviceAccount}\n              timeZone={timezone}\n              roleOptions={roleOptions}\n              onChange={onProfileChange}\n            />\n          )}\n          <HorizontalGroup justify=\"space-between\" height=\"auto\">\n            <h3>Tokens</h3>\n            <Button onClick={() => setIsTokenModalOpen(true)} disabled={tokenActionsDisabled}>\n              Add service account token\n            </Button>\n          </HorizontalGroup>\n          {tokens && (\n            <ServiceAccountTokensTable\n              tokens={tokens}\n              timeZone={timezone}\n              onDelete={onDeleteServiceAccountToken}\n              tokenActionsDisabled={tokenActionsDisabled}\n            />\n          )}\n          {canReadPermissions && <ServiceAccountPermissions serviceAccount={serviceAccount} />}\n        </div>\n\n        <ConfirmModal\n          isOpen={isDeleteModalOpen}\n          title=\"Delete service account\"\n          body=\"Are you sure you want to delete this service account?\"\n          confirmText=\"Delete service account\"\n          onConfirm={handleServiceAccountDelete}\n          onDismiss={showDeleteServiceAccountModal(false)}\n        />\n        <ConfirmModal\n          isOpen={isDisableModalOpen}\n          title=\"Disable service account\"\n          body=\"Are you sure you want to disable this service account?\"\n          confirmText=\"Disable service account\"\n          onConfirm={handleServiceAccountDisable}\n          onDismiss={showDisableServiceAccountModal(false)}\n        />\n        <CreateTokenModal\n          isOpen={isTokenModalOpen}\n          token={newToken}\n          serviceAccountLogin={serviceAccount.login}\n          onCreateToken={onCreateToken}\n          onClose={onTokenModalClose}\n        />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(ServiceAccountPageUnconnected);\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  Input,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  let tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(false);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(false);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = !token ? 'Add service account token' : 'Service account token created';\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={modalTitle}\n      onDismiss={onCloseInternal}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n    >\n      {!token ? (\n        <div>\n          <Field\n            label=\"Display name\"\n            description=\"Name to easily identify the token\"\n            // for now this is required\n            // need to make this optional in backend as well\n            required={true}\n          >\n            <Input\n              name=\"tokenName\"\n              value={newTokenName}\n              placeholder={defaultTokenName}\n              onChange={(e) => {\n                setNewTokenName(e.currentTarget.value);\n              }}\n            />\n          </Field>\n          <Field label=\"Expiration\">\n            <RadioButtonGroup\n              options={EXPIRATION_OPTIONS}\n              value={isWithExpirationDate}\n              onChange={setIsWithExpirationDate}\n              size=\"md\"\n            />\n          </Field>\n          {isWithExpirationDate && (\n            <Field label=\"Expiration date\">\n              <DatePickerWithInput\n                onChange={onExpirationDateChange}\n                value={newTokenExpirationDate}\n                placeholder=\"\"\n                minDate={tomorrow}\n              />\n            </Field>\n          )}\n          <Modal.ButtonRow>\n            <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n              Generate token\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : (\n        <>\n          <Field\n            label=\"Token\"\n            description=\"Copy the token now as you will not be able to see it again. Loosing a token requires creating a new one.\"\n          >\n            <div className={styles.modalTokenRow}>\n              <Input name=\"tokenValue\" value={token} readOnly />\n              <ClipboardButton\n                className={styles.modalCopyToClipboardButton}\n                variant=\"primary\"\n                size=\"md\"\n                icon=\"copy\"\n                getText={() => token}\n              >\n                Copy clipboard\n              </ClipboardButton>\n            </div>\n          </Field>\n          <Modal.ButtonRow>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 550px;\n    `,\n    modalContent: css`\n      overflow: visible;\n    `,\n    modalTokenRow: css`\n      display: flex;\n    `,\n    modalCopyToClipboardButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","export const API_KEYS_MIGRATION_INFO_STORAGE_KEY = 'grafana.serviceaccounts.showApiKeysMigrationInfo';\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport store from 'app/core/store';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from '../constants';\n\nimport {\n  acOptionsLoaded,\n  pageChanged,\n  queryChanged,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  apiKeysMigrationStatusLoaded,\n  stateFilterChanged,\n  showApiKeysMigrationInfoLoaded,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nexport function getApiKeysMigrationStatus(): ThunkResult<void> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n      const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n      dispatch(apiKeysMigrationStatusLoaded(!!result?.migrated));\n    }\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n        if (withLoadingIndicator) {\n          dispatch(serviceAccountsFetchBegin());\n        }\n        const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n        const result = await getBackendSrv().get(\n          `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n            serviceAccountStateFilter\n          )}&accesscontrol=true`\n        );\n        dispatch(serviceAccountsFetched(result));\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountsFetchEnd());\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function getApiKeysMigrationInfo(): ThunkResult<void> {\n  return async (dispatch) => {\n    const showApiKeysMigrationInfo = store.getBool(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(showApiKeysMigrationInfoLoaded(showApiKeysMigrationInfo));\n  };\n}\n\nexport function closeApiKeysMigrationInfo(): ThunkResult<void> {\n  return async (dispatch) => {\n    store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(getApiKeysMigrationInfo());\n  };\n}\n"],"names":["ServiceAccountPermissions","props","canSetPermissions","contextSrv","AccessControlAction","serviceAccount","P","title","addPermissionTitle","buttonLabel","resource","resourceId","id","ServiceAccountProfileRow","label","value","inputType","disabled","onChange","inputElem","useRef","inputValue","setInputValue","useState","isEditing","setIsEditing","styles","useStyles2","getStyles","inputId","useEffect","focusInput","current","focus","Label","htmlFor","className","colSpan","I","type","defaultValue","onBlur","event","status","LegacyInputStatus","target","ref","width","cx","ConfirmButton","closeOnConfirm","confirmText","onConfirm","onClick","onCancel","theme","css","colors","text","secondary","ServiceAccountRoleRow","roleOptions","onRoleChange","canUpdateRole","UserRolePicker","userId","orgId","basicRole","role","onBasicRoleChange","basicRoleDisabled","isDisabled","OrgRolePicker","ServiceAccountProfile","timeZone","ableToWrite","section","name","newValue","login","dateTimeFormat","createdAt","spacing","ServiceAccountTokensTable","tokens","tokenActionsDisabled","onDelete","useTheme2","map","key","tableRow","hasExpired","isRevoked","TokenExpiration","token","formatDate","created","formatLastUsedAtDate","lastUsedAt","TokenRevoked","DeleteButton","size","expiration","formatSecondsLeftUntilExpiration","secondsUntilExpiration","days","Math","ceil","tooltipContainer","Tooltip","content","Icon","toolTipIcon","neverExpire","primary","error","warning","BASE_URL","loadServiceAccount","saID","async","dispatch","serviceAccountFetchBegin","response","getBackendSrv","get","accessControlQueryParam","serviceAccountLoaded","console","serviceAccountFetchEnd","loadServiceAccountTokens","serviceAccountTokensLoaded","mapDispatchToProps","createServiceAccountToken","onTokenCreated","result","post","deleteServiceAccount","serviceAccountId","delete","locationService","deleteServiceAccountToken","updateServiceAccount","patch","connector","connect","state","serviceAccountProfile","isLoading","serviceAccounts","timezone","getTimeZone","user","ServiceAccountPageUnconnected","match","newToken","setNewToken","isTokenModalOpen","setIsTokenModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","isDisableModalOpen","setIsDisableModalOpen","parseInt","params","canReadPermissions","pageNav","img","avatarUrl","breadcrumbs","url","subTitle","fetchACOptions","showDeleteServiceAccountModal","show","showDisableServiceAccountModal","Page","navId","height","justify","Button","variant","ConfirmModal","isOpen","body","onDismiss","CreateTokenModal","serviceAccountLogin","onCreateToken","onClose","EXPIRATION_OPTIONS","tomorrow","Date","setDate","getDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","uuidv4","onCloseInternal","modalTitle","modal","contentClassName","modalContent","description","modalTokenRow","readOnly","modalCopyToClipboardButton","icon","getText","onClipboardCopy","required","placeholder","e","currentTarget","options","minDate","secondsToLive","getSecondsToLive","undefined","date","dateAsDate","now","getTime","API_KEYS_MIGRATION_INFO_STORAGE_KEY","fetchRoleOptions","acOptionsLoaded","getApiKeysMigrationStatus","apiKeysMigrationStatusLoaded","migrated","fetchServiceAccounts","withLoadingIndicator","getState","serviceAccountsFetchBegin","perPage","page","query","serviceAccountStateFilter","getStateFilter","serviceAccountsFetched","serviceAccountsFetchEnd","fetchServiceAccountsWithDebounce","debounce","leading","ServiceAccountStateFilter","changeQuery","queryChanged","changeStateFilter","filter","stateFilterChanged","getApiKeysMigrationInfo","showApiKeysMigrationInfo","store","showApiKeysMigrationInfoLoaded","closeApiKeysMigrationInfo"],"sourceRoot":""}